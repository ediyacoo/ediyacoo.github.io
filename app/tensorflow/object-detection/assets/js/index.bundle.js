/*! For license information please see index.bundle.js.LICENSE.txt */
!function(e){var t={};function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}__webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},__webpack_require__.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.t=function(e,t){if(1&t&&(e=__webpack_require__(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(__webpack_require__.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)__webpack_require__.d(n,r,function(t){return e[t]}.bind(null,r));return n},__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=264)}([function(e,t,n){"use strict";n.r(t),n.d(t,"AdadeltaOptimizer",(function(){return adadelta_optimizer_AdadeltaOptimizer})),n.d(t,"AdagradOptimizer",(function(){return adagrad_optimizer_AdagradOptimizer})),n.d(t,"AdamOptimizer",(function(){return adam_optimizer_AdamOptimizer})),n.d(t,"AdamaxOptimizer",(function(){return adamax_optimizer_AdamaxOptimizer})),n.d(t,"MomentumOptimizer",(function(){return momentum_optimizer_MomentumOptimizer})),n.d(t,"Optimizer",(function(){return optimizer_Optimizer})),n.d(t,"OptimizerConstructors",(function(){return optimizer_constructors_OptimizerConstructors})),n.d(t,"RMSPropOptimizer",(function(){return rmsprop_optimizer_RMSPropOptimizer})),n.d(t,"SGDOptimizer",(function(){return sgd_optimizer_SGDOptimizer})),n.d(t,"Tensor",(function(){return N.a})),n.d(t,"TensorBuffer",(function(){return N.b})),n.d(t,"Variable",(function(){return N.c})),n.d(t,"Rank",(function(){return ie.a})),n.d(t,"sumOutType",(function(){return ie.b})),n.d(t,"upcastType",(function(){return ie.c})),n.d(t,"abs",(function(){return ue.b})),n.d(t,"acos",(function(){return ue.c})),n.d(t,"acosh",(function(){return ue.d})),n.d(t,"add",(function(){return ue.e})),n.d(t,"addN",(function(){return ue.f})),n.d(t,"all",(function(){return ue.g})),n.d(t,"any",(function(){return ue.h})),n.d(t,"argMax",(function(){return ue.i})),n.d(t,"argMin",(function(){return ue.j})),n.d(t,"asin",(function(){return ue.k})),n.d(t,"asinh",(function(){return ue.l})),n.d(t,"atan",(function(){return ue.m})),n.d(t,"atan2",(function(){return ue.n})),n.d(t,"atanh",(function(){return ue.o})),n.d(t,"avgPool",(function(){return ue.p})),n.d(t,"avgPool3d",(function(){return ue.q})),n.d(t,"basicLSTMCell",(function(){return ue.r})),n.d(t,"batchToSpaceND",(function(){return ue.w})),n.d(t,"batchNorm",(function(){return ue.s})),n.d(t,"batchNorm2d",(function(){return ue.t})),n.d(t,"batchNorm3d",(function(){return ue.u})),n.d(t,"batchNorm4d",(function(){return ue.v})),n.d(t,"bincount",(function(){return ue.x})),n.d(t,"broadcastArgs",(function(){return ue.z})),n.d(t,"broadcastTo",(function(){return ue.A})),n.d(t,"buffer",(function(){return ue.B})),n.d(t,"cast",(function(){return ue.C})),n.d(t,"ceil",(function(){return ue.D})),n.d(t,"clipByValue",(function(){return ue.E})),n.d(t,"clone",(function(){return ue.F})),n.d(t,"complex",(function(){return ue.G})),n.d(t,"concat",(function(){return ue.H})),n.d(t,"concat1d",(function(){return ue.I})),n.d(t,"concat2d",(function(){return ue.J})),n.d(t,"concat3d",(function(){return ue.K})),n.d(t,"concat4d",(function(){return ue.L})),n.d(t,"conv1d",(function(){return ue.M})),n.d(t,"conv2d",(function(){return ue.N})),n.d(t,"conv2dTranspose",(function(){return ue.O})),n.d(t,"conv3d",(function(){return ue.P})),n.d(t,"conv3dTranspose",(function(){return ue.Q})),n.d(t,"cos",(function(){return ue.R})),n.d(t,"cosh",(function(){return ue.S})),n.d(t,"cumsum",(function(){return ue.U})),n.d(t,"denseBincount",(function(){return ue.V})),n.d(t,"depthToSpace",(function(){return ue.W})),n.d(t,"depthwiseConv2d",(function(){return ue.X})),n.d(t,"diag",(function(){return ue.Y})),n.d(t,"dilation2d",(function(){return ue.Z})),n.d(t,"div",(function(){return ue.ab})),n.d(t,"divNoNan",(function(){return ue.bb})),n.d(t,"dot",(function(){return ue.cb})),n.d(t,"einsum",(function(){return ue.eb})),n.d(t,"elu",(function(){return ue.fb})),n.d(t,"equal",(function(){return ue.hb})),n.d(t,"erf",(function(){return ue.ib})),n.d(t,"exp",(function(){return ue.jb})),n.d(t,"expandDims",(function(){return ue.kb})),n.d(t,"expm1",(function(){return ue.lb})),n.d(t,"eye",(function(){return ue.mb})),n.d(t,"fill",(function(){return ue.ob})),n.d(t,"floor",(function(){return ue.pb})),n.d(t,"floorDiv",(function(){return ue.qb})),n.d(t,"gather",(function(){return ue.sb})),n.d(t,"greater",(function(){return ue.ub})),n.d(t,"greaterEqual",(function(){return ue.vb})),n.d(t,"imag",(function(){return ue.xb})),n.d(t,"isFinite",(function(){return ue.Bb})),n.d(t,"isInf",(function(){return ue.Cb})),n.d(t,"isNaN",(function(){return ue.Db})),n.d(t,"leakyRelu",(function(){return ue.Eb})),n.d(t,"less",(function(){return ue.Fb})),n.d(t,"lessEqual",(function(){return ue.Gb})),n.d(t,"linspace",(function(){return ue.Ib})),n.d(t,"localResponseNormalization",(function(){return ue.Jb})),n.d(t,"log",(function(){return ue.Kb})),n.d(t,"log1p",(function(){return ue.Lb})),n.d(t,"logSigmoid",(function(){return ue.Mb})),n.d(t,"logSoftmax",(function(){return ue.Nb})),n.d(t,"logSumExp",(function(){return ue.Ob})),n.d(t,"logicalAnd",(function(){return ue.Pb})),n.d(t,"logicalNot",(function(){return ue.Qb})),n.d(t,"logicalOr",(function(){return ue.Rb})),n.d(t,"logicalXor",(function(){return ue.Sb})),n.d(t,"matMul",(function(){return ue.Ub})),n.d(t,"max",(function(){return ue.Vb})),n.d(t,"maxPool",(function(){return ue.Wb})),n.d(t,"maxPool3d",(function(){return ue.Xb})),n.d(t,"maxPoolWithArgmax",(function(){return ue.Yb})),n.d(t,"maximum",(function(){return ue.Zb})),n.d(t,"mean",(function(){return ue.ac})),n.d(t,"meshgrid",(function(){return ue.bc})),n.d(t,"min",(function(){return ue.cc})),n.d(t,"minimum",(function(){return ue.dc})),n.d(t,"mirrorPad",(function(){return ue.ec})),n.d(t,"mod",(function(){return ue.fc})),n.d(t,"moments",(function(){return ue.gc})),n.d(t,"mul",(function(){return ue.ic})),n.d(t,"multiRNNCell",(function(){return ue.jc})),n.d(t,"multinomial",(function(){return ue.kc})),n.d(t,"neg",(function(){return ue.lc})),n.d(t,"notEqual",(function(){return ue.nc})),n.d(t,"oneHot",(function(){return ue.oc})),n.d(t,"ones",(function(){return ue.pc})),n.d(t,"onesLike",(function(){return ue.qc})),n.d(t,"outerProduct",(function(){return ue.sc})),n.d(t,"pad",(function(){return ue.tc})),n.d(t,"pad1d",(function(){return ue.uc})),n.d(t,"pad2d",(function(){return ue.vc})),n.d(t,"pad3d",(function(){return ue.wc})),n.d(t,"pad4d",(function(){return ue.xc})),n.d(t,"pool",(function(){return ue.yc})),n.d(t,"pow",(function(){return ue.zc})),n.d(t,"prelu",(function(){return ue.Ac})),n.d(t,"print",(function(){return ue.Bc})),n.d(t,"prod",(function(){return ue.Cc})),n.d(t,"rand",(function(){return ue.Dc})),n.d(t,"randomGamma",(function(){return ue.Ec})),n.d(t,"randomNormal",(function(){return ue.Fc})),n.d(t,"randomUniform",(function(){return ue.Gc})),n.d(t,"range",(function(){return ue.Hc})),n.d(t,"real",(function(){return ue.Ic})),n.d(t,"reciprocal",(function(){return ue.Jc})),n.d(t,"relu",(function(){return ue.Kc})),n.d(t,"relu6",(function(){return ue.Lc})),n.d(t,"reshape",(function(){return ue.Mc})),n.d(t,"reverse",(function(){return ue.Nc})),n.d(t,"reverse1d",(function(){return ue.Oc})),n.d(t,"reverse2d",(function(){return ue.Pc})),n.d(t,"reverse3d",(function(){return ue.Qc})),n.d(t,"reverse4d",(function(){return ue.Rc})),n.d(t,"round",(function(){return ue.Tc})),n.d(t,"rsqrt",(function(){return ue.Uc})),n.d(t,"scalar",(function(){return ue.Vc})),n.d(t,"selu",(function(){return ue.Xc})),n.d(t,"separableConv2d",(function(){return ue.Yc})),n.d(t,"setdiff1dAsync",(function(){return ue.Zc})),n.d(t,"sigmoid",(function(){return ue.ad})),n.d(t,"sign",(function(){return ue.bd})),n.d(t,"sin",(function(){return ue.dd})),n.d(t,"sinh",(function(){return ue.ed})),n.d(t,"slice",(function(){return ue.fd})),n.d(t,"slice1d",(function(){return ue.gd})),n.d(t,"slice2d",(function(){return ue.hd})),n.d(t,"slice3d",(function(){return ue.id})),n.d(t,"slice4d",(function(){return ue.jd})),n.d(t,"softmax",(function(){return ue.kd})),n.d(t,"softplus",(function(){return ue.ld})),n.d(t,"spaceToBatchND",(function(){return ue.md})),n.d(t,"fft",(function(){return ue.nb})),n.d(t,"ifft",(function(){return ue.wb})),n.d(t,"irfft",(function(){return ue.Ab})),n.d(t,"rfft",(function(){return ue.Sc})),n.d(t,"split",(function(){return ue.qd})),n.d(t,"sqrt",(function(){return ue.rd})),n.d(t,"square",(function(){return ue.sd})),n.d(t,"squaredDifference",(function(){return ue.td})),n.d(t,"squeeze",(function(){return ue.ud})),n.d(t,"stack",(function(){return ue.vd})),n.d(t,"step",(function(){return ue.wd})),n.d(t,"stridedSlice",(function(){return ue.xd})),n.d(t,"sub",(function(){return ue.zd})),n.d(t,"sum",(function(){return ue.Ad})),n.d(t,"tan",(function(){return ue.Bd})),n.d(t,"tanh",(function(){return ue.Cd})),n.d(t,"tensor",(function(){return ue.Dd})),n.d(t,"tensor1d",(function(){return ue.Ed})),n.d(t,"tensor2d",(function(){return ue.Fd})),n.d(t,"tensor3d",(function(){return ue.Gd})),n.d(t,"tensor4d",(function(){return ue.Hd})),n.d(t,"tensor5d",(function(){return ue.Id})),n.d(t,"tensor6d",(function(){return ue.Jd})),n.d(t,"tile",(function(){return ue.Kd})),n.d(t,"topk",(function(){return ue.Ld})),n.d(t,"truncatedNormal",(function(){return ue.Nd})),n.d(t,"unique",(function(){return ue.Od})),n.d(t,"unsortedSegmentSum",(function(){return ue.Pd})),n.d(t,"unstack",(function(){return ue.Qd})),n.d(t,"variable",(function(){return ue.Rd})),n.d(t,"where",(function(){return ue.Sd})),n.d(t,"whereAsync",(function(){return ue.Td})),n.d(t,"zeros",(function(){return ue.Ud})),n.d(t,"zerosLike",(function(){return ue.Vd})),n.d(t,"booleanMaskAsync",(function(){return ue.y})),n.d(t,"transpose",(function(){return ue.Md})),n.d(t,"norm",(function(){return ue.mc})),n.d(t,"movingAverage",(function(){return ue.hc})),n.d(t,"scatterND",(function(){return ue.Wc})),n.d(t,"sparseToDense",(function(){return ue.od})),n.d(t,"gatherND",(function(){return ue.tb})),n.d(t,"dropout",(function(){return ue.db})),n.d(t,"enclosingPowerOfTwo",(function(){return ue.gb})),n.d(t,"cosineWindow",(function(){return ue.T})),n.d(t,"inTopKAsync",(function(){return ue.zb})),n.d(t,"op",(function(){return ue.rc})),n.d(t,"OP_SCOPE_SUFFIX",(function(){return ue.a})),n.d(t,"image",(function(){return ue.yb})),n.d(t,"linalg",(function(){return ue.Hb})),n.d(t,"losses",(function(){return ue.Tb})),n.d(t,"spectral",(function(){return ue.pd})),n.d(t,"fused",(function(){return ue.rb})),n.d(t,"signal",(function(){return ue.cd})),n.d(t,"sparse",(function(){return ue.nd})),n.d(t,"string",(function(){return ue.yd})),n.d(t,"Reduction",(function(){return ce.a})),n.d(t,"train",(function(){return le})),n.d(t,"enableProdMode",(function(){return q.g})),n.d(t,"enableDebugMode",(function(){return q.f})),n.d(t,"disableDeprecationWarnings",(function(){return q.c})),n.d(t,"deprecationWarn",(function(){return q.b})),n.d(t,"disposeVariables",(function(){return q.e})),n.d(t,"engine",(function(){return q.h})),n.d(t,"memory",(function(){return q.m})),n.d(t,"profile",(function(){return q.n})),n.d(t,"tidy",(function(){return q.t})),n.d(t,"dispose",(function(){return q.d})),n.d(t,"keep",(function(){return q.l})),n.d(t,"time",(function(){return q.u})),n.d(t,"setBackend",(function(){return q.r})),n.d(t,"ready",(function(){return q.o})),n.d(t,"getBackend",(function(){return q.k})),n.d(t,"removeBackend",(function(){return q.q})),n.d(t,"findBackend",(function(){return q.i})),n.d(t,"findBackendFactory",(function(){return q.j})),n.d(t,"registerBackend",(function(){return q.p})),n.d(t,"backend",(function(){return q.a})),n.d(t,"setPlatform",(function(){return q.s})),n.d(t,"getKernel",(function(){return P.c})),n.d(t,"getGradient",(function(){return P.b})),n.d(t,"getKernelsForBackend",(function(){return P.d})),n.d(t,"registerKernel",(function(){return P.f})),n.d(t,"registerGradient",(function(){return P.e})),n.d(t,"unregisterKernel",(function(){return P.h})),n.d(t,"unregisterGradient",(function(){return P.g})),n.d(t,"copyRegisteredKernels",(function(){return P.a})),n.d(t,"customGrad",(function(){return ee.a})),n.d(t,"grad",(function(){return ee.b})),n.d(t,"grads",(function(){return ee.c})),n.d(t,"valueAndGrad",(function(){return ee.d})),n.d(t,"valueAndGrads",(function(){return ee.e})),n.d(t,"variableGrads",(function(){return ee.f})),n.d(t,"Environment",(function(){return f.b})),n.d(t,"env",(function(){return f.c})),n.d(t,"ENV",(function(){return f.a})),n.d(t,"version_core",(function(){return H})),n.d(t,"nextFrame",(function(){return de.a})),n.d(t,"browser",(function(){return s})),n.d(t,"io",(function(){return r})),n.d(t,"math",(function(){return a})),n.d(t,"serialization",(function(){return u})),n.d(t,"test_util",(function(){return W})),n.d(t,"util",(function(){return G})),n.d(t,"backend_util",(function(){return l})),n.d(t,"broadcast_util",(function(){return D})),n.d(t,"tensor_util",(function(){return V})),n.d(t,"slice_util",(function(){return i})),n.d(t,"gather_util",(function(){return o})),n.d(t,"scatter_util",(function(){return U})),n.d(t,"device_util",(function(){return Te})),n.d(t,"kernel_impls",(function(){return p})),n.d(t,"KernelBackend",(function(){return Ce.b})),n.d(t,"DataStorage",(function(){return Ce.a})),n.d(t,"Abs",(function(){return M.a})),n.d(t,"Acos",(function(){return M.b})),n.d(t,"Acosh",(function(){return M.c})),n.d(t,"Add",(function(){return M.d})),n.d(t,"AddN",(function(){return M.e})),n.d(t,"All",(function(){return M.f})),n.d(t,"Any",(function(){return M.g})),n.d(t,"ArgMax",(function(){return M.h})),n.d(t,"ArgMin",(function(){return M.i})),n.d(t,"Asin",(function(){return M.j})),n.d(t,"Asinh",(function(){return M.k})),n.d(t,"Atan",(function(){return M.l})),n.d(t,"Atanh",(function(){return M.n})),n.d(t,"Atan2",(function(){return M.m})),n.d(t,"AvgPool",(function(){return M.o})),n.d(t,"AvgPoolGrad",(function(){return M.r})),n.d(t,"AvgPool3D",(function(){return M.p})),n.d(t,"AvgPool3DGrad",(function(){return M.q})),n.d(t,"BatchMatMul",(function(){return M.s})),n.d(t,"BatchToSpaceND",(function(){return M.t})),n.d(t,"Bincount",(function(){return M.u})),n.d(t,"BroadcastTo",(function(){return M.w})),n.d(t,"BroadcastArgs",(function(){return M.v})),n.d(t,"Cast",(function(){return M.x})),n.d(t,"Ceil",(function(){return M.y})),n.d(t,"ClipByValue",(function(){return M.z})),n.d(t,"Complex",(function(){return M.A})),n.d(t,"ComplexAbs",(function(){return M.B})),n.d(t,"Concat",(function(){return M.C})),n.d(t,"Conv2D",(function(){return M.D})),n.d(t,"Conv2DBackpropFilter",(function(){return M.E})),n.d(t,"Conv2DBackpropInput",(function(){return M.F})),n.d(t,"Conv3D",(function(){return M.G})),n.d(t,"Conv3DBackpropFilterV2",(function(){return M.H})),n.d(t,"Conv3DBackpropInputV2",(function(){return M.I})),n.d(t,"Cos",(function(){return M.J})),n.d(t,"Cosh",(function(){return M.K})),n.d(t,"Cumsum",(function(){return M.M})),n.d(t,"CropAndResize",(function(){return M.L})),n.d(t,"DenseBincount",(function(){return M.N})),n.d(t,"DepthToSpace",(function(){return M.O})),n.d(t,"DepthwiseConv2dNative",(function(){return M.P})),n.d(t,"DepthwiseConv2dNativeBackpropFilter",(function(){return M.Q})),n.d(t,"DepthwiseConv2dNativeBackpropInput",(function(){return M.R})),n.d(t,"Diag",(function(){return M.S})),n.d(t,"Dilation2D",(function(){return M.T})),n.d(t,"Dilation2DBackpropInput",(function(){return M.V})),n.d(t,"Dilation2DBackpropFilter",(function(){return M.U})),n.d(t,"RealDiv",(function(){return M.mc})),n.d(t,"Einsum",(function(){return M.W})),n.d(t,"Elu",(function(){return M.X})),n.d(t,"EluGrad",(function(){return M.Y})),n.d(t,"Erf",(function(){return M.ab})),n.d(t,"Equal",(function(){return M.Z})),n.d(t,"Exp",(function(){return M.bb})),n.d(t,"ExpandDims",(function(){return M.cb})),n.d(t,"Expm1",(function(){return M.db})),n.d(t,"FFT",(function(){return M.eb})),n.d(t,"Fill",(function(){return M.fb})),n.d(t,"FlipLeftRight",(function(){return M.gb})),n.d(t,"Floor",(function(){return M.hb})),n.d(t,"FloorDiv",(function(){return M.ib})),n.d(t,"FusedBatchNorm",(function(){return M.kb})),n.d(t,"GatherV2",(function(){return M.ob})),n.d(t,"GatherNd",(function(){return M.nb})),n.d(t,"Greater",(function(){return M.pb})),n.d(t,"GreaterEqual",(function(){return M.qb})),n.d(t,"Identity",(function(){return M.sb})),n.d(t,"IFFT",(function(){return M.rb})),n.d(t,"Imag",(function(){return M.tb})),n.d(t,"IsFinite",(function(){return M.ub})),n.d(t,"IsInf",(function(){return M.vb})),n.d(t,"IsNan",(function(){return M.wb})),n.d(t,"LeakyRelu",(function(){return M.zb})),n.d(t,"Less",(function(){return M.Ab})),n.d(t,"LessEqual",(function(){return M.Bb})),n.d(t,"LinSpace",(function(){return M.Cb})),n.d(t,"Log",(function(){return M.Db})),n.d(t,"Log1p",(function(){return M.Eb})),n.d(t,"LogicalAnd",(function(){return M.Gb})),n.d(t,"LogicalNot",(function(){return M.Hb})),n.d(t,"LogicalOr",(function(){return M.Ib})),n.d(t,"LogSoftmax",(function(){return M.Fb})),n.d(t,"LRN",(function(){return M.xb})),n.d(t,"LRNGrad",(function(){return M.yb})),n.d(t,"Max",(function(){return M.Jb})),n.d(t,"Maximum",(function(){return M.Pb})),n.d(t,"MaxPool",(function(){return M.Kb})),n.d(t,"MaxPoolGrad",(function(){return M.Nb})),n.d(t,"MaxPool3D",(function(){return M.Lb})),n.d(t,"MaxPool3DGrad",(function(){return M.Mb})),n.d(t,"MaxPoolWithArgmax",(function(){return M.Ob})),n.d(t,"Mean",(function(){return M.Qb})),n.d(t,"Min",(function(){return M.Rb})),n.d(t,"Minimum",(function(){return M.Sb})),n.d(t,"MirrorPad",(function(){return M.Tb})),n.d(t,"Mod",(function(){return M.Ub})),n.d(t,"Multinomial",(function(){return M.Vb})),n.d(t,"Multiply",(function(){return M.Wb})),n.d(t,"Neg",(function(){return M.Xb})),n.d(t,"NotEqual",(function(){return M.bc})),n.d(t,"NonMaxSuppressionV3",(function(){return M.Yb})),n.d(t,"NonMaxSuppressionV4",(function(){return M.Zb})),n.d(t,"NonMaxSuppressionV5",(function(){return M.ac})),n.d(t,"OnesLike",(function(){return M.dc})),n.d(t,"OneHot",(function(){return M.cc})),n.d(t,"Pack",(function(){return M.ec})),n.d(t,"PadV2",(function(){return M.fc})),n.d(t,"Pool",(function(){return M.gc})),n.d(t,"Pow",(function(){return M.hc})),n.d(t,"Prelu",(function(){return M.ic})),n.d(t,"Prod",(function(){return M.jc})),n.d(t,"Range",(function(){return M.kc})),n.d(t,"Real",(function(){return M.lc})),n.d(t,"Reciprocal",(function(){return M.nc})),n.d(t,"Relu",(function(){return M.oc})),n.d(t,"Reshape",(function(){return M.qc})),n.d(t,"ResizeNearestNeighbor",(function(){return M.tc})),n.d(t,"ResizeNearestNeighborGrad",(function(){return M.uc})),n.d(t,"ResizeBilinear",(function(){return M.rc})),n.d(t,"ResizeBilinearGrad",(function(){return M.sc})),n.d(t,"Relu6",(function(){return M.pc})),n.d(t,"Reverse",(function(){return M.vc})),n.d(t,"Round",(function(){return M.xc})),n.d(t,"Rsqrt",(function(){return M.yc})),n.d(t,"ScatterNd",(function(){return M.zc})),n.d(t,"Select",(function(){return M.Ac})),n.d(t,"Selu",(function(){return M.Bc})),n.d(t,"Slice",(function(){return M.Gc})),n.d(t,"Sin",(function(){return M.Ec})),n.d(t,"Sinh",(function(){return M.Fc})),n.d(t,"Sign",(function(){return M.Dc})),n.d(t,"Sigmoid",(function(){return M.Cc})),n.d(t,"Softplus",(function(){return M.Ic})),n.d(t,"Sqrt",(function(){return M.Qc})),n.d(t,"Sum",(function(){return M.Zc})),n.d(t,"SpaceToBatchND",(function(){return M.Jc})),n.d(t,"SplitV",(function(){return M.Pc})),n.d(t,"Softmax",(function(){return M.Hc})),n.d(t,"SparseFillEmptyRows",(function(){return M.Kc})),n.d(t,"SparseReshape",(function(){return M.Lc})),n.d(t,"SparseSegmentMean",(function(){return M.Mc})),n.d(t,"SparseSegmentSum",(function(){return M.Nc})),n.d(t,"SparseToDense",(function(){return M.Oc})),n.d(t,"SquaredDifference",(function(){return M.Sc})),n.d(t,"Square",(function(){return M.Rc})),n.d(t,"StridedSlice",(function(){return M.Uc})),n.d(t,"StringNGrams",(function(){return M.Vc})),n.d(t,"StringSplit",(function(){return M.Wc})),n.d(t,"StringToHashBucketFast",(function(){return M.Xc})),n.d(t,"Sub",(function(){return M.Yc})),n.d(t,"Tan",(function(){return M.ad})),n.d(t,"Tanh",(function(){return M.bd})),n.d(t,"Tile",(function(){return M.cd})),n.d(t,"TopK",(function(){return M.dd})),n.d(t,"Transform",(function(){return M.ed})),n.d(t,"Transpose",(function(){return M.fd})),n.d(t,"Unique",(function(){return M.gd})),n.d(t,"Unpack",(function(){return M.hd})),n.d(t,"UnsortedSegmentSum",(function(){return M.id})),n.d(t,"ZerosLike",(function(){return M.jd})),n.d(t,"Step",(function(){return M.Tc})),n.d(t,"FromPixels",(function(){return M.jb})),n.d(t,"RotateWithOffset",(function(){return M.wc})),n.d(t,"_FusedMatMul",(function(){return M.kd})),n.d(t,"FusedConv2D",(function(){return M.lb})),n.d(t,"FusedDepthwiseConv2D",(function(){return M.mb}));var r={};n.r(r),n.d(r,"copyModel",(function(){return copyModel})),n.d(r,"listModels",(function(){return listModels})),n.d(r,"moveModel",(function(){return moveModel})),n.d(r,"removeModel",(function(){return removeModel})),n.d(r,"browserFiles",(function(){return browserFiles})),n.d(r,"browserHTTPRequest",(function(){return browserHTTPRequest})),n.d(r,"concatenateArrayBuffers",(function(){return m.d})),n.d(r,"decodeWeights",(function(){return m.e})),n.d(r,"encodeWeights",(function(){return m.f})),n.d(r,"fromMemory",(function(){return fromMemory})),n.d(r,"getLoadHandlers",(function(){return getLoadHandlers})),n.d(r,"getModelArtifactsForJSON",(function(){return m.g})),n.d(r,"getModelArtifactsInfoForJSON",(function(){return m.h})),n.d(r,"getSaveHandlers",(function(){return getSaveHandlers})),n.d(r,"http",(function(){return http})),n.d(r,"isHTTPScheme",(function(){return isHTTPScheme})),n.d(r,"loadWeights",(function(){return loadWeights})),n.d(r,"registerLoadRouter",(function(){return registerLoadRouter})),n.d(r,"registerSaveRouter",(function(){return registerSaveRouter})),n.d(r,"weightsLoaderFactory",(function(){return weightsLoaderFactory})),n.d(r,"withSaveHandler",(function(){return withSaveHandler}));var a={};n.r(a),n.d(a,"confusionMatrix",(function(){return F}));var s={};n.r(s),n.d(s,"fromPixelsAsync",(function(){return fromPixelsAsync})),n.d(s,"toPixels",(function(){return toPixels})),n.d(s,"fromPixels",(function(){return z}));var o={};n.r(o),n.d(o,"prepareAndValidate",(function(){return prepareAndValidate}));var i={};n.r(i),n.d(i,"assertParamsValid",(function(){return assertParamsValid})),n.d(i,"maskToAxes",(function(){return maskToAxes})),n.d(i,"computeOutShape",(function(){return computeOutShape})),n.d(i,"stridesWithElidedDims",(function(){return stridesWithElidedDims})),n.d(i,"getNormalizedAxes",(function(){return getNormalizedAxes})),n.d(i,"startIndicesWithElidedDims",(function(){return startIndicesWithElidedDims})),n.d(i,"stopIndicesWithElidedDims",(function(){return stopIndicesWithElidedDims})),n.d(i,"stridesForAxis",(function(){return stridesForAxis})),n.d(i,"startForAxis",(function(){return startForAxis})),n.d(i,"stopForAxis",(function(){return stopForAxis})),n.d(i,"isSliceContinous",(function(){return isSliceContinous})),n.d(i,"computeFlatOffset",(function(){return computeFlatOffset})),n.d(i,"parseSliceParams",(function(){return parseSliceParams})),n.d(i,"sliceInfo",(function(){return sliceInfo}));var u={};n.r(u),n.d(u,"Serializable",(function(){return Serializable})),n.d(u,"SerializationMap",(function(){return SerializationMap})),n.d(u,"registerClass",(function(){return registerClass}));var c={};n.r(c),n.d(c,"segOpComputeOptimalWindowSize",(function(){return segOpComputeOptimalWindowSize})),n.d(c,"computeOutShape",(function(){return segment_util_computeOutShape})),n.d(c,"collectGatherOpShapeInfo",(function(){return collectGatherOpShapeInfo}));var l={};n.r(l),n.d(l,"axesAreInnerMostDims",(function(){return pe.b})),n.d(l,"combineLocations",(function(){return pe.c})),n.d(l,"computeOutAndReduceShapes",(function(){return pe.d})),n.d(l,"expandShapeToKeepDim",(function(){return pe.e})),n.d(l,"assertAxesAreInnerMostDims",(function(){return pe.a})),n.d(l,"getAxesPermutation",(function(){return pe.f})),n.d(l,"getUndoAxesPermutation",(function(){return pe.h})),n.d(l,"getInnerMostAxes",(function(){return pe.g})),n.d(l,"getBroadcastDims",(function(){return D.getBroadcastDims})),n.d(l,"getReductionAxes",(function(){return D.getReductionAxes})),n.d(l,"assertAndGetBroadcastShape",(function(){return D.assertAndGetBroadcastShape})),n.d(l,"assertParamsConsistent",(function(){return assertParamsConsistent})),n.d(l,"computeOutShape",(function(){return concat_util_computeOutShape})),n.d(l,"computeDilation2DInfo",(function(){return he.e})),n.d(l,"computePool2DInfo",(function(){return he.f})),n.d(l,"computePool3DInfo",(function(){return he.g})),n.d(l,"computeConv2DInfo",(function(){return he.b})),n.d(l,"computeConv3DInfo",(function(){return he.c})),n.d(l,"computeDefaultPad",(function(){return he.d})),n.d(l,"tupleValuesAreOne",(function(){return he.j})),n.d(l,"eitherStridesOrDilationsAreOne",(function(){return he.i})),n.d(l,"convertConv2DDataFormat",(function(){return he.h})),n.d(l,"checkPadOnDimRoundingMode",(function(){return he.a})),n.d(l,"getFusedDyActivation",(function(){return fe.c})),n.d(l,"getFusedBiasGradient",(function(){return fe.b})),n.d(l,"applyActivation",(function(){return fe.a})),n.d(l,"shouldFuse",(function(){return fe.d})),n.d(l,"PARALLELIZE_THRESHOLD",(function(){return me})),n.d(l,"computeOptimalWindowSize",(function(){return computeOptimalWindowSize})),n.d(l,"slice_util",(function(){return i})),n.d(l,"upcastType",(function(){return ie.c})),n.d(l,"getImageCenter",(function(){return getImageCenter})),n.d(l,"getReshaped",(function(){return getReshaped})),n.d(l,"getPermuted",(function(){return getPermuted})),n.d(l,"getReshapedPermuted",(function(){return getReshapedPermuted})),n.d(l,"getSliceBeginCoords",(function(){return getSliceBeginCoords})),n.d(l,"getSliceSize",(function(){return getSliceSize})),n.d(l,"prepareAndValidate",(function(){return prepareAndValidate})),n.d(l,"validateUpdateShape",(function(){return U.validateUpdateShape})),n.d(l,"validateInput",(function(){return U.validateInput})),n.d(l,"calculateShapes",(function(){return U.calculateShapes})),n.d(l,"SELU_SCALEALPHA",(function(){return be})),n.d(l,"SELU_SCALE",(function(){return ge})),n.d(l,"ERF_P",(function(){return ye})),n.d(l,"ERF_A1",(function(){return xe})),n.d(l,"ERF_A2",(function(){return ve})),n.d(l,"ERF_A3",(function(){return Oe})),n.d(l,"ERF_A4",(function(){return ke})),n.d(l,"ERF_A5",(function(){return we})),n.d(l,"warn",(function(){return Ie.b})),n.d(l,"log",(function(){return Ie.a})),n.d(l,"mergeRealAndImagArrays",(function(){return mergeRealAndImagArrays})),n.d(l,"splitRealAndImagArrays",(function(){return splitRealAndImagArrays})),n.d(l,"complexWithEvenIndex",(function(){return complexWithEvenIndex})),n.d(l,"complexWithOddIndex",(function(){return complexWithOddIndex})),n.d(l,"getComplexWithIndex",(function(){return getComplexWithIndex})),n.d(l,"assignToTypedArray",(function(){return assignToTypedArray})),n.d(l,"exponents",(function(){return exponents})),n.d(l,"exponent",(function(){return exponent})),n.d(l,"decodeEinsumEquation",(function(){return decodeEinsumEquation})),n.d(l,"getEinsumPermutation",(function(){return getEinsumPermutation})),n.d(l,"checkEinsumDimSizes",(function(){return checkEinsumDimSizes})),n.d(l,"getEinsumComputePath",(function(){return getEinsumComputePath})),n.d(l,"isIdentityPermutation",(function(){return isIdentityPermutation})),n.d(l,"prepareSplitSize",(function(){return prepareSplitSize})),n.d(l,"getSparseFillEmptyRowsIndicesDenseShapeMismatch",(function(){return getSparseFillEmptyRowsIndicesDenseShapeMismatch})),n.d(l,"getSparseFillEmptyRowsNegativeIndexErrorMessage",(function(){return getSparseFillEmptyRowsNegativeIndexErrorMessage})),n.d(l,"getSparseFillEmptyRowsOutOfRangeIndexErrorMessage",(function(){return getSparseFillEmptyRowsOutOfRangeIndexErrorMessage})),n.d(l,"getSparseReshapeMultipleNegativeOneOutputDimErrorMessage",(function(){return getSparseReshapeMultipleNegativeOneOutputDimErrorMessage})),n.d(l,"getSparseReshapeNegativeOutputDimErrorMessage",(function(){return getSparseReshapeNegativeOutputDimErrorMessage})),n.d(l,"getSparseReshapeEmptyTensorZeroOutputDimErrorMessage",(function(){return getSparseReshapeEmptyTensorZeroOutputDimErrorMessage})),n.d(l,"getSparseReshapeInputOutputMultipleErrorMessage",(function(){return getSparseReshapeInputOutputMultipleErrorMessage})),n.d(l,"getSparseReshapeInputOutputMismatchErrorMessage",(function(){return getSparseReshapeInputOutputMismatchErrorMessage})),n.d(l,"getSparseSegmentReductionNegativeSegmentIdsErrorMessage",(function(){return getSparseSegmentReductionNegativeSegmentIdsErrorMessage})),n.d(l,"getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage",(function(){return getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage})),n.d(l,"getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage",(function(){return getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage})),n.d(l,"getSparseSegmentReductionIndicesOutOfRangeErrorMessage",(function(){return getSparseSegmentReductionIndicesOutOfRangeErrorMessage})),n.d(l,"segment_util",(function(){return c})),n.d(l,"fromUint8ToStringArray",(function(){return fromUint8ToStringArray})),n.d(l,"fromStringArrayToUint8",(function(){return fromStringArrayToUint8}));var p={};n.r(p),n.d(p,"nonMaxSuppressionV3Impl",(function(){return Ne.a})),n.d(p,"nonMaxSuppressionV4Impl",(function(){return Ne.b})),n.d(p,"nonMaxSuppressionV5Impl",(function(){return Ne.c})),n.d(p,"whereImpl",(function(){return _e.a}));var h=n(4),f=(n(110),n(13)),m=n(28);class IORouterRegistry{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==IORouterRegistry.instance&&(IORouterRegistry.instance=new IORouterRegistry),IORouterRegistry.instance}static registerSaveRouter(e){IORouterRegistry.getInstance().saveRouters.push(e)}static registerLoadRouter(e){IORouterRegistry.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return IORouterRegistry.getHandlers(e,"save")}static getLoadHandlers(e,t){return IORouterRegistry.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?IORouterRegistry.getInstance().loadRouters:IORouterRegistry.getInstance().saveRouters).forEach(t=>{const a=t(e,n);null!==a&&r.push(a)}),r}}const registerSaveRouter=e=>IORouterRegistry.registerSaveRouter(e),registerLoadRouter=e=>IORouterRegistry.registerLoadRouter(e),getSaveHandlers=e=>IORouterRegistry.getSaveHandlers(e),getLoadHandlers=(e,t)=>IORouterRegistry.getLoadHandlers(e,t);function getIndexedDBFactory(){if(!Object(f.c)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function setUpDatabase(e){const t=e.result;t.createObjectStore("models_store",{keyPath:"modelPath"}),t.createObjectStore("model_info_store",{keyPath:"modelPath"})}class indexed_db_BrowserIndexedDB{constructor(e){if(this.indexedDB=getIndexedDBFactory(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>setUpDatabase(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction("models_store","readonly"),r=t.objectStore("models_store").get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=Object(m.h)(t),s=a.transaction("model_info_store","readwrite");let o=s.objectStore("model_info_store");const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction("models_store","readwrite");const i=u.objectStore("models_store").put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore("model_info_store");const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)})}}indexed_db_BrowserIndexedDB.URL_SCHEME="indexeddb://";const indexedDBRouter=e=>Object(f.c)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(indexed_db_BrowserIndexedDB.URL_SCHEME)?function browserIndexedDB(e){return new indexed_db_BrowserIndexedDB(e)}(e.slice(indexed_db_BrowserIndexedDB.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(indexedDBRouter),IORouterRegistry.registerLoadRouter(indexedDBRouter);class BrowserIndexedDBManager{constructor(){this.indexedDB=getIndexedDBFactory()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open("tensorflowjs",1);n.onupgradeneeded=()=>setUpDatabase(n),n.onsuccess=()=>{const r=n.result,a=r.transaction("model_info_store","readonly"),s=a.objectStore("model_info_store").getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){return e=function maybeStripScheme(e){return e.startsWith(indexed_db_BrowserIndexedDB.URL_SCHEME)?e.slice(indexed_db_BrowserIndexedDB.URL_SCHEME.length):e}(e),new Promise((t,n)=>{const r=this.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=()=>setUpDatabase(r),r.onsuccess=()=>{const a=r.result,s=a.transaction("model_info_store","readwrite"),o=s.objectStore("model_info_store"),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),deleteModelData=()=>{u=a.transaction("models_store","readwrite");const r=u.objectStore("models_store").delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=deleteModelData,r.onerror=e=>(deleteModelData(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)})}}var b=n(6);const g="tensorflowjs_models",y="info",x="model_topology",v="weight_specs",O="weight_data",k="model_metadata";function getModelKeys(e){return{info:[g,e,y].join("/"),topology:[g,e,x].join("/"),weightSpecs:[g,e,v].join("/"),weightData:[g,e,O].join("/"),modelMetadata:[g,e,k].join("/")}}function removeItems(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function getModelPathFromKey(e){const t=e.split("/");if(t.length<3)throw new Error("Invalid key format: "+e);return t.slice(1,t.length-1).join("/")}class local_storage_BrowserLocalStorage{constructor(e){if(!Object(f.c)().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=getModelKeys(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Object(m.h)(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,Object(m.a)(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw removeItems(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=Object(m.b)(s),t}}local_storage_BrowserLocalStorage.URL_SCHEME="localstorage://";const localStorageRouter=e=>Object(f.c)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(local_storage_BrowserLocalStorage.URL_SCHEME)?function browserLocalStorage(e){return new local_storage_BrowserLocalStorage(e)}(e.slice(local_storage_BrowserLocalStorage.URL_SCHEME.length)):null;IORouterRegistry.registerSaveRouter(localStorageRouter),IORouterRegistry.registerLoadRouter(localStorageRouter);class local_storage_BrowserLocalStorageManager{constructor(){Object(b.b)(Object(f.c)().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),Object(b.b)("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=g+"/",n="/"+y;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){e[getModelPathFromKey(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){const t=getModelKeys(e=function local_storage_maybeStripScheme(e){return e.startsWith(local_storage_BrowserLocalStorage.URL_SCHEME)?e.slice(local_storage_BrowserLocalStorage.URL_SCHEME.length):e}(e));if(null==this.LS.getItem(t.info))throw new Error(`Cannot find model at path '${e}'`);const n=JSON.parse(this.LS.getItem(t.info));return removeItems(t),n}}class model_management_ModelStoreManagerRegistry{constructor(){this.managers={}}static getInstance(){return null==model_management_ModelStoreManagerRegistry.instance&&(model_management_ModelStoreManagerRegistry.instance=new model_management_ModelStoreManagerRegistry),model_management_ModelStoreManagerRegistry.instance}static registerManager(e,t){Object(b.b)(null!=e,()=>"scheme must not be undefined or null."),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),Object(b.b)(e.length>0,()=>"scheme must not be an empty string.");const n=model_management_ModelStoreManagerRegistry.getInstance();Object(b.b)(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}function parseURL(e){if(-1===e.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+model_management_ModelStoreManagerRegistry.getSchemes().join(","));return{scheme:e.split("://")[0],path:e.split("://")[1]}}async function cloneModelInternal(e,t,n=!1){Object(b.b)(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=IORouterRegistry.getLoadHandlers(e);Object(b.b)(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),Object(b.b)(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const a=r[0],s=IORouterRegistry.getSaveHandlers(t);Object(b.b)(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),Object(b.b)(s.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const o=s[0],i=parseURL(e).scheme,u=parseURL(e).path,c=i===parseURL(e).scheme,l=await a.load();n&&c&&await model_management_ModelStoreManagerRegistry.getManager(i).removeModel(u);const p=await o.save(l);return n&&!c&&await model_management_ModelStoreManagerRegistry.getManager(i).removeModel(u),p.modelArtifactsInfo}async function listModels(){const e=model_management_ModelStoreManagerRegistry.getSchemes(),t={};for(const n of e){const e=await model_management_ModelStoreManagerRegistry.getManager(n).listModels();for(const r in e){t[n+"://"+r]=e[r]}}return t}async function removeModel(e){const t=parseURL(e);return model_management_ModelStoreManagerRegistry.getManager(t.scheme).removeModel(t.path)}async function copyModel(e,t){return cloneModelInternal(e,t,!1)}async function moveModel(e,t){return cloneModelInternal(e,t,!0)}class PlatformBrowser{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Browser's encoder only supports utf-8, but got "+t);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(Object(f.c)().get("IS_BROWSER")){Object(f.c)().setPlatform("browser",new PlatformBrowser);try{model_management_ModelStoreManagerRegistry.registerManager(local_storage_BrowserLocalStorage.URL_SCHEME,new local_storage_BrowserLocalStorageManager)}catch(e){}try{model_management_ModelStoreManagerRegistry.registerManager(indexed_db_BrowserIndexedDB.URL_SCHEME,new BrowserIndexedDBManager)}catch(e){}}n(269);var w=n(40),I=n(23),S=n(53),T=n(120),N=n(22);Object(h.b)();const _={buffer:w.a,cast:I.a,clone:S.a,print:T.a};Object(N.e)(_);function defer(e){return new Promise(e=>setTimeout(e)).then(e)}class browser_files_BrowserDownloads{constructor(e){if(!Object(f.c)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(browser_files_BrowserDownloads.URL_SCHEME)&&(e=e.slice(browser_files_BrowserDownloads.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}],r=Object(m.i)(e,n),a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=a,await defer(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await defer(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Object(m.h)(e)}}}}browser_files_BrowserDownloads.URL_SCHEME="downloads://";class browser_files_BrowserFiles{constructor(e){if(null==e||e.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+e);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error("modelTopology field is missing from file "+this.jsonFile.name));if(null==r.weightsManifest)return void t(new Error("weightManifest field is missing from file "+this.jsonFile.name));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=Object(m.g)(r,e=>this.loadWeights(e));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(a).then(e=>[t,Object(m.d)(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>Object(m.c)(e.name)),r={};for(const a of e)a.paths.forEach(e=>{const a=Object(m.c)(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function browserFiles(e){return new browser_files_BrowserFiles(e)}function monitorPromisesProgress(e,t,n,r){!function checkPromises(e){Object(b.b)(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function checkFraction(e,t){Object(b.b)(e>=0&&e<=1,()=>"Progress fraction must be in range [0, 1], but got startFraction "+e),Object(b.b)(t>=0&&t<=1,()=>"Progress fraction must be in range [0, 1], but got endFraction "+t),Object(b.b)(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction `+t)}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map(s=>(s.then(s=>{const o=n+ ++a/e.length*(r-n);return t(o),s}),s)))}IORouterRegistry.registerSaveRouter(e=>Object(f.c)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(browser_files_BrowserDownloads.URL_SCHEME)?function browserDownloads(e="model"){return new browser_files_BrowserDownloads(e)}(e.slice(browser_files_BrowserDownloads.URL_SCHEME.length)):null);var C=n(115);async function loadWeightsAsArrayBuffer(e,t){null==t&&(t={});const n=null==t.fetchFunc?Object(f.c)().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(r):await monitorPromisesProgress(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await monitorPromisesProgress(a,t.onProgress,.5,1)}async function loadWeights(e,t="",n,r){return weightsLoaderFactory(e=>loadWeightsAsArrayBuffer(e,{requestInit:r}))(e,t,n)}function weightsLoaderFactory(e){return async(t,n="",r)=>{const a=t.map(()=>!1),s={},o=null!=r?r.map(()=>!1):[],i=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,c=C.a[u]*b.O(e.shape),enqueueWeightsForFetchingFn=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:c})};null!=r?r.forEach((t,n)=>{t===e.name&&(enqueueWeightsForFetchingFn(),o[n]=!0)}):enqueueWeightsForFetchingFn(),i.push(e.name),n+=c})}),!o.every(e=>e)){const e=r.filter((e,t)=>!o[t]);throw new Error("Could not find weights in manifest with names: "+e.join(", ")+". \nManifest JSON has weights with names: "+i.join(", ")+".")}const u=a.reduce((e,t,n)=>(t&&e.push(n),e),[]),c=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;c.push(t)})});const l=await e(c),p={};let h=0;return u.forEach(e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=l[h+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(l[h+e]);o.set(t,i),i+=t.byteLength}s[e].forEach(e=>{const t=a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),n=Object(m.e)(t,[e.manifestEntry]);for(const e in n)p[e]=n[e]}),h+=n}),p}}class http_HTTPRequest{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(Object(b.b)("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=Object(f.c)().platform.fetch,Object(b.b)(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&Object(b.b)(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=[{paths:["./model.weights.bin"],weights:e.weightSpecs}],r=Object(m.i)(e,n);t.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const a=await this.fetch(this.path,t);if(a.ok)return{modelArtifactsInfo:Object(m.h)(e),responses:[a]};throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+a.status+".")}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code `+e.status+". Please verify this URL points to the model JSON of the model to load.");let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return Object(m.g)(t,e=>this.loadWeights(e))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function parseUrl(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=[];for(const t of e)s.push(...t.weights);const o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));const u=await loadWeightsAsArrayBuffer(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress});return[s,Object(m.d)(u)]}}function isHTTPScheme(e){return null!=e.match(http_HTTPRequest.URL_SCHEME_REGEX)}http_HTTPRequest.URL_SCHEME_REGEX=/^https?:\/\//;const httpRouter=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>isHTTPScheme(e)):isHTTPScheme(e),n)return http(e,t)}return null};function http(e,t){return new http_HTTPRequest(e,t)}function browserHTTPRequest(e,t){return http(e,t)}IORouterRegistry.registerSaveRouter(httpRouter),IORouterRegistry.registerLoadRouter(httpRouter);class PassthroughLoader{constructor(e){this.modelArtifacts=e}async load(){return this.modelArtifacts}}class PassthroughSaver{constructor(e){this.saveHandler=e}async save(e){return this.saveHandler(e)}}function fromMemory(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new PassthroughLoader(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new PassthroughLoader({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new PassthroughLoader({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function withSaveHandler(e){return new PassthroughSaver(e)}var j=n(2),E=n(25),A=n(114),$=n(3),R=n(90);const F=Object($.b)({confusionMatrix_:function confusionMatrix_(e,t,n){const r=Object(j.a)(e,"labels","confusionMatrix"),a=Object(j.a)(t,"predictions","confusionMatrix");b.b(null==n||n>0&&Number.isInteger(n),()=>"If provided, numClasses must be a positive integer, but got "+n),b.b(1===r.rank,()=>"Expected the rank of labels to be 1, but got "+r.rank),b.b(1===a.rank,()=>"Expected the rank of predictions to be 1, but got "+a.rank),b.b(r.shape[0]===a.shape[0],()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`),b.b(n>0&&Number.isInteger(n),()=>"numClasses is required to be a positive integer, but got "+n);const s=Object(A.a)(Object(I.a)(r,"int32"),n),o=Object(A.a)(Object(I.a)(a,"int32"),n),i=Object(R.a)(s),u=Object(E.a)(i,o);return Object(I.a)(u,"int32")}});var D=n(20),M=n(5),P=n(59),B=n(147);let L;function fromPixels_(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+e.constructor.name);i=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Object(P.c)(M.jb,h.a.backendName)){const n={pixels:e},r={numChannels:t};return h.a.runKernel(M.jb,n,r)}const[u,c]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let l,p;if(o)l=e.getContext("2d").getImageData(0,0,u,c).data;else if(r||n)l=e.data;else if(s||a||i){if(null==L)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");L=new OffscreenCanvas(1,1).getContext("2d")}else L=document.createElement("canvas").getContext("2d");L.canvas.width=u,L.canvas.height=c,L.drawImage(e,0,0,u,c),l=L.getImageData(0,0,u,c).data}if(4===t)p=new Int32Array(l);else{const e=u*c;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=l[4*n+e]}const f=[c,u,t];return Object(B.a)(p,f,"int32")}function canWrapPixelsToImageBitmap(e){return function isImageBitmapFullySupported(){return"undefined"!=typeof window&&"undefined"!=typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")}()&&!(e instanceof ImageBitmap)&&function isNonEmptyPixels(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function browser_isPixelData(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function fromPixelsAsync(e,t=3){let n=null;if(Object(f.c)().getBool("WRAP_TO_IMAGEBITMAP")&&canWrapPixelsToImageBitmap(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(e){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return fromPixels_(n,t)}async function toPixels(e,t){let n=Object(j.a)(e,"img","toPixels");if(!(e instanceof N.a)){const e=n;n=Object(I.a)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+s);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(a*r*4);for(let e=0;e<r*a;++e){const t=[0,0,0,255];for(let r=0;r<s;r++){const a=o[e*s+r];if("float32"===n.dtype){if(a<0||a>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${a}.`)}else if("int32"===n.dtype&&(a<0||a>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${a}.`);1===s?(t[0]=a*i,t[1]=a*i,t[2]=a*i):t[r]=a*i}const r=4*e;u[r+0]=Math.round(t[0]),u[r+1]=Math.round(t[1]),u[r+2]=Math.round(t[2]),u[r+3]=Math.round(t[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const z=Object($.b)({fromPixels_:fromPixels_});function prepareAndValidate(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===Object(b.O)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,u=a.slice();u.pop();let c=1;for(let e=s;e<n;++e)c*=i[e],u.push(i[e]);const l=[...Object(b.j)(e.shape).map(e=>e/c),1].slice(0,s);return[u,o,c,l]}var U=n(94);function assertParamsValid(e,t,n){const r=e.shape.length;b.b(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),b.b(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let a=0;a<r;++a)b.b(t[a]+n[a]<=e.shape[a],()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}function maskToAxes(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function computeOutShape(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function stridesWithElidedDims(e,t,n,r){const a=[...e];for(let e=a.length;e<r.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function unnormalizeAxis(e,t,n){return n<=e?n:n-(t-1)}function getElidedAxes(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function getNormalizedAxes(e,t,n,r,a,s,o,i,u){const c=e.length;let l=new Array(c),p=new Array(c),h=new Array(c);if(t.length&&n>0){const u=t[0],c=n+1;l=startIndicesWithElidedDims(o,u,c,r,e),p=stopIndicesWithElidedDims(i,u,c,a,e),h=stridesWithElidedDims(s,u,c,e)}else for(let t=0;t<c;t++)l[t]=startForAxis(o,r,s,e,t,u),p[t]=stopForAxis(i,a,s,e,t,u),h[t]=stridesForAxis(s,t,u);return{begin:l,end:p,strides:h}}function startIndicesWithElidedDims(e,t,n,r,a){const s=[...a],o=getElidedAxes(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=0;else{const o=unnormalizeAxis(t,n,a);let i=r[o];e&1<<o&&(i=0),s[a]=i}return s}function stopIndicesWithElidedDims(e,t,n,r,a){const s=[...a],o=getElidedAxes(n,t);for(let a=0;a<s.length;a++)if(o.indexOf(a)>-1)s[a]=Number.MAX_SAFE_INTEGER;else{const o=unnormalizeAxis(t,n,a);let i=r[o];e&1<<o&&(i=Number.MAX_SAFE_INTEGER),s[a]=i}for(let e=0;e<s.length;e++){const t=a[e];s[e]<0&&(s[e]+=t),s[e]=b.i(0,s[e],a[e])}return s}function stridesForAxis(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function startForAxis(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=b.i(0,o,u-1),o}function stopForAxis(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=i>0?b.i(0,o,u):b.i(-1,o,u-1),o}function isSliceContinous(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function computeFlatOffset(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function parseSliceParams(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach(e=>{b.b(-1!==e,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map((t,n)=>t>=0?t:(b.b(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,s]}function sliceInfo(e,t,n,r,a,s,o,i,u){let c;if(null==r?(c=new Array(t.length),c.fill(1)):c=r,null!=o&&0!=(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let l=!1;const p={dims:c.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:c.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<p.dims;e++)l&&0!=(1<<e&i)&&p.numAddAxisAfterEllipsis++,1<<e&o&&(l=!0);l||(p.ellipsisMask|=1<<p.dims,p.dims++);const h={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function buildDenseSpec(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(p,h);let f=!0,m=!0,b=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===h.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(h.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const a=[h.beginMask&1<<t,h.endMask&1<<t],s=[h.strides[t]>0?0:-1,h.strides[t]>0?r:r-1];if(n&&h.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");b=b&&1===h.strides[t];const o=!!(h.beginMask&1<<t&&h.endMask&1<<t);if(h.beginValid&&h.endValid){if(n){const e=h.begin[t]<0?r+h.begin[t]:h.begin[t];if(h.begin[t]=e,h.end[t]=h.begin[t]+1,e<0||e>=r)throw Error(`slice index ${h.begin[t]} of dimension ${t} out of bounds.`)}else h.begin[t]=canonical(h.begin[t],0,h.strides[t],r,a,s),h.end[t]=canonical(h.end[t],1,h.strides[t],r,a,s);const e=1===h.strides[t]&&0===h.begin[t]&&h.end[t]===r;f=f&&e,m=m&&(0===t&&1===h.strides[t]||e)}else f=f&&1===h.strides[t]&&o,m=m&&(0===t&&1===h.strides[t]||o);let i,u=!1;if(h.beginValid&&h.endValid?(i=h.end[t]-h.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=h.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=h.strides[t]<0?0:Math.trunc(i/h.strides[t])+(i%h.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<h.finalShapeGatherIndices.length;++e){const t=h.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter((e,t)=>-2!==h.finalShapeGatherIndices[t]),finalShape:y,isIdentity:f,sliceDim0:m,isSimpleSlice:b,begin:h.begin,end:h.end,strides:h.strides}}function canonical(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}class Serializable{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class SerializationMap{constructor(){this.classNameMap={}}static getMap(){return null==SerializationMap.instance&&(SerializationMap.instance=new SerializationMap),SerializationMap.instance}static register(e){SerializationMap.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function registerClass(e){Object(b.b)(null!=e.className,()=>"Class being registered does not have the static className property defined."),Object(b.b)("string"==typeof e.className,()=>"className is required to be a string, but got type "+typeof e.className),Object(b.b)(e.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),SerializationMap.register(e)}var V=n(15),W=n(108),G=n(8);const H="3.14.0";var q=n(17),K=n(12),X=n(21),Y=n(10),Q=n(54),Z=n(35),J=n(34),ee=n(30),te=n(16);class optimizer_Optimizer extends Serializable{minimize(e,t=!1,n){const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map(e=>({name:e.name,tensor:a[e.name]}));this.applyGradients(e)}else this.applyGradients(a);return Object(q.d)(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return Object(ee.f)(e,t)}dispose(){null!=this.iterations_&&Object(q.d)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:Object(te.a)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(optimizer_Optimizer,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class adadelta_optimizer_AdadeltaOptimizer extends optimizer_Optimizer{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=h.a.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=h.a.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:t+"/accum_grad",variable:Object(q.t)(()=>Object(J.a)(r).variable(!1))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:t+"/accum_var",variable:Object(q.t)(()=>Object(J.a)(r).variable(!1))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;Object(q.t)(()=>{const e=Object(K.a)(Object(Y.a)(s,this.rho),Object(Y.a)(Object(Z.a)(a),1-this.rho)),t=Object(Y.a)(Object(X.a)(Object(Q.a)(Object(K.a)(o,this.epsilon)),Object(Q.a)(Object(K.a)(s,this.epsilon))),a),n=Object(K.a)(Object(Y.a)(o,this.rho),Object(Y.a)(Object(Z.a)(t),1-this.rho));s.assign(e),o.assign(n);const i=Object(K.a)(Object(Y.a)(t,-this.learningRate),r);r.assign(i)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Object(q.d)(this.accumulatedGrads.map(e=>e.variable)),Object(q.d)(this.accumulatedUpdates.map(e=>e.variable)))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedUpdates=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}adadelta_optimizer_AdadeltaOptimizer.className="Adadelta",registerClass(adadelta_optimizer_AdadeltaOptimizer);var ne=n(74);class adagrad_optimizer_AdagradOptimizer extends optimizer_Optimizer{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=h.a.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:t+"/accumulator",variable:Object(q.t)(()=>Object(ne.a)(r.shape,this.initialAccumulatorValue).variable(e))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;Object(q.t)(()=>{const e=Object(K.a)(s,Object(Z.a)(a));s.assign(e);const t=Object(K.a)(Object(Y.a)(Object(X.a)(a,Object(Q.a)(Object(K.a)(e,h.a.backend.epsilon()))),-this.learningRate),r);r.assign(t)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Object(q.d)(this.accumulatedGrads.map(e=>e.variable))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}adagrad_optimizer_AdagradOptimizer.className="Adagrad",registerClass(adagrad_optimizer_AdagradOptimizer);var re=n(67),ae=n(14);class adam_optimizer_AdamOptimizer extends optimizer_Optimizer{constructor(e,t,n,r=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Object(q.t)(()=>{this.accBeta1=Object(te.a)(t).variable(),this.accBeta2=Object(te.a)(n).variable()}),null==r&&(this.epsilon=h.a.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Object(q.t)(()=>{const n=Object(ae.a)(1,this.accBeta1),r=Object(ae.a)(1,this.accBeta2);t.forEach((t,a)=>{const s=h.a.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:t+"/m",variable:Object(q.t)(()=>Object(J.a)(s).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:t+"/v",variable:Object(q.t)(()=>Object(J.a)(s).variable(!1))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedSecondMoment[a].variable,c=Object(K.a)(Object(Y.a)(i,this.beta1),Object(Y.a)(o,1-this.beta1)),l=Object(K.a)(Object(Y.a)(u,this.beta2),Object(Y.a)(Object(Z.a)(o),1-this.beta2)),p=Object(X.a)(c,n),f=Object(X.a)(l,r);i.assign(c),u.assign(l);const m=Object(K.a)(Object(Y.a)(Object(X.a)(p,Object(K.a)(Object(Q.a)(f),this.epsilon)),-this.learningRate),s);s.assign(m)}),this.accBeta1.assign(Object(Y.a)(this.accBeta1,this.beta1)),this.accBeta2.assign(Object(Y.a)(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Object(q.d)(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&Object(q.d)(this.accumulatedSecondMoment.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e),Object(q.t)(()=>{this.accBeta1.assign(Object(re.a)(this.beta1,this.iterations_+1)),this.accBeta2.assign(Object(re.a)(this.beta2,this.iterations_+1))});const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedSecondMoment=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}adam_optimizer_AdamOptimizer.className="Adam",registerClass(adam_optimizer_AdamOptimizer);var se=n(37),oe=n(122);class adamax_optimizer_AdamaxOptimizer extends optimizer_Optimizer{constructor(e,t,n,r=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Object(q.t)(()=>{this.iteration=Object(te.a)(0).variable(),this.accBeta1=Object(te.a)(t).variable()}),null==r&&(this.epsilon=h.a.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);Object(q.t)(()=>{const n=Object(ae.a)(1,this.accBeta1),r=Object(X.a)(-this.learningRate,Object(K.a)(Object(Y.a)(this.iteration,this.decay),1));t.forEach((t,a)=>{const s=h.a.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:t+"/m",variable:Object(J.a)(s).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:t+"/v",variable:Object(J.a)(s).variable(!1)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedWeightedInfNorm[a].variable,c=Object(K.a)(Object(Y.a)(i,this.beta1),Object(Y.a)(o,1-this.beta1)),l=Object(Y.a)(u,this.beta2),p=Object(se.a)(o),f=Object(oe.a)(l,p);i.assign(c),u.assign(f);const m=Object(K.a)(Object(Y.a)(Object(X.a)(r,n),Object(X.a)(c,Object(K.a)(f,this.epsilon))),s);s.assign(m)}),this.iteration.assign(Object(K.a)(this.iteration,1)),this.accBeta1.assign(Object(Y.a)(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Object(q.d)(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&Object(q.d)(this.accumulatedWeightedInfNorm.map(e=>e.variable))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}adamax_optimizer_AdamaxOptimizer.className="Adamax",registerClass(adamax_optimizer_AdamaxOptimizer);class sgd_optimizer_SGDOptimizer extends optimizer_Optimizer{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=h.a.registeredVariables[t];Object(q.t)(()=>{const e=Object(K.a)(Object(Y.a)(this.c,r),a);a.assign(e)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=Object(q.l)(Object(te.a)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}sgd_optimizer_SGDOptimizer.className="SGD",registerClass(sgd_optimizer_SGDOptimizer);class momentum_optimizer_MomentumOptimizer extends sgd_optimizer_SGDOptimizer{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=Object(te.a)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=h.a.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:t+"/momentum",variable:Object(q.t)(()=>Object(J.a)(r).variable(e))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&Object(q.t)(()=>{let e;const t=Object(K.a)(Object(Y.a)(this.m,a),s);e=this.useNesterov?Object(K.a)(Object(Y.a)(this.c,Object(K.a)(s,Object(Y.a)(t,this.m))),r):Object(K.a)(Object(Y.a)(this.c,t),r),a.assign(t),r.assign(e)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Object(q.d)(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map(e=>({originalName:e.name,variable:e.tensor.variable(!1)}))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}momentum_optimizer_MomentumOptimizer.className="Momentum",registerClass(momentum_optimizer_MomentumOptimizer);class rmsprop_optimizer_RMSPropOptimizer extends optimizer_Optimizer{constructor(e,t=.9,n=0,r=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=h.a.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(e=>e.name):Object.keys(e)).forEach((t,n)=>{const r=h.a.registeredVariables[t];null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:t+"/rms",variable:Object(q.t)(()=>Object(J.a)(r).variable(!1))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:t+"/momentum",variable:Object(q.t)(()=>Object(J.a)(r).variable(!1))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:t+"/mg",variable:Object(q.t)(()=>Object(J.a)(r).variable(!1))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Object(q.t)(()=>{const e=Object(K.a)(Object(Y.a)(s,this.decay),Object(Y.a)(Object(Z.a)(a),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,i=Object(K.a)(Object(Y.a)(t,this.decay),Object(Y.a)(a,1-this.decay)),u=Object(X.a)(Object(Y.a)(a,this.learningRate),Object(Q.a)(Object(ae.a)(e,Object(K.a)(Object(Z.a)(i),this.epsilon)))),c=Object(K.a)(Object(Y.a)(o,this.momentum),u);s.assign(e),t.assign(i),o.assign(c);const l=Object(ae.a)(r,c);r.assign(l)}else{const e=Object(K.a)(Object(Y.a)(s,this.decay),Object(Y.a)(Object(Z.a)(a),1-this.decay)),t=Object(K.a)(Object(Y.a)(o,this.momentum),Object(X.a)(Object(Y.a)(a,this.learningRate),Object(Q.a)(Object(K.a)(e,this.epsilon))));s.assign(e),o.assign(t);const n=Object(ae.a)(r,t);r.assign(n)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Object(q.d)(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Object(q.d)(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&Object(q.d)(this.accumulatedMoments.map(e=>e.variable))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map(e=>({name:e.originalName,tensor:e.variable})))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2;this.accumulatedMeanSquares=e.slice(0,t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.accumulatedMoments=e.slice(t,2*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map(e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}rmsprop_optimizer_RMSPropOptimizer.className="RMSProp",registerClass(rmsprop_optimizer_RMSPropOptimizer);class optimizer_constructors_OptimizerConstructors{static sgd(e){return new sgd_optimizer_SGDOptimizer(e)}static momentum(e,t,n=!1){return new momentum_optimizer_MomentumOptimizer(e,t,n)}static rmsprop(e,t=.9,n=0,r=null,a=!1){return new rmsprop_optimizer_RMSPropOptimizer(e,t,n,r,a)}static adam(e=.001,t=.9,n=.999,r=null){return new adam_optimizer_AdamOptimizer(e,t,n,r)}static adadelta(e=.001,t=.95,n=null){return new adadelta_optimizer_AdadeltaOptimizer(e,t,n)}static adamax(e=.002,t=.9,n=.999,r=null,a=0){return new adamax_optimizer_AdamaxOptimizer(e,t,n,r,a)}static adagrad(e,t=.1){return new adagrad_optimizer_AdagradOptimizer(e,t)}}var ie=n(73),ue=n(118),ce=n(32);const le={sgd:optimizer_constructors_OptimizerConstructors.sgd,momentum:optimizer_constructors_OptimizerConstructors.momentum,adadelta:optimizer_constructors_OptimizerConstructors.adadelta,adagrad:optimizer_constructors_OptimizerConstructors.adagrad,rmsprop:optimizer_constructors_OptimizerConstructors.rmsprop,adamax:optimizer_constructors_OptimizerConstructors.adamax,adam:optimizer_constructors_OptimizerConstructors.adam};var de=n(243),pe=n(62);function assertParamsConsistent(e,t){const n=e[0].length;e.forEach((e,t)=>{b.b(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),b.b(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,a)=>{for(let s=0;s<n;s++)b.b(s===t||e[s]===r[s],()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`)})}function concat_util_computeOutShape(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var he=n(24),fe=n(38);const me=30;function computeOptimalWindowSize(e){return e<=me?e:Object(b.G)(e,Math.floor(Math.sqrt(e)))}function getImageCenter(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function getReshaped(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function getPermuted(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function getReshapedPermuted(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function getSliceBeginCoords(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function getSliceSize(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}const be=1.7580993408473768,ge=1.0507009873554805,ye=.3275911,xe=.254829592,ve=-.284496736,Oe=1.421413741,ke=-1.453152027,we=1.061405429;var Ie=n(58);function mergeRealAndImagArrays(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function splitRealAndImagArrays(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function complexWithEvenIndex(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function complexWithOddIndex(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}function getComplexWithIndex(e,t){return{real:e[2*t],imag:e[2*t+1]}}function assignToTypedArray(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function exponents(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function exponent(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Se=/->/g;function decodeEinsumEquation(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Se,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split("->");Object(b.b)(-1===r.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some(e=>-1!==e.indexOf(t)))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<s[e].length;++t)u[e].push(i.indexOf(s[e][t]))}const c=i.length,l=[];for(let e=a.length;e<c;++e)l.push(e);return{allDims:i,summedDims:l,idDims:u}}function getEinsumPermutation(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:r}}function checkEinsumDimSizes(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:Object(b.b)(r[t[e][n]]===a[n],()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension `+a[n])}}function getEinsumComputePath(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=findTermsWithDim(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}}function isIdentityPermutation(e){return e.every((e,t)=>e===t)}function findTermsWithDim(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function prepareSplitSize(e,t,n=0){let r=[];if("number"==typeof t)Object(b.b)(e.shape[n]%t==0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce((e,t)=>(-1===t&&(e+=1),e),0);Object(b.b)(a<=1,()=>"There should be only one negative value in split array.");const s=t.indexOf(-1);if(-1!==s){const r=t.reduce((e,t)=>t>0?e+t:e);t[s]=e.shape[n]-r}Object(b.b)(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}function getSparseFillEmptyRowsIndicesDenseShapeMismatch(e){return"Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = "+e}function getSparseFillEmptyRowsNegativeIndexErrorMessage(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function getSparseReshapeNegativeOutputDimErrorMessage(e,t){return`size ${e} must be non-negative, not ${t}`}function getSparseReshapeEmptyTensorZeroOutputDimErrorMessage(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function getSparseReshapeInputOutputMultipleErrorMessage(e,t){return`Input to reshape is a SparseTensor with ${Object(b.O)(e)}\n  dense values, but the requested shape requires a multiple of ${Object(b.O)(t)}. inputShape=${e} outputShape= ${t}`}function getSparseReshapeInputOutputMismatchErrorMessage(e,t){return`Input to reshape is a tensor with ${Object(b.O)(e)} dense values, but the requested shape has ${Object(b.O)(t)}. inputShape=${e} outputShape=${t}`}function getSparseSegmentReductionNegativeSegmentIdsErrorMessage(){return"segment ids must be >= 0"}function getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage(){return"segment ids are not increasing"}function getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function getSparseSegmentReductionIndicesOutOfRangeErrorMessage(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function segOpComputeOptimalWindowSize(e,t){let n,r=!1;for(e<=me?(n=e,r=!0):n=Object(b.G)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=Object(b.G)(e,n+1);return n}function segment_util_computeOutShape(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function collectGatherOpShapeInfo(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,c=1,l=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),c*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),l*=e.shape[t];return{batchSize:u,sliceSize:l,outerSize:c,dimSize:o,outputShape:i}}function fromUint8ToStringArray(e){try{return e.map(e=>Object(G.decodeString)(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8, error: "+e)}}function fromStringArrayToUint8(e){return e.map(e=>Object(G.encodeString)(e))}var Te=n(119),Ne=n(61),_e=n(149),Ce=n(111)},function(e,t,n){"use strict";n.d(t,"d",(function(){return getParamValue})),n.d(t,"e",(function(){return getTensor})),n.d(t,"f",(function(){return getTensorsForCurrentContenxt})),n.d(t,"b",(function(){return getNodeNameAndIndex})),n.d(t,"g",(function(){return parseNodeName})),n.d(t,"c",(function(){return getPadding})),n.d(t,"a",(function(){return cloneTensor}));var r=n(0);function getParamValue(e,t,n,a,s){const o=t.inputParams[e];if(o&&void 0!==o.inputIndexStart){const e=o.inputIndexStart,i=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?e+1:o.inputIndexEnd;if("tensor"===o.type)return getTensor(t.inputNames[o.inputIndexStart],n,a,s);if("tensors"===o.type){return t.inputNames.slice(e,i).map(e=>getTensor(e,n,a,s))}const u=getTensor(t.inputNames.slice(e)[0],n,a,s),c=u.dataSync();return"number"===o.type?c[0]:r.util.toNestedArray(u.shape,c)}const i=t.attrParams[e];return i&&i.value}function getTensor(e,t,n,r){const[a,s]=parseNodeName(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find(e=>!!t[getNodeNameWithContextId(a,e)]);return void 0!==o?t[getNodeNameWithContextId(a,o)][s]:void 0}function getTensorsForCurrentContenxt(e,t,n){return t[getNodeNameWithContextId(e,n.currentContextId)]}function getNodeNameAndIndex(e,t){const[n,r,a]=parseNodeName(e);return[getNodeNameWithContextId(n,t&&t.currentContextId),r,a]}function getNodeNameWithContextId(e,t){return t?`${e}-${t}`:e}function parseNodeName(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function getPadding(e,t,n){let r=getParamValue("pad",e,t,n);if("explicit"===r){r=getParamValue("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function cloneTensor(e){return e.kept?e:Object(r.clone)(e)}},function(e,t,n){"use strict";n.d(t,"c",(function(){return inferShape})),n.d(t,"a",(function(){return convertToTensor})),n.d(t,"b",(function(){return convertToTensorArray}));var r=n(4),a=n(13),s=n(22),o=n(6),i=n(8);function inferShape(e,t){let n=e;if(Object(o.A)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||Object(o.A)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&Object(a.c)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function deepAssertShapeConsistency(e,t,n){if(n=n||[],!Array.isArray(e)&&!Object(o.A)(e))return void Object(o.b)(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);Object(o.b)(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),Object(o.b)(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const r=t.slice(1);for(let t=0;t<e.length;++t)deepAssertShapeConsistency(e[t],r,n.concat(t))}(e,r,[]),r}function assertDtype(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function convertToTensor(e,t,n,a="numeric"){if(e instanceof s.a)return assertDtype(a,e.dtype,t,n),e;let u=Object(o.r)(e);if("string"!==u&&["bool","int32","float32"].indexOf(a)>=0&&(u=a),assertDtype(a,u,t,n),null==e||!Object(o.A)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const c=inferShape(e,u);Object(o.A)(e)||Array.isArray(e)||(e=[e]);const l="string"!==u?Object(i.toTypedArray)(e,u):Object(o.m)(e,[],!0);return r.a.makeTensor(l,c,u)}function convertToTensorArray(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,a)=>convertToTensor(e,`${t}[${a}]`,n,r))}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return op}));var r=n(4),a=n(6);const s="__op";function op(e){const t=Object.keys(e);if(1!==t.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+t.length+" keys.");let n=t[0];const o=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=s;const f2=(...e)=>{r.a.startScope(n);try{const t=o(...e);return Object(a.x)(t)&&console.error("Cannot return a Promise inside of tidy."),r.a.endScope(t),t}catch(e){throw r.a.endScope(null),e}};return Object.defineProperty(f2,"name",{value:n,configurable:!0}),f2}},function(e,t,n){"use strict";n.d(t,"b",(function(){return getOrMakeEngine})),n.d(t,"a",(function(){return f}));var r=n(111),a=n(13),s=n(91),o=n(5),i=n(59),u=n(58),c=n(8),l=n(6);class profiler_Profiler{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new profiler_Logger)}profileKernel(e,t,n){let r;const holdResultWrapperFn=()=>{r=n()};let s;const o=c.now();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(holdResultWrapperFn);else{holdResultWrapperFn();for(const e of r)e.dataSync();s=Promise.resolve({kernelMs:c.now()-o})}if(Object(a.c)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then(t=>{checkComputationForErrors(t,n.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then(e=>e.kernelMs),extraInfo:s.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach(e=>{Promise.all([e.data(),r,s]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])})})}}function checkComputationForErrors(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class profiler_Logger{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?l.L(r+"ms",9):r.error,i=l.L(e,25),u=t.rank,c=t.size,p=l.L(t.shape.toString(),14);let h="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;h+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${p}\t%c${c}\t%c${h}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var p=n(22),h=n(15);function isRegisteredKernelInvocation(e){return null!=e.kernelName}class EngineState{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class engine_Engine{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new EngineState}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(u.b(e+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new profiler_Profiler(this.backendInstance),!0}setupRegisteredKernels(){Object(i.d)(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Object(i.d)(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.b||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0)).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,u.b(`Initialization of backend ${e} failed`),u.b(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return u.b(`Initialization of backend ${e} failed`),u.b(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(e+" backend not found in registry");this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return engine_Engine.nextTensorId++}nextVariableId(){return engine_Engine.nextVariableId++}clone(e){const t=f.runKernel(o.sb,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e},n={dtype:"float32"};return f.runKernel(o.x,t,n)}}),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=Object(i.c)(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach(e=>{a+="complex64"===e.dtype?3:1});const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const c=isRegisteredKernelInvocation(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(isRegisteredKernelInvocation(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const c=Object(i.c)(t,this.backendName);l.b(null!=c,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),o=()=>{const e=this.backend.numDataIds();u=c.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const i=o.map(e=>{if(null!=e.rank)return e;const{dataId:t,shape:n,dtype:r}=e;return this.makeTensorFromDataId(t,n,r)});if(r){const e=this.getTensorsForGradient(t,a,i);n=this.saveTensorsForBackwardMode(e)}return i}}else{const{forwardFunc:t}=e,saveFunc=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};o=()=>{const e=this.backend.numDataIds();u=this.tidy(()=>t(this.backend,saveFunc));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,e,n),n}}const{inputs:p,attrs:h}=e,f=isRegisteredKernelInvocation(e)?null:e.backwardsFunc;let m;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(m=this.profiler.profileKernel(c,p,()=>o()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(m),t=m.outputs):t=o()}),r&&this.addTapeNode(c,p,t,f,n,h),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(p).map(e=>null!=p[e]?p[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:m.timeMs,extraInfo:m.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){return e.map(e=>this.keep(this.clone(e)))}getTensorsForGradient(e,t,n){const r=Object(i.b)(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(l.b(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),s=Object.keys(t).map(e=>t[e])):s=e.map(e=>t[e]);const o=n.filter((e,t)=>a[t]);return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&l.z(e[0])&&(a=e.map(e=>c.encodeString(e)));const s=r.write(a,t,n),o=new p.a(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=Object(l.f)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){n=n||"float32";const a=new p.a(t,n,e,this.nextTensorId());return this.trackTensor(a,r),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new p.c(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*l.g(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof p.c||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*l.g(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},u=Object(i.b)(e);null!=u&&(r=u.gradFunc),null!=r&&(o.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=l.F(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Object(h.getTensorsInContainer)(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(l.b(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));l.b(a instanceof p.a,()=>"The result y returned by f() must be a tensor.");const s=function getFilteredNodesXToY(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach(e=>r[e.id]=!0),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[a.id]=null==n?function ones(e){const t=Object(l.D)(Object(l.O)(e),"float32");return f.makeTensor(t,e,"float32")}(a.shape):n,function backpropagateGradients(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach(t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n(()=>i[t]());if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!l.a(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,e=>this.tidy(e),engine_add);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:r}})}customGrad(e){return l.b(l.u(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;l.b(t.every(e=>e instanceof p.a),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};t.forEach((e,t)=>{r[t]=e});return this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),l.b(n.value instanceof p.a,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),l.b(l.u(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];l.b(s.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),l.b(s.every(e=>e instanceof p.a),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return s.forEach((e,t)=>{o[t]=()=>e}),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Object(c.now)(),n=await this.backend.time(e);return n.wallMs=Object(c.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new EngineState;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function getOrMakeEngine(){const e=Object(s.b)();if(null==e._tfengine){const t=new a.b(e);e._tfengine=new engine_Engine(t)}return Object(a.d)(e._tfengine.ENV),Object(p.f)(()=>e._tfengine),e._tfengine}engine_Engine.nextTensorId=0,engine_Engine.nextVariableId=0;const f=getOrMakeEngine();function engine_add(e,t){const n={a:e,b:t};return f.runKernel(o.d,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return a})),n.d(t,"c",(function(){return s})),n.d(t,"d",(function(){return o})),n.d(t,"e",(function(){return i})),n.d(t,"f",(function(){return u})),n.d(t,"g",(function(){return c})),n.d(t,"h",(function(){return l})),n.d(t,"i",(function(){return p})),n.d(t,"j",(function(){return h})),n.d(t,"k",(function(){return f})),n.d(t,"l",(function(){return m})),n.d(t,"n",(function(){return b})),n.d(t,"m",(function(){return g})),n.d(t,"o",(function(){return y})),n.d(t,"r",(function(){return x})),n.d(t,"p",(function(){return v})),n.d(t,"q",(function(){return O})),n.d(t,"s",(function(){return k})),n.d(t,"t",(function(){return w})),n.d(t,"u",(function(){return I})),n.d(t,"w",(function(){return S})),n.d(t,"v",(function(){return T})),n.d(t,"x",(function(){return N})),n.d(t,"y",(function(){return _})),n.d(t,"z",(function(){return C})),n.d(t,"A",(function(){return j})),n.d(t,"B",(function(){return E})),n.d(t,"C",(function(){return A})),n.d(t,"D",(function(){return $})),n.d(t,"E",(function(){return R})),n.d(t,"F",(function(){return F})),n.d(t,"G",(function(){return D})),n.d(t,"H",(function(){return M})),n.d(t,"I",(function(){return P})),n.d(t,"J",(function(){return B})),n.d(t,"K",(function(){return L})),n.d(t,"M",(function(){return z})),n.d(t,"L",(function(){return U})),n.d(t,"N",(function(){return V})),n.d(t,"O",(function(){return W})),n.d(t,"P",(function(){return G})),n.d(t,"Q",(function(){return H})),n.d(t,"R",(function(){return q})),n.d(t,"S",(function(){return K})),n.d(t,"T",(function(){return X})),n.d(t,"V",(function(){return Y})),n.d(t,"U",(function(){return Q})),n.d(t,"mc",(function(){return Z})),n.d(t,"W",(function(){return J})),n.d(t,"X",(function(){return ee})),n.d(t,"Y",(function(){return te})),n.d(t,"ab",(function(){return ne})),n.d(t,"Z",(function(){return re})),n.d(t,"bb",(function(){return ae})),n.d(t,"cb",(function(){return se})),n.d(t,"db",(function(){return oe})),n.d(t,"eb",(function(){return ie})),n.d(t,"fb",(function(){return ue})),n.d(t,"gb",(function(){return ce})),n.d(t,"hb",(function(){return le})),n.d(t,"ib",(function(){return de})),n.d(t,"kb",(function(){return pe})),n.d(t,"ob",(function(){return he})),n.d(t,"nb",(function(){return fe})),n.d(t,"pb",(function(){return me})),n.d(t,"qb",(function(){return be})),n.d(t,"sb",(function(){return ge})),n.d(t,"rb",(function(){return ye})),n.d(t,"tb",(function(){return xe})),n.d(t,"ub",(function(){return ve})),n.d(t,"vb",(function(){return Oe})),n.d(t,"wb",(function(){return ke})),n.d(t,"zb",(function(){return we})),n.d(t,"Ab",(function(){return Ie})),n.d(t,"Bb",(function(){return Se})),n.d(t,"Cb",(function(){return Te})),n.d(t,"Db",(function(){return Ne})),n.d(t,"Eb",(function(){return _e})),n.d(t,"Gb",(function(){return Ce})),n.d(t,"Hb",(function(){return je})),n.d(t,"Ib",(function(){return Ee})),n.d(t,"Fb",(function(){return Ae})),n.d(t,"xb",(function(){return $e})),n.d(t,"yb",(function(){return Re})),n.d(t,"Jb",(function(){return Fe})),n.d(t,"Pb",(function(){return De})),n.d(t,"Kb",(function(){return Me})),n.d(t,"Nb",(function(){return Pe})),n.d(t,"Lb",(function(){return Be})),n.d(t,"Mb",(function(){return Le})),n.d(t,"Ob",(function(){return ze})),n.d(t,"Qb",(function(){return Ue})),n.d(t,"Rb",(function(){return Ve})),n.d(t,"Sb",(function(){return We})),n.d(t,"Tb",(function(){return Ge})),n.d(t,"Ub",(function(){return He})),n.d(t,"Vb",(function(){return qe})),n.d(t,"Wb",(function(){return Ke})),n.d(t,"Xb",(function(){return Xe})),n.d(t,"bc",(function(){return Ye})),n.d(t,"Yb",(function(){return Qe})),n.d(t,"Zb",(function(){return Ze})),n.d(t,"ac",(function(){return Je})),n.d(t,"dc",(function(){return et})),n.d(t,"cc",(function(){return tt})),n.d(t,"ec",(function(){return nt})),n.d(t,"fc",(function(){return rt})),n.d(t,"gc",(function(){return at})),n.d(t,"hc",(function(){return st})),n.d(t,"ic",(function(){return ot})),n.d(t,"jc",(function(){return it})),n.d(t,"kc",(function(){return ut})),n.d(t,"lc",(function(){return ct})),n.d(t,"nc",(function(){return lt})),n.d(t,"oc",(function(){return dt})),n.d(t,"qc",(function(){return pt})),n.d(t,"tc",(function(){return ht})),n.d(t,"uc",(function(){return ft})),n.d(t,"rc",(function(){return mt})),n.d(t,"sc",(function(){return bt})),n.d(t,"pc",(function(){return gt})),n.d(t,"vc",(function(){return yt})),n.d(t,"xc",(function(){return xt})),n.d(t,"yc",(function(){return vt})),n.d(t,"zc",(function(){return Ot})),n.d(t,"Ac",(function(){return kt})),n.d(t,"Bc",(function(){return wt})),n.d(t,"Gc",(function(){return It})),n.d(t,"Ec",(function(){return St})),n.d(t,"Fc",(function(){return Tt})),n.d(t,"Dc",(function(){return Nt})),n.d(t,"Cc",(function(){return _t})),n.d(t,"Ic",(function(){return Ct})),n.d(t,"Qc",(function(){return jt})),n.d(t,"Zc",(function(){return Et})),n.d(t,"Jc",(function(){return At})),n.d(t,"Pc",(function(){return $t})),n.d(t,"Hc",(function(){return Rt})),n.d(t,"Kc",(function(){return Ft})),n.d(t,"Lc",(function(){return Dt})),n.d(t,"Mc",(function(){return Mt})),n.d(t,"Nc",(function(){return Pt})),n.d(t,"Oc",(function(){return Bt})),n.d(t,"Sc",(function(){return Lt})),n.d(t,"Rc",(function(){return zt})),n.d(t,"Uc",(function(){return Ut})),n.d(t,"Vc",(function(){return Vt})),n.d(t,"Wc",(function(){return Wt})),n.d(t,"Xc",(function(){return Gt})),n.d(t,"Yc",(function(){return Ht})),n.d(t,"ad",(function(){return qt})),n.d(t,"bd",(function(){return Kt})),n.d(t,"cd",(function(){return Xt})),n.d(t,"dd",(function(){return Yt})),n.d(t,"ed",(function(){return Qt})),n.d(t,"fd",(function(){return Zt})),n.d(t,"gd",(function(){return Jt})),n.d(t,"hd",(function(){return en})),n.d(t,"id",(function(){return tn})),n.d(t,"jd",(function(){return nn})),n.d(t,"Tc",(function(){return rn})),n.d(t,"jb",(function(){return an})),n.d(t,"wc",(function(){return sn})),n.d(t,"kd",(function(){return on})),n.d(t,"lb",(function(){return un})),n.d(t,"mb",(function(){return cn}));const r="Abs",a="Acos",s="Acosh",o="Add",i="AddN",u="All",c="Any",l="ArgMax",p="ArgMin",h="Asin",f="Asinh",m="Atan",b="Atanh",g="Atan2",y="AvgPool",x="AvgPoolGrad",v="AvgPool3D",O="AvgPool3DGrad",k="BatchMatMul",w="BatchToSpaceND",I="Bincount",S="BroadcastTo",T="BroadcastArgs",N="Cast",_="Ceil",C="ClipByValue",j="Complex",E="ComplexAbs",A="Concat",$="Conv2D",R="Conv2DBackpropFilter",F="Conv2DBackpropInput",D="Conv3D",M="Conv3DBackpropFilterV2",P="Conv3DBackpropInputV2",B="Cos",L="Cosh",z="Cumsum",U="CropAndResize",V="DenseBincount",W="DepthToSpace",G="DepthwiseConv2dNative",H="DepthwiseConv2dNativeBackpropFilter",q="DepthwiseConv2dNativeBackpropInput",K="Diag",X="Dilation2D",Y="Dilation2DBackpropInput",Q="Dilation2DBackpropFilter",Z="RealDiv",J="Einsum",ee="Elu",te="EluGrad",ne="Erf",re="Equal",ae="Exp",se="ExpandDims",oe="Expm1",ie="FFT",ue="Fill",ce="FlipLeftRight",le="Floor",de="FloorDiv",pe="FusedBatchNorm",he="GatherV2",fe="GatherNd",me="Greater",be="GreaterEqual",ge="Identity",ye="IFFT",xe="Imag",ve="IsFinite",Oe="IsInf",ke="IsNan",we="LeakyRelu",Ie="Less",Se="LessEqual",Te="LinSpace",Ne="Log",_e="Log1p",Ce="LogicalAnd",je="LogicalNot",Ee="LogicalOr",Ae="LogSoftmax",$e="LRN",Re="LRNGrad",Fe="Max",De="Maximum",Me="MaxPool",Pe="MaxPoolGrad",Be="MaxPool3D",Le="MaxPool3DGrad",ze="MaxPoolWithArgmax",Ue="Mean",Ve="Min",We="Minimum",Ge="MirrorPad",He="Mod",qe="Multinomial",Ke="Multiply",Xe="Neg",Ye="NotEqual",Qe="NonMaxSuppressionV3",Ze="NonMaxSuppressionV4",Je="NonMaxSuppressionV5",et="OnesLike",tt="OneHot",nt="Pack",rt="PadV2",at="Pool",st="Pow",ot="Prelu",it="Prod",ut="Range",ct="Real",lt="Reciprocal",dt="Relu",pt="Reshape",ht="ResizeNearestNeighbor",ft="ResizeNearestNeighborGrad",mt="ResizeBilinear",bt="ResizeBilinearGrad",gt="Relu6",yt="Reverse",xt="Round",vt="Rsqrt",Ot="ScatterNd",kt="Select",wt="Selu",It="Slice",St="Sin",Tt="Sinh",Nt="Sign",_t="Sigmoid",Ct="Softplus",jt="Sqrt",Et="Sum",At="SpaceToBatchND",$t="SplitV",Rt="Softmax",Ft="SparseFillEmptyRows",Dt="SparseReshape",Mt="SparseSegmentMean",Pt="SparseSegmentSum",Bt="SparseToDense",Lt="SquaredDifference",zt="Square",Ut="StridedSlice",Vt="StringNGrams",Wt="StringSplit",Gt="StringToHashBucketFast",Ht="Sub",qt="Tan",Kt="Tanh",Xt="Tile",Yt="TopK",Qt="Transform",Zt="Transpose",Jt="Unique",en="Unpack",tn="UnsortedSegmentSum",nn="ZerosLike",rn="Step",an="FromPixels",sn="RotateWithOffset",on="_FusedMatMul",un="FusedConv2D",cn="FusedDepthwiseConv2D"},function(e,t,n){"use strict";function shuffle(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,swap(e,t,n)}function shuffleCombo(e,t){if(e.length!==t.length)throw new Error("Array sizes must match to be shuffled together First array length was "+e.length+"Second array length was "+t.length);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,swap(e,n,r),swap(t,n,r)}function clamp(e,t,n){return Math.max(e,Math.min(t,n))}function nearestLargerEven(e){return e%2==0?e:e+1}function swap(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function sum(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function randUniform(e,t){const n=Math.random();return t*n+(1-n)*e}function distSquared(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function assert(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function assertShapesMatch(e,t,n=""){assert(arraysEqual(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function assertNonNull(e){assert(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function flatten(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||isTypedArray(e)&&!n)for(let r=0;r<e.length;++r)flatten(e[r],t,n);else t.push(e);return t}function sizeFromShape(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function isScalarShape(e){return 0===e.length}function arraysEqual(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function isInt(e){return e%1==0}function tanh(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function sizeToSquarishShape(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function createShuffledIndices(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return shuffle(t),t}function rightPad(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function repeatedTry(e,t=(e=>0),n){return new Promise((r,a)=>{let s=0;const tryFn=()=>{if(e())return void r();s++;const o=t(s);null!=n&&s>=n?a():setTimeout(tryFn,o)};tryFn()})}function inferFromImplicitShape(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function parseAxisParam(e,t){const n=t.length;return assert((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis `+e),assert(e.every(e=>isInt(e)),()=>"All values in axis param must be integers but got axis "+e),e.map(e=>e<0?n+e:e)}function squeezeShape(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:parseAxisParam(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}function getTypedArrayFromDType(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error("Unknown data type "+e);n=new Uint8Array(t)}return n}function getArrayFromDType(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error("Unknown data type "+e);n=new Array(t)}return n}function checkConversionForErrors(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function isValidDtype(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function hasEncodingLoss(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function isTypedArray(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function bytesPerElement(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error("Unknown dtype "+e)}function bytesFromStringArray(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}function isString(e){return"string"==typeof e||e instanceof String}function isBoolean(e){return"boolean"==typeof e}function isNumber(e){return"number"==typeof e}function inferDtype(e){return Array.isArray(e)?inferDtype(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":isNumber(e)?"float32":isString(e)?"string":isBoolean(e)?"bool":"float32"}function isFunction(e){return!!(e&&e.constructor&&e.call&&e.apply)}function nearestDivisor(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function computeStrides(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function toNestedArray(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return function createNestedArray(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce((e,t)=>e*t)*(r?2:1);for(let t=0;t<s;t++)a[t]=createNestedArray(e+t*i,o,n,r)}return a}(0,e,t,n)}function makeOnesTypedArray(e,t){const n=makeZerosTypedArray(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function makeZerosTypedArray(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error("Unknown data type "+t)}function makeZerosNestedTypedArray(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return toNestedArray(e,new Float32Array(n));if("int32"===t)return toNestedArray(e,new Int32Array(n));if("bool"===t)return toNestedArray(e,new Uint8Array(n));throw new Error("Unknown data type "+t)}function assertNonNegativeIntegerDimensions(e){e.forEach(t=>{assert(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function locToIndex(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function indexToLoc(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function isPromise(e){return e&&e.then&&"function"==typeof e.then}n.d(t,"M",(function(){return shuffle})),n.d(t,"N",(function(){return shuffleCombo})),n.d(t,"i",(function(){return clamp})),n.d(t,"H",(function(){return nearestLargerEven})),n.d(t,"S",(function(){return swap})),n.d(t,"R",(function(){return sum})),n.d(t,"J",(function(){return randUniform})),n.d(t,"l",(function(){return distSquared})),n.d(t,"b",(function(){return assert})),n.d(t,"e",(function(){return assertShapesMatch})),n.d(t,"d",(function(){return assertNonNull})),n.d(t,"m",(function(){return flatten})),n.d(t,"O",(function(){return sizeFromShape})),n.d(t,"y",(function(){return isScalarShape})),n.d(t,"a",(function(){return arraysEqual})),n.d(t,"v",(function(){return isInt})),n.d(t,"T",(function(){return tanh})),n.d(t,"P",(function(){return sizeToSquarishShape})),n.d(t,"k",(function(){return createShuffledIndices})),n.d(t,"L",(function(){return rightPad})),n.d(t,"K",(function(){return repeatedTry})),n.d(t,"s",(function(){return inferFromImplicitShape})),n.d(t,"I",(function(){return parseAxisParam})),n.d(t,"Q",(function(){return squeezeShape})),n.d(t,"o",(function(){return getTypedArrayFromDType})),n.d(t,"n",(function(){return getArrayFromDType})),n.d(t,"h",(function(){return checkConversionForErrors})),n.d(t,"B",(function(){return isValidDtype})),n.d(t,"p",(function(){return hasEncodingLoss})),n.d(t,"A",(function(){return isTypedArray})),n.d(t,"g",(function(){return bytesPerElement})),n.d(t,"f",(function(){return bytesFromStringArray})),n.d(t,"z",(function(){return isString})),n.d(t,"t",(function(){return isBoolean})),n.d(t,"w",(function(){return isNumber})),n.d(t,"r",(function(){return inferDtype})),n.d(t,"u",(function(){return isFunction})),n.d(t,"G",(function(){return nearestDivisor})),n.d(t,"j",(function(){return computeStrides})),n.d(t,"U",(function(){return toNestedArray})),n.d(t,"D",(function(){return makeOnesTypedArray})),n.d(t,"F",(function(){return makeZerosTypedArray})),n.d(t,"E",(function(){return makeZerosNestedTypedArray})),n.d(t,"c",(function(){return assertNonNegativeIntegerDimensions})),n.d(t,"C",(function(){return locToIndex})),n.d(t,"q",(function(){return indexToLoc})),n.d(t,"x",(function(){return isPromise}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({reshape_:function reshape_(e,t){const n={x:Object(s.a)(e,"x","reshape","string_or_numeric")},o={shape:t};return r.a.runKernel(a.qc,n,o)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"shuffle",(function(){return a.M})),n.d(t,"shuffleCombo",(function(){return a.N})),n.d(t,"clamp",(function(){return a.i})),n.d(t,"nearestLargerEven",(function(){return a.H})),n.d(t,"swap",(function(){return a.S})),n.d(t,"sum",(function(){return a.R})),n.d(t,"randUniform",(function(){return a.J})),n.d(t,"distSquared",(function(){return a.l})),n.d(t,"assert",(function(){return a.b})),n.d(t,"assertShapesMatch",(function(){return a.e})),n.d(t,"assertNonNull",(function(){return a.d})),n.d(t,"flatten",(function(){return a.m})),n.d(t,"sizeFromShape",(function(){return a.O})),n.d(t,"isScalarShape",(function(){return a.y})),n.d(t,"arraysEqual",(function(){return a.a})),n.d(t,"isInt",(function(){return a.v})),n.d(t,"tanh",(function(){return a.T})),n.d(t,"sizeToSquarishShape",(function(){return a.P})),n.d(t,"createShuffledIndices",(function(){return a.k})),n.d(t,"rightPad",(function(){return a.L})),n.d(t,"repeatedTry",(function(){return a.K})),n.d(t,"inferFromImplicitShape",(function(){return a.s})),n.d(t,"parseAxisParam",(function(){return a.I})),n.d(t,"squeezeShape",(function(){return a.Q})),n.d(t,"getTypedArrayFromDType",(function(){return a.o})),n.d(t,"getArrayFromDType",(function(){return a.n})),n.d(t,"checkConversionForErrors",(function(){return a.h})),n.d(t,"isValidDtype",(function(){return a.B})),n.d(t,"hasEncodingLoss",(function(){return a.p})),n.d(t,"isTypedArray",(function(){return a.A})),n.d(t,"bytesPerElement",(function(){return a.g})),n.d(t,"bytesFromStringArray",(function(){return a.f})),n.d(t,"isString",(function(){return a.z})),n.d(t,"isBoolean",(function(){return a.t})),n.d(t,"isNumber",(function(){return a.w})),n.d(t,"inferDtype",(function(){return a.r})),n.d(t,"isFunction",(function(){return a.u})),n.d(t,"nearestDivisor",(function(){return a.G})),n.d(t,"computeStrides",(function(){return a.j})),n.d(t,"toNestedArray",(function(){return a.U})),n.d(t,"makeOnesTypedArray",(function(){return a.D})),n.d(t,"makeZerosTypedArray",(function(){return a.F})),n.d(t,"makeZerosNestedTypedArray",(function(){return a.E})),n.d(t,"assertNonNegativeIntegerDimensions",(function(){return a.c})),n.d(t,"locToIndex",(function(){return a.C})),n.d(t,"indexToLoc",(function(){return a.q})),n.d(t,"isPromise",(function(){return a.x})),n.d(t,"hexToLong",(function(){return hexToLong})),n.d(t,"fingerPrint64",(function(){return fingerPrint64})),n.d(t,"createScalarValue",(function(){return createScalarValue})),n.d(t,"toTypedArray",(function(){return toTypedArray})),n.d(t,"now",(function(){return now})),n.d(t,"fetch",(function(){return util_fetch})),n.d(t,"encodeString",(function(){return encodeString})),n.d(t,"decodeString",(function(){return decodeString}));var r=n(13),a=n(6),s=n(185);const o=n.n(s).a||s;function hexToLong(e){return o.fromString(e,!0,16)}const i=hexToLong("c3a5c85c97cb3127"),u=hexToLong("b492b66fbe98f273"),c=hexToLong("9ae16a3b2f90404f");function shiftMix(e){return e.xor(e.shru(47))}function fetch(e,t,n){const r=e.slice(t,t+n);return o.fromBytes(Array.from(r),!0,!0)}function fetch64(e,t){return fetch(e,t,8)}function fetch32(e,t){return fetch(e,t,4)}function rotate64(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function hashLen16(e,t,n=hexToLong("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function weakHashLen32WithSeedsStr(e,t,n,r){return function weakHashLen32WithSeeds(e,t,n,r,a,s){a=a.add(e),s=rotate64(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(rotate64(a,44)),[a.add(r),s.add(o)]}(fetch64(e,t),fetch64(e,t+8),fetch64(e,t+16),fetch64(e,t+24),n,r)}function fingerPrint64(e,t=e.length){const n=o.fromNumber(81,!0);if(t<=32)return t<=16?function hashLen0to16(e,t=e.length){if(t>=8){const n=c.add(2*t),r=fetch64(e,0).add(c),a=fetch64(e,t-8);return hashLen16(rotate64(a,37).mul(n).add(r),rotate64(r,25).add(a).mul(n),n)}if(t>=4){const n=c.add(2*t);return hashLen16(fetch32(e,0).shl(3).add(t),fetch32(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return shiftMix(c.mul(n).xor(i.mul(r))).mul(c)}return c}(e,t):function hashLen17to32(e,t=e.length){const n=c.add(2*t),r=fetch64(e,0).mul(u),a=fetch64(e,8),s=fetch64(e,t-8).mul(n),o=fetch64(e,t-16).mul(c);return hashLen16(rotate64(r.add(a),43).add(rotate64(s,30)).add(o),r.add(rotate64(a.add(c),18)).add(s),n)}(e,t);if(t<=64)return function hashLen33to64(e,t=e.length){const n=c.add(2*t),r=fetch64(e,0).mul(c),a=fetch64(e,8),s=fetch64(e,t-8).mul(n),o=fetch64(e,t-16).mul(c),i=rotate64(r.add(a),43).add(rotate64(s,30)).add(o),u=hashLen16(i,r.add(rotate64(a.add(c),18)).add(s),n),l=fetch64(e,16).mul(n),p=fetch64(e,24),h=i.add(fetch64(e,t-32)).mul(n),f=u.add(fetch64(e,t-24)).mul(n);return hashLen16(rotate64(l.add(p),43).add(rotate64(h,30)).add(f),l.add(rotate64(p.add(r),18)).add(h),n)}(e,t);let r=n,a=n.mul(u).add(113),s=shiftMix(a.mul(c).add(113)).mul(c),l=[o.UZERO,o.UZERO],p=[o.UZERO,o.UZERO];r=r.mul(c).add(fetch64(e,0));let h=0;const f=64*(t-1>>6),m=f+(t-1&63)-63;do{r=rotate64(r.add(a).add(l[0]).add(fetch64(e,h+8)),37).mul(u),a=rotate64(a.add(l[1]).add(fetch64(e,h+48)),42).mul(u),r=r.xor(p[1]),a=a.add(l[0]).add(fetch64(e,h+40)),s=rotate64(s.add(p[0]),33).mul(u),l=weakHashLen32WithSeedsStr(e,h,l[1].mul(u),r.add(p[0])),p=weakHashLen32WithSeedsStr(e,h+32,s.add(p[1]),a.add(fetch64(e,h+16))),[s,r]=[r,s],h+=64}while(h!==f);const b=u.add(s.and(255).shl(1));return h=m,p[0]=p[0].add(t-1&63),l[0]=l[0].add(p[0]),p[0]=p[0].add(l[0]),r=rotate64(r.add(a).add(l[0]).add(fetch64(e,h+8)),37).mul(b),a=rotate64(a.add(l[1]).add(fetch64(e,h+48)),42).mul(b),r=r.xor(p[1].mul(9)),a=a.add(l[0].mul(9).add(fetch64(e,h+40))),s=rotate64(s.add(p[0]),33).mul(b),l=weakHashLen32WithSeedsStr(e,h,l[1].mul(b),r.add(p[0])),p=weakHashLen32WithSeedsStr(e,h+32,s.add(p[1]),a.add(fetch64(e,h+16))),[s,r]=[r,s],hashLen16(hashLen16(l[0],p[0],b).add(shiftMix(a).mul(i)).add(s),hashLen16(l[1],p[1],b).add(r),b)}function createScalarValue(e,t){return"string"===t?encodeString(e):toTypedArray([e],t)}function toTypedArray(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.m(e)),Object(r.c)().getBool("DEBUG")&&a.h(e,t),function noConversionNeeded(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error("Unknown data type "+t)}function now(){return Object(r.c)().platform.now()}function util_fetch(e,t){return Object(r.c)().platform.fetch(e,t)}function encodeString(e,t="utf-8"){return t=t||"utf-8",Object(r.c)().platform.encode(e,t)}function decodeString(e,t="utf-8"){return t=t||"utf-8",Object(r.c)().platform.decode(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return assertNotComplex}));var r=n(0);function assertNotComplex(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&r.util.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the CPU backend.")})}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({mul_:function mul_(e,t){let n=Object(o.a)(e,"a","mul"),i=Object(o.a)(t,"b","mul");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.Wb,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return unaryKernelFunc})),n.d(t,"b",(function(){return unaryKernelFuncFromImpl}));var r=n(0),a=n(9);function unaryKernelFunc(e,t,n){return({inputs:s,attrs:o,backend:i})=>{const{x:u}=s;if(Object(a.a)(u,e),"string"===u.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const c=i,l=c.data.get(u.dataId).values,p=r.util.sizeFromShape(u.shape),h=n||u.dtype,f=r.util.getArrayFromDType(h,p);for(let e=0;e<p;++e)f[e]=t(l[e],o);return c.makeTensorInfo(u.shape,h,f)}}function unaryKernelFuncFromImpl(e,t,n){return({inputs:r,attrs:s,backend:o})=>{const{x:i}=r;if(Object(a.a)(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=o,c=u.data.get(i.dataId).values,l=n||i.dtype,p=t(c,l,s);return u.makeTensorInfo(i.shape,l,p)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({add_:function add_(e,t){let n=Object(o.a)(e,"a","add"),i=Object(o.a)(t,"b","add");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.d,u)}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return Environment})),n.d(t,"c",(function(){return env})),n.d(t,"a",(function(){return a})),n.d(t,"d",(function(){return setEnvironmentGlobal}));var r=n(6);class Environment{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=getQueryParams,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];env().getBool("IS_TEST")||env().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(Object(r.x)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if("tfjsflags"in e){e.tfjsflags.split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function parseValue(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}}function getQueryParams(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function decodeParam(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function env(){return a}let a=null;function setEnvironmentGlobal(e){a=e}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({sub_:function sub_(e,t){let n=Object(o.a)(e,"a","sub"),i=Object(o.a)(t,"b","sub");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.Yc,u)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"makeTypesMatch",(function(){return makeTypesMatch})),n.d(t,"assertTypesMatch",(function(){return assertTypesMatch})),n.d(t,"isTensorInList",(function(){return isTensorInList})),n.d(t,"getTensorsInContainer",(function(){return getTensorsInContainer}));var r=n(22),a=n(73),s=n(6);function makeTypesMatch(e,t){if(e.dtype===t.dtype)return[e,t];const n=Object(a.c)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function assertTypesMatch(e,t){Object(s.b)(e.dtype===t.dtype,()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`)}function isTensorInList(e,t){return t.some(t=>t.id===e.id)}function getTensorsInContainer(e){const t=[];return function walkTensorContainer(e,t,n){if(null==e)return;if(e instanceof r.a)return void t.push(e);if(!function isIterable(e){return Array.isArray(e)||"object"==typeof e}(e))return;const a=e;for(const e in a){const r=a[e];n.has(r)||(n.add(r),walkTensorContainer(r,t,n))}}(e,t,new Set),t}},function(e,t,n){"use strict";n.d(t,"a",(function(){return scalar}));var r=n(6),a=n(42);function scalar(e,t){if((Object(r.A)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&Object(r.A)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Object(a.a)(e,[],[],t)}},function(e,t,n){"use strict";n.d(t,"g",(function(){return enableProdMode})),n.d(t,"f",(function(){return enableDebugMode})),n.d(t,"c",(function(){return disableDeprecationWarnings})),n.d(t,"b",(function(){return deprecationWarn})),n.d(t,"e",(function(){return disposeVariables})),n.d(t,"h",(function(){return engine})),n.d(t,"m",(function(){return memory})),n.d(t,"n",(function(){return profile})),n.d(t,"t",(function(){return tidy})),n.d(t,"d",(function(){return dispose})),n.d(t,"l",(function(){return keep})),n.d(t,"u",(function(){return time})),n.d(t,"r",(function(){return setBackend})),n.d(t,"o",(function(){return ready})),n.d(t,"k",(function(){return getBackend})),n.d(t,"q",(function(){return removeBackend})),n.d(t,"i",(function(){return findBackend})),n.d(t,"j",(function(){return findBackendFactory})),n.d(t,"p",(function(){return registerBackend})),n.d(t,"a",(function(){return backend})),n.d(t,"s",(function(){return setPlatform}));var r=n(4),a=n(13),s=n(22),o=n(15);function enableProdMode(){Object(a.c)().set("PROD",!0)}function enableDebugMode(){Object(a.c)().set("DEBUG",!0)}function disableDeprecationWarnings(){Object(a.c)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function deprecationWarn(e){Object(a.c)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function disposeVariables(){r.a.disposeVariables()}function engine(){return r.a}function memory(){return r.a.memory()}function profile(e){return r.a.profile(e)}function tidy(e,t){return r.a.tidy(e,t)}function dispose(e){Object(o.getTensorsInContainer)(e).forEach(e=>e.dispose())}function keep(e){return r.a.keep(e)}function time(e){return r.a.time(e)}function setBackend(e){return r.a.setBackend(e)}function ready(){return r.a.ready()}function getBackend(){return r.a.backendName}function removeBackend(e){r.a.removeBackend(e)}function findBackend(e){return r.a.findBackend(e)}function findBackendFactory(e){return r.a.findBackendFactory(e)}function registerBackend(e,t,n=1){return r.a.registerBackend(e,t,n)}function backend(){return r.a.backend}function setPlatform(e,t){Object(a.c)().setPlatform(e,t)}Object(s.d)(deprecationWarn)},function(e,t,n){"use strict";n.d(t,"a",(function(){return createSimpleBinaryKernelImpl}));var r=n(0);function createSimpleBinaryKernelImpl(e){return(t,n,a,s,o)=>{const i=r.backend_util.assertAndGetBroadcastShape(t,n),u=i.length,c=r.util.computeStrides(i),l=r.util.sizeFromShape(i),p=r.util.getTypedArrayFromDType(o,l),h=t.length,f=n.length,m=r.util.computeStrides(t),b=r.util.computeStrides(n),g=r.backend_util.getBroadcastDims(t,i),y=r.backend_util.getBroadcastDims(n,i);if(g.length+y.length===0)for(let t=0;t<p.length;++t)p[t]=e(a[t%a.length],s[t%s.length]);else for(let t=0;t<p.length;++t){const n=r.util.indexToLoc(t,u,c),o=n.slice(-h);g.forEach(e=>o[e]=0);const i=r.util.locToIndex(o,h,m),l=n.slice(-f);y.forEach(e=>l[e]=0);const x=r.util.locToIndex(l,f,b);p[t]=e(a[i],s[x])}return[p,i]}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return binaryKernelFunc})),n.d(t,"b",(function(){return createComplexBinaryKernelImpl}));var r=n(0),a=n(9),s=n(57),o=n(33);function binaryKernelFunc(e,t,n,i){return null==n?({inputs:n,backend:s})=>{const{a:o,b:u}=n,c=s;Object(a.a)([o,u],e);const l=c.data.get(o.dataId).values,p=c.data.get(u.dataId).values,h="string"===o.dtype?r.backend_util.fromUint8ToStringArray(l):l,f="string"===o.dtype?r.backend_util.fromUint8ToStringArray(p):p,m=i||o.dtype,[b,g]=t(o.shape,u.shape,h,f,m);return c.makeTensorInfo(g,m,b)}:({inputs:e,backend:r})=>{const{a:a,b:u}=e,c=r;if("complex64"===a.dtype||"complex64"===u.dtype){const e=Object(s.a)({inputs:{x:a},backend:c,attrs:{dtype:"complex64"}}),t=c.data.get(e.dataId),r=t.complexTensorInfos.real,i=t.complexTensorInfos.imag,l=c.data.get(r.dataId).values,p=c.data.get(i.dataId).values,h=Object(s.a)({inputs:{x:u},backend:c,attrs:{dtype:"complex64"}}),f=c.data.get(h.dataId),m=f.complexTensorInfos.real,b=f.complexTensorInfos.imag,g=c.data.get(m.dataId).values,y=c.data.get(b.dataId).values,[x,v,O]=n(a.shape,u.shape,l,p,g,y),k=c.makeTensorInfo(O,"float32",x),w=c.makeTensorInfo(O,"float32",v),I=Object(o.a)({inputs:{real:k,imag:w},backend:c});return c.disposeIntermediateTensorInfo(e),c.disposeIntermediateTensorInfo(h),c.disposeIntermediateTensorInfo(k),c.disposeIntermediateTensorInfo(w),I}{const e=c.data.get(a.dataId).values,n=c.data.get(u.dataId).values,r=i||a.dtype,[s,o]=t(a.shape,u.shape,e,n,r);return c.makeTensorInfo(o,r,s)}}}function createComplexBinaryKernelImpl(e){return(t,n,a,s,o,i)=>{const u=r.backend_util.assertAndGetBroadcastShape(t,n),c=r.util.sizeFromShape(u),l=u.length,p=r.util.computeStrides(u),h=r.util.getTypedArrayFromDType("float32",c),f=r.util.getTypedArrayFromDType("float32",c),m=r.backend_util.getBroadcastDims(t,u),b=r.backend_util.getBroadcastDims(n,u),g=r.backend_util.mergeRealAndImagArrays(a,s),y=r.backend_util.mergeRealAndImagArrays(o,i),x=t.length,v=r.util.computeStrides(t),O=n.length,k=r.util.computeStrides(n);if(m.length+b.length===0)for(let t=0;t<h.length;t++){const n=t%g.length,r=t%y.length,a=e(g[2*n],g[2*n+1],y[2*r],y[2*r+1]);h[t]=a.real,f[t]=a.imag}else for(let t=0;t<h.length;t++){const n=r.util.indexToLoc(t,l,p),a=n.slice(-x);m.forEach(e=>a[e]=0);const s=r.util.locToIndex(a,x,v),o=n.slice(-O);b.forEach(e=>o[e]=0);const i=r.util.locToIndex(o,O,k),u=e(g[2*s],g[2*s+1],y[2*i],y[2*i+1]);h[t]=u.real,f[t]=u.imag}return[h,f,u]}}},function(e,t,n){"use strict";function getBroadcastDims(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function getReductionAxes(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function assertAndGetBroadcastShape(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}n.r(t),n.d(t,"getBroadcastDims",(function(){return getBroadcastDims})),n.d(t,"getReductionAxes",(function(){return getReductionAxes})),n.d(t,"assertAndGetBroadcastShape",(function(){return assertAndGetBroadcastShape}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(121),u=n(3);const c=Object(u.b)({div_:function div_(e,t){let n=Object(o.a)(e,"a","div"),u=Object(o.a)(t,"b","div");if([n,u]=Object(s.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return Object(i.a)(n,u);const c={a:n,b:u};return r.a.runKernel(a.mc,c,{})}})},function(e,t,n){"use strict";n.d(t,"b",(function(){return tensor_TensorBuffer})),n.d(t,"f",(function(){return setTensorTracker})),n.d(t,"e",(function(){return setOpHandler})),n.d(t,"d",(function(){return setDeprecationWarningFn})),n.d(t,"a",(function(){return tensor_Tensor})),n.d(t,"c",(function(){return tensor_Variable}));var r=n(91),a=n(6);function tensorToString(e,t,n,r){const s=Object(a.j)(t),o=function computeMaxSizePerColumn(e,t,n,r){const s=Object(a.O)(t),o=r[r.length-1],i=new Array(o).fill(0),u=t.length,c="complex64"===n?createComplexTuples(e):e;if(u>1)for(let e=0;e<s/o;e++){const t=e*o;for(let e=0;e<o;e++)i[e]=Math.max(i[e],valToString(c[t+e],0,n).length)}return i}(e,t,n,s),i=t.length,u=function subTensorToString(e,t,n,r,a,s=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u){if("complex64"===n){return[valToString(createComplexTuples(e)[0],0,n)]}return"bool"===n?[boolNumToString(e[0])]:[e[0].toString()]}if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=createComplexTuples(r),s=createComplexTuples(s)),["["+r.map((e,t)=>valToString(e,a[t],n)).join(", ")+", ..., "+s.map((e,t)=>valToString(e,a[i-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?createComplexTuples(e):Array.from(e)).map((e,t)=>valToString(e,a[t],n)).join(", ")+"]"]}const c=t.slice(1),l=r.slice(1),p=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*p,s=r+p;h.push(...subTensorToString(e.slice(r,s),c,n,l,a,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*p,s=r+p;h.push(...subTensorToString(e.slice(r,s),c,n,l,a,t===i-1))}}else for(let t=0;t<i;t++){const r=t*p,s=r+p;h.push(...subTensorToString(e.slice(r,s),c,n,l,a,t===i-1))}const f=2===u?",":"";h[0]="["+h[0]+f;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+f;let m=",\n";for(let e=2;e<u;e++)m+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(s?"":m),h}(e,t,n,s,o),c=["Tensor"];return r&&(c.push("  dtype: "+n),c.push("  rank: "+i),c.push(`  shape: [${t}]`),c.push("  values:")),c.push(u.map(e=>"    "+e).join("\n")),c.join("\n")}function valToString(e,t,n){let r;return r=Array.isArray(e)?parseFloat(e[0].toFixed(7))+" + "+parseFloat(e[1].toFixed(7))+"j":Object(a.z)(e)?`'${e}'`:"bool"===n?boolNumToString(e):parseFloat(e.toFixed(7)).toString(),Object(a.L)(r,t)}function boolNumToString(e){return 0===e?"false":"true"}function createComplexTuples(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var s=n(8);class tensor_TensorBuffer{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=a.O(e),null!=n){const e=n.length;a.b(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||a.n(t,this.size),this.strides=Object(a.j)(e)}set(e,...t){0===t.length&&(t=[0]),a.b(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=`+this.shape;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return o().makeTensor(this.values,this.shape,this.dtype)}}let o=null,i=null,u=null;function setTensorTracker(e){o=e}function setOpHandler(e){i=e}function setDeprecationWarningFn(e){u=e}class tensor_Tensor{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=a.O(e),this.strides=Object(a.j)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return i.buffer(this.shape,this.dtype,e)}bufferSync(){return i.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return Object(a.U)(this.shape,e,"complex64"===this.dtype)}arraySync(){return Object(a.U)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=o().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>s.decodeString(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),o().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=o().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>s.decodeString(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await o().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(o().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return i.print(this,e)}clone(){return this.throwIfDisposed(),i.clone(this)}toString(e=!1){return tensorToString(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),i.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),o().makeVariable(this,e,t,n)}}Object.defineProperty(tensor_Tensor,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),function getGlobalTensorClass(){return Object(r.a)("Tensor",()=>tensor_Tensor)}();class tensor_Variable extends tensor_Tensor{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.a(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);o().disposeTensor(this),this.dataId=e.dataId,o().incRef(this,null)}dispose(){o().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(tensor_Variable,Symbol.hasInstance,{value:e=>e instanceof tensor_Tensor&&null!=e.assign&&e.assign instanceof Function})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({cast_:function cast_(e,t){const n=Object(s.a)(e,"x","cast");if(!o.B(t))throw new Error("Failed to cast to unknown dtype "+t);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const i={x:n},u={dtype:t};return r.a.runKernel(a.x,i,u)}})},function(e,t,n){"use strict";n.d(t,"e",(function(){return computeDilation2DInfo})),n.d(t,"f",(function(){return computePool2DInfo})),n.d(t,"g",(function(){return computePool3DInfo})),n.d(t,"b",(function(){return computeConv2DInfo})),n.d(t,"c",(function(){return computeConv3DInfo})),n.d(t,"d",(function(){return computeDefaultPad})),n.d(t,"j",(function(){return tupleValuesAreOne})),n.d(t,"i",(function(){return eitherStridesOrDilationsAreOne})),n.d(t,"h",(function(){return convertConv2DDataFormat})),n.d(t,"a",(function(){return checkPadOnDimRoundingMode}));var r=n(6);function computeDilation2DInfo(e,t,n,r,a="NHWC",s){return computeConv2DInfo(e,[...t,e[3]],n,s,r,null,null,convertConv2DDataFormat(a))}function computePool2DInfo(e,t,n,r,a,s,o="channelsLast"){const[i,u]=parseTupleParam(t);let c;if("channelsLast"===o)c=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);c=[i,u,e[1],e[1]]}return computeConv2DInfo(e,c,n,r,a,s,!1,o)}function computePool3DInfo(e,t,n,r,a,s,o="NDHWC"){const[i,u,c]=parse3TupleParam(t);let l,p;if("NDHWC"===o)p="channelsLast",l=[i,u,c,e[4],e[4]];else{if("NCDHW"!==o)throw new Error("Unknown dataFormat "+o);p="channelsFirst",l=[i,u,c,e[1],e[1]]}return computeConv3DInfo(e,l,n,r,a,!1,p,s)}function computeConv2DInfo(e,t,n,r,a,s,o=!1,i="channelsLast"){let[u,c,l,p]=[-1,-1,-1,-1];if("channelsLast"===i)[u,c,l,p]=e;else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);[u,p,c,l]=e}const[h,f,,m]=t,[b,g]=parseTupleParam(n),[y,x]=parseTupleParam(r),v=getEffectiveFilterSize(h,y),O=getEffectiveFilterSize(f,x),{padInfo:k,outHeight:w,outWidth:I}=function getPadAndOutInfo(e,t,n,r,a,s,o,i,u){let c,l,p;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function computeOutputShape2D(e,t,n,r,a){null==r&&(r=computeDefaultPad(e,t,n));const s=e[0],o=e[1],i=round((s-t+2*r)/n+1,a),u=round((o-t+2*r)/n+1,a);return[i,u]}([t,n],s,r,e,i);l=a[0],p=a[1]}else if("same"===e){l=Math.ceil(t/r),p=Math.ceil(n/a);const e=Math.max(0,(l-1)*r+s-t),i=Math.max(0,(p-1)*a+o-n),u=Math.floor(e/2),h=e-u,f=Math.floor(i/2);c={top:u,bottom:h,left:f,right:i-f,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((t-s+1)/r),p=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error("Unknown padding parameter: "+e);{const h="channelsLast"===u?e[1][0]:e[2][0],f="channelsLast"===u?e[1][1]:e[2][1],m="channelsLast"===u?e[2][0]:e[3][0],b="channelsLast"===u?e[2][1]:e[3][1];c={top:h,bottom:f,left:m,right:b,type:0===h&&0===f&&0===m&&0===b?"VALID":"EXPLICIT"},l=round((t-s+h+f)/r+1,i),p=round((n-o+m+b)/a+1,i)}}return{padInfo:c,outHeight:l,outWidth:p}}(a,c,l,b,g,v,O,s,i),S=o?m*p:m;let T;return"channelsFirst"===i?T=[u,S,w,I]:"channelsLast"===i&&(T=[u,w,I,S]),{batchSize:u,dataFormat:i,inHeight:c,inWidth:l,inChannels:p,outHeight:w,outWidth:I,outChannels:S,padInfo:k,strideHeight:b,strideWidth:g,filterHeight:h,filterWidth:f,effectiveFilterHeight:v,effectiveFilterWidth:O,dilationHeight:y,dilationWidth:x,inShape:e,outShape:T,filterShape:t}}function computeConv3DInfo(e,t,n,r,a,s=!1,o="channelsLast",i){let[u,c,l,p,h]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,c,l,p,h]=e;else{if("channelsFirst"!==o)throw new Error("Unknown dataFormat "+o);[u,h,c,l,p]=e}const[f,m,b,,g]=t,[y,x,v]=parse3TupleParam(n),[O,k,w]=parse3TupleParam(r),I=getEffectiveFilterSize(f,O),S=getEffectiveFilterSize(m,k),T=getEffectiveFilterSize(b,w),{padInfo:N,outDepth:_,outHeight:C,outWidth:j}=function get3DPadAndOutInfo(e,t,n,r,a,s,o,i,u,c,l){let p,h,f,m;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function computeOutputShape4D(e,t,n,r,a,s){null==a&&(a=computeDefaultPad(e,t,r));const o=e[0],i=e[1],u=e[2],c=round((o-t+2*a)/r+1,s),l=round((i-t+2*a)/r+1,s),p=round((u-t+2*a)/r+1,s);return[c,l,p,n]}([t,n,r,1],i,1,a,e,l);h=s[0],f=s[1],m=s[2]}else if("same"===e){h=Math.ceil(t/a),f=Math.ceil(n/s),m=Math.ceil(r/o);const e=(h-1)*a+i-t,l=(f-1)*s+u-n,b=(m-1)*o+c-r,g=Math.floor(e/2),y=e-g,x=Math.floor(l/2),v=l-x,O=Math.floor(b/2);p={top:x,bottom:v,left:O,right:b-O,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error("Unknown padding parameter: "+e);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/a),f=Math.ceil((n-u+1)/s),m=Math.ceil((r-c+1)/o)}return{padInfo:p,outDepth:h,outHeight:f,outWidth:m}}(a,c,l,p,y,x,v,I,S,T,i),E=s?g*h:g;let A;return"channelsFirst"===o?A=[u,E,_,C,j]:"channelsLast"===o&&(A=[u,_,C,j,E]),{batchSize:u,dataFormat:o,inDepth:c,inHeight:l,inWidth:p,inChannels:h,outDepth:_,outHeight:C,outWidth:j,outChannels:E,padInfo:N,strideDepth:y,strideHeight:x,strideWidth:v,filterDepth:f,filterHeight:m,filterWidth:b,effectiveFilterDepth:I,effectiveFilterHeight:S,effectiveFilterWidth:T,dilationDepth:O,dilationHeight:k,dilationWidth:w,inShape:e,outShape:A,filterShape:t}}function computeDefaultPad(e,t,n,r=1){const a=getEffectiveFilterSize(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function parseTupleParam(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function parse3TupleParam(e){return"number"==typeof e?[e,e,e]:e}function getEffectiveFilterSize(e,t){return t<=1?e:e+(e-1)*(t-1)}function round(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error("Unknown roundingMode "+t)}}function tupleValuesAreOne(e){const[t,n,r]=parseTupleParam(e);return 1===t&&1===n&&1===r}function eitherStridesOrDilationsAreOne(e,t){return tupleValuesAreOne(e)||tupleValuesAreOne(t)}function convertConv2DDataFormat(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error("Unknown dataFormat "+e)}function checkPadOnDimRoundingMode(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)r.b(r.v(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{r.b(r.v(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({matMul_:function matMul_(e,t,n=!1,i=!1){let u=Object(o.a)(e,"a","matMul"),c=Object(o.a)(t,"b","matMul");[u,c]=Object(s.makeTypesMatch)(u,c);const l={a:u,b:c},p={transposeA:n,transposeB:i};return r.a.runKernel(a.s,l,p)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({slice_:function slice_(e,t,n){const o=Object(s.a)(e,"x","slice","string_or_numeric");if(0===o.rank)throw new Error("Slicing scalar is not possible");const i={x:o},u={begin:t,size:n};return r.a.runKernel(a.Gc,i,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(23),i=n(3);const u=Object(i.b)({sum_:function sum_(e,t=null,n=!1){let i=Object(s.a)(e,"x","sum");"bool"===i.dtype&&(i=Object(o.a)(i,"int32"));const u={x:i},c={axis:t,keepDims:n};return r.a.runKernel(a.Zc,u,c)}})},function(e,t,n){"use strict";(function(e){n.d(t,"f",(function(){return encodeWeights})),n.d(t,"e",(function(){return decodeWeights})),n.d(t,"a",(function(){return arrayBufferToBase64String})),n.d(t,"b",(function(){return base64StringToArrayBuffer})),n.d(t,"d",(function(){return concatenateArrayBuffers})),n.d(t,"c",(function(){return basename})),n.d(t,"i",(function(){return getModelJSONForModelArtifacts})),n.d(t,"g",(function(){return getModelArtifactsForJSON})),n.d(t,"h",(function(){return getModelArtifactsInfoForJSON}));var r=n(47),a=n(64),s=n(6),o=n(115);async function encodeWeights(e,t){const n=[],r=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise(async e=>{const t=await i.bytes(),n=t.reduce((e,t)=>e+t.length,0)+4*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=4,r.set(n,a),a+=n.length}e(r)});r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:concatenateTypedArrays(await Promise.all(r)),specs:n}}function decodeWeights(e,t){const n={};let i,u=0;for(const c of t){const t=c.name,l=c.dtype,p=c.shape,h=Object(s.O)(p);let f;if("quantization"in c){const n=c.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${c.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${c.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${c.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${l}.`)}const r=o.a[n.dtype],a=e.slice(u,u+h*r),s="uint8"===n.dtype?new Uint8Array(a):new Uint16Array(a);if("float32"===l)if("uint8"===n.dtype||"uint16"===n.dtype){f=new Float32Array(s.length);for(let e=0;e<s.length;e++){const t=s[e];f[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===i&&(i=getFloat16Decoder()),f=i(s)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${t}': ${l}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);f=new Int32Array(s.length);for(let e=0;e<s.length;e++){const t=s[e];f[e]=Math.round(t*n.scale+n.min)}}u+=h*r}else if("string"===l){const t=Object(s.O)(c.shape);f=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(u,u+4))[0];u+=4;const n=new Uint8Array(e.slice(u,u+t));f.push(n),u+=t}}else{const s=o.a[l],i=e.slice(u,u+h*s);if("float32"===l)f=new Float32Array(i);else if("int32"===l)f=new Int32Array(i);else if("bool"===l)f=new Uint8Array(i);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${t}': ${l}`);{f=new Float32Array(i);const e=new Float32Array(f.length/2),s=new Float32Array(f.length/2);for(let t=0;t<e.length;t++)e[t]=f[2*t],s[t]=f[2*t+1];const o=Object(a.a)(e,p,"float32"),u=Object(a.a)(s,p,"float32");n[t]=Object(r.a)(o,u),o.dispose(),u.dispose()}}u+=h*s}"complex64"!==l&&(n[t]=Object(a.a)(f,p,l))}return n}function concatenateTypedArrays(e){if(null===e)throw new Error("Invalid input value: "+JSON.stringify(e));let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+e.constructor.name)});const r=new Uint8Array(t);let a=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),r.buffer}const i=void 0!==e&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function stringByteLength(t){return i?e.byteLength(t):new Blob([t]).size}function arrayBufferToBase64String(t){if(i)return e.from(t).toString("base64");const n=new Uint8Array(t);let r="";for(let e=0,t=n.length;e<t;e++)r+=String.fromCharCode(n[e]);return btoa(r)}function base64StringToArrayBuffer(t){if(i){const n=e.from(t,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}const n=atob(t),r=new Uint8Array(n.length);for(let e=0;e<n.length;++e)r.set([n.charCodeAt(e)],e);return r.buffer}function concatenateArrayBuffers(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function basename(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function getModelJSONForModelArtifacts(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function getModelArtifactsForJSON(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,a]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=a}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function getModelArtifactsInfoForJSON(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:stringByteLength(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:stringByteLength(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function getFloat16Decoder(){const e=function computeFloat16MantisaTable(){const convertMantissa=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},e=new Uint32Array(2048);e[0]=0;for(let t=1;t<1024;t++)e[t]=convertMantissa(t);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),t=function computeFloat16ExponentTable(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function computeFloat16OffsetTable(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}}).call(this,n(186).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return transpose})),n.d(t,"b",(function(){return o}));var r=n(0),a=n(9),s=n(104);function transpose(e){const{inputs:t,attrs:n,backend:r}=e,{x:o}=t,{perm:i}=n;Object(a.a)(o,"transpose");const u=o.shape.length,c=new Array(u);for(let e=0;e<c.length;e++)c[e]=o.shape[i[e]];const l=r.data.get(o.dataId).values,p=Object(s.a)(l,o.shape,o.dtype,i,c);return{dataId:r.write(p,c,o.dtype),shape:c,dtype:o.dtype}}const o={kernelName:r.Transpose,backendName:"cpu",kernelFunc:transpose}},function(e,t,n){"use strict";n.d(t,"a",(function(){return customGrad})),n.d(t,"f",(function(){return variableGrads})),n.d(t,"d",(function(){return valueAndGrad})),n.d(t,"e",(function(){return valueAndGrads})),n.d(t,"b",(function(){return grad})),n.d(t,"c",(function(){return grads}));var r=n(4),a=n(22),s=n(2),o=n(6);function grad(e){return o.b(o.u(e),()=>"The f passed in grad(f) must be a function"),(t,n)=>{const a=Object(s.a)(t,"x","tf.grad","string_or_numeric"),i=null!=n?Object(s.a)(n,"dy","tf.grad"):null;return r.a.tidy(()=>{const{value:t,grads:n}=r.a.gradients(()=>e(a),[a],i);return null!=i&&o.e(t.shape,i.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),checkGrads(n),n[0]})}}function grads(e){return o.b(o.u(e),()=>"The f passed in grads(f) must be a function"),(t,n)=>{o.b(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const a=Object(s.b)(t,"args","tf.grads","string_or_numeric"),i=null!=n?Object(s.a)(n,"dy","tf.grads"):null;return r.a.tidy(()=>{const{value:t,grads:n}=r.a.gradients(()=>e(...a),a,i);return null!=i&&o.e(t.shape,i.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),checkGrads(n),n})}}function valueAndGrad(e){return o.b(o.u(e),()=>"The f passed in valueAndGrad(f) must be a function"),(t,n)=>{o.b(t instanceof a.a,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),o.b(null==n||n instanceof a.a,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:s,value:i}=r.a.gradients(()=>e(t),[t],n);return checkGrads(s),{grad:s[0],value:i}}}function valueAndGrads(e){return o.b(o.u(e),()=>"The f passed in valueAndGrads(f) must be a function"),(t,n)=>{o.b(Array.isArray(t)&&t.every(e=>e instanceof a.a),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),o.b(null==n||n instanceof a.a,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const s=r.a.gradients(()=>e(...t),t,n);return null!=n&&o.e(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),checkGrads(s.grads),s}}function variableGrads(e,t){o.b(o.u(e),()=>"The f passed in variableGrads(f) must be a function"),o.b(null==t||Array.isArray(t)&&t.every(e=>e instanceof a.c),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const n=null!=t;if(!n){t=[];for(const e in r.a.registeredVariables)t.push(r.a.registeredVariables[e])}const s=n?t.filter(e=>!e.trainable):null,i=t.length;t=t.filter(e=>e.trainable),o.b(t.length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${i} variables is trainable.`);const{value:u,grads:c}=r.a.gradients(e,t,null,!0);o.b(c.some(e=>null!=e),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),o.b(0===u.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`);const l={};return t.forEach((e,t)=>{null!=c[t]&&(l[e.name]=c[t])}),null!=s&&s.forEach(e=>l[e.name]=null),{value:u,grads:l}}function customGrad(e){return r.a.customGrad(e)}function checkGrads(e){if(e.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(53),u=n(3);const c=Object(u.b)({concat_:function concat_(e,t=0){Object(o.b)(e.length>=1,()=>"Pass at least one tensor to concat");const n=Object(s.b)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length)return Object(i.a)(n[0]);const u=n,c={axis:t};return r.a.runKernel(a.C,u,c)}})},function(e,t,n){"use strict";var r;n.d(t,"a",(function(){return r})),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},function(e,t,n){"use strict";function complex(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}n.d(t,"a",(function(){return complex})),n.d(t,"b",(function(){return r}));const r={kernelName:n(0).Complex,backendName:"cpu",kernelFunc:complex}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({zerosLike_:function zerosLike_(e){const t={x:Object(s.a)(e,"x","zerosLike")};return r.a.runKernel(a.jd,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(4),a=n(2),s=n(3);const o=Object(s.b)({square_:function square_(e){const t=Object(a.a)(e,"x","square");return r.a.runKernel("Square",{x:t},{})}})},function(e,t,n){"use strict";function identity(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}n.d(t,"a",(function(){return identity})),n.d(t,"b",(function(){return r}));const r={kernelName:n(0).Identity,backendName:"cpu",kernelFunc:identity}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({abs_:function abs_(e){const t=Object(s.a)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.a.runKernel(a.B,e)}{const e={x:t};return r.a.runKernel(a.a,e)}}})},function(e,t,n){"use strict";n.d(t,"c",(function(){return getFusedDyActivation})),n.d(t,"b",(function(){return getFusedBiasGradient})),n.d(t,"a",(function(){return applyActivation})),n.d(t,"d",(function(){return shouldFuse}));var r=n(20),a=n(127),s=n(131),o=n(10),i=n(140),u=n(77),c=n(142),l=n(7),p=n(65),h=n(146),f=n(27);function getFusedDyActivation(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return Object(o.a)(e,Object(h.a)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function getFusedBiasGradient(e,t){let n=t;const a=r.getReductionAxes(e.shape,t.shape);return a.length>0&&(n=Object(f.a)(n,a)),Object(l.a)(n,e.shape)}function applyActivation(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Object(u.a)(e);if("elu"===t)return Object(a.a)(e);if("relu6"===t)return Object(c.a)(e);if("prelu"===t)return Object(i.a)(e,n);if("leakyrelu"===t)return Object(s.a)(e,r);if("sigmoid"===t)return Object(p.a)(e);throw new Error(`Unknown fused activation ${t}.`)}const shouldFuse=(e,t)=>!(e>0)||"linear"===t},,function(e,t,n){"use strict";n.d(t,"a",(function(){return buffer}));var r=n(22),a=n(6);function buffer(e,t="float32",n){return t=t||"float32",a.c(e),new r.b(e,t,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return tensor1d}));var r=n(2),a=n(6),s=n(42);function tensor1d(e,t){Object(a.d)(e);const n=Object(r.c)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Object(s.a)(e,null,n,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return makeTensor}));var r=n(4),a=n(6),s=n(8);function makeTensor(e,t,n,o){if(null==o&&(o=Object(a.r)(e)),"complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!Object(a.A)(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Object(a.c)(t);const e=Object(a.O)(t),r=Object(a.O)(n);Object(a.b)(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==Object(a.O)(t.slice(e));Object(a.b)(n[e]===t[e]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return Object(a.A)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?Object(s.toTypedArray)(e,o):Object(a.m)(e,[],!0),r.a.makeTensor(e,t,o)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return createSimpleUnaryImpl}));var r=n(0);function createSimpleUnaryImpl(e){return(t,n,a)=>{const s=r.util.getTypedArrayFromDType(n,t.length);for(let n=0;n<t.length;++n)s[n]=e(t[n],a);return s}}},function(e,t,n){"use strict";n.d(t,"c",(function(){return sliceImpl})),n.d(t,"a",(function(){return slice})),n.d(t,"b",(function(){return s}));var r=n(0),a=n(9);function sliceImpl(e,t,n,a,s){const o=r.slice_util.isSliceContinous(a,t,n),i=r.util.sizeFromShape(n),u=r.util.computeStrides(a);if(o){const n=r.slice_util.computeFlatOffset(t,u);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const c="string"===s?r.backend_util.fromUint8ToStringArray(e):e,l=Object(r.buffer)(a,s,c),p=Object(r.buffer)(n,s);for(let e=0;e<p.size;++e){const n=p.indexToLoc(e),r=n.map((e,n)=>e+t[n]);p.set(l.get(...r),...n)}return"string"===s?r.backend_util.fromStringArrayToUint8(p.values):p.values}function slice(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{begin:i,size:u}=s;Object(a.a)(o,"slice");const[c,l]=r.slice_util.parseSliceParams(o,i,u);r.slice_util.assertParamsValid(o,c,l);const p=sliceImpl(n.data.get(o.dataId).values,c,l,o.shape,o.dtype);return n.makeTensorInfo(l,o.dtype,p)}const s={kernelName:r.Slice,backendName:"cpu",kernelFunc:slice}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({neg_:function neg_(e){const t={x:Object(s.a)(e,"x","neg")};return r.a.runKernel(a.Xb,t)}})},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return OperationMapper})),n.d(t,"i",(function(){return getStringParam})),n.d(t,"c",(function(){return getBoolParam})),n.d(t,"f",(function(){return getNumberParam})),n.d(t,"e",(function(){return getDtypeParam})),n.d(t,"d",(function(){return getDtypeArrayParam})),n.d(t,"k",(function(){return getTensorShapeParam})),n.d(t,"g",(function(){return getNumericArrayParam})),n.d(t,"h",(function(){return getStringArrayParam})),n.d(t,"j",(function(){return getTensorShapeArrayParam})),n.d(t,"b",(function(){return getBoolArrayParam}));var r=n(0),a=n(60),s=n(84),o=n(1),i=n(245),u=n(246),c=n(247),l=n(248),p=n(249),h=n(250),f=n(251),m=n(252),b=n(253),g=n(254),y=n(255),x=n(256),v=n(257),O=n(258),k=n(259),w=n(260),I=n(261),S=n(262),T=n(263);class OperationMapper{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[i,u,c,l,p,h,f,m,b,g,y,x,v,O,k,w,I,S,T].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],i=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e),{});let u=[];const c=[];let l={},p={};null!=t&&(l=this.mapSignatureEntries(t.inputs),p=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach(e=>{const t=i[e];t.inputNames.forEach((e,n)=>{const[r,,a]=Object(o.b)(e),s=i[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)})}),0===Object.keys(p).length?h.forEach(e=>{const t=i[e];0===t.children.length&&c.push(t)}):Object.keys(p).forEach(e=>{const[t]=Object(o.b)(e),n=i[t];null!=n&&(n.signatureKey=p[e],c.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(e=>{const[t]=Object(o.b)(e),n=i[t];n&&(n.signatureKey=l[e],u.push(n))}):u=r;let f={};null!=e.library&&null!=e.library.function&&(f=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const m={nodes:i,inputs:u,outputs:c,weights:a,placeholders:r,signature:t,functions:f};return s.length>0&&(m.initNodes=s),m}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=Object(s.b)(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.substr(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let a=void 0;switch(n.type){case"string":a=getStringParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getStringParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=getStringArrayParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getStringArrayParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=getNumberParam(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=getNumberParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=getNumericArrayParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getNumericArrayParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=getBoolParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getBoolParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=getBoolArrayParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getBoolArrayParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=getTensorShapeParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getTensorShapeParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=getTensorShapeArrayParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getTensorShapeArrayParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=getDtypeParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getDtypeParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=getDtypeArrayParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getDtypeArrayParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=getFuncParam(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=getFuncParam(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const a=[],s=[];e.signature.inputArg.forEach(e=>{const[t]=Object(o.b)(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:parseDtypeParam(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n});Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach((e,n)=>{const[a,,s]=Object(o.b)(e),i=r[a];if(null!=i.outputs){const e=i.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(i),i.children.push(t)})});const i=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=Object(o.b)(i[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))});const u=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:u}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function parseStringParam(t,n){const a=Array.isArray(t)?String.fromCharCode.apply(null,t):function decodeBase64(t){const n=Object(r.env)().global;if(void 0!==n.atob)return n.atob(t);if(void 0!==e)return new e(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return n?a:a.toLowerCase()}function getStringParam(e,t,n,r=!1){const a=e[t];return null!=a?parseStringParam(a.s,r):n}function getBoolParam(e,t,n){const r=e[t];return r?r.b:n}function getNumberParam(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function parseDtypeParam(e){switch("string"==typeof e&&(e=a.a[e]),e){case a.a.DT_FLOAT:case a.a.DT_HALF:return"float32";case a.a.DT_INT32:case a.a.DT_INT64:case a.a.DT_INT8:case a.a.DT_UINT8:return"int32";case a.a.DT_BOOL:return"bool";case a.a.DT_DOUBLE:return"float32";case a.a.DT_STRING:return"string";default:return null}}function getFuncParam(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function getDtypeParam(e,t,n){const r=e[t];return r&&r.type?parseDtypeParam(r.type):n}function getDtypeArrayParam(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>parseDtypeParam(e)):n}function parseTensorShapeParam(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function getTensorShapeParam(e,t,n){const r=e[t];return r&&r.shape?parseTensorShapeParam(r.shape):n}function getNumericArrayParam(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function getStringArrayParam(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>parseStringParam(e,r)):n}function getTensorShapeArrayParam(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>parseTensorShapeParam(e)):n}function getBoolArrayParam(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}}).call(this,n(186).Buffer)},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({complex_:function complex_(e,t){const n=Object(s.a)(e,"real","complex"),i=Object(s.a)(t,"imag","complex");o.e(n.shape,i.shape,`real and imag shapes, ${n.shape} and ${i.shape}, must match in call to tf.complex().`);const u={real:n,imag:i};return r.a.runKernel(a.A,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({reverse_:function reverse_(e,t){const n={x:Object(s.a)(e,"x","reverse")},o={dims:t};return r.a.runKernel(a.vc,n,o)}})},function(e,t,n){"use strict";function real(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}n.d(t,"a",(function(){return real})),n.d(t,"b",(function(){return r}));const r={kernelName:n(0).Real,backendName:"cpu",kernelFunc:real}},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return c}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e+t),i=Object(s.b)((e,t,n,r)=>({real:e+n,imag:t+r})),u=Object(s.a)(r.Add,o,i),c={kernelName:r.Add,backendName:"cpu",kernelFunc:u}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return c}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e*t),i=Object(s.b)((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})),u=Object(s.a)(r.Multiply,o,i),c={kernelName:r.Multiply,backendName:"cpu",kernelFunc:u}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({clone_:function clone_(e){const t={x:Object(s.a)(e,"x","clone","string_or_numeric")};return r.a.runKernel(a.sb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({sqrt_:function sqrt_(e){const t={x:Object(s.a)(e,"x","sqrt","float32")};return r.a.runKernel(a.Qc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({exp_:function exp_(e){const t={x:Object(s.a)(e,"x","exp")};return r.a.runKernel(a.bb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(107),i=n(20),u=n(3);const c=Object(u.b)({where_:function where_(e,t,n){const u=Object(s.a)(t,"a","where"),c=Object(s.a)(n,"b","where"),l=Object(s.a)(e,"condition","where","bool"),p=Object(i.assertAndGetBroadcastShape)(Object(i.assertAndGetBroadcastShape)(l.shape,u.shape),c.shape),h={condition:Object(o.a)(l,p),t:Object(o.a)(u,p),e:Object(o.a)(c,p)};return r.a.runKernel(a.Ac,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return cast})),n.d(t,"b",(function(){return c}));var r=n(0),a=n(18),s=n(184),o=n(33),i=n(36),u=n(49);function cast(e){const{inputs:t,backend:n,attrs:c}=e,{x:l}=t,{dtype:p}=c;if("complex64"===p){if("complex64"===l.dtype)return Object(i.a)({inputs:{x:l},backend:n});const e=Object(s.a)(n,l.shape,l.dtype),t=cast({inputs:{x:l},backend:n,attrs:{dtype:"float32"}}),r=Object(o.a)({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===l.dtype){const e=Object(u.a)({inputs:{input:l},backend:n}),t=cast({inputs:{x:e},backend:n,attrs:{dtype:p}});return n.disposeIntermediateTensorInfo(e),t}if(!r.util.hasEncodingLoss(l.dtype,p)){const e=Object(i.a)({inputs:{x:l},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:p}}if("int32"===p){const e=n.data.get(l.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(l.shape,"int32",t)}if("bool"===p){const e=n.data.get(l.dataId).values,t=r.util.toTypedArray([0],l.dtype),[s,o]=Object(a.a)((e,t)=>e!==t?1:0)(l.shape,[],e,t,"bool");return n.makeTensorInfo(o,"bool",s)}throw new Error(`Error in Cast: failed to cast ${l.dtype} to ${p}`)}const c={kernelName:r.Cast,backendName:"cpu",kernelFunc:cast}},function(e,t,n){"use strict";n.d(t,"b",(function(){return warn})),n.d(t,"a",(function(){return log}));var r=n(13);function warn(...e){Object(r.c)().getBool("IS_TEST")||Object(r.c)().getBool("PROD")||console.warn(...e)}function log(...e){Object(r.c)().getBool("IS_TEST")||Object(r.c)().getBool("PROD")||console.log(...e)}},function(e,t,n){"use strict";n.d(t,"c",(function(){return getKernel})),n.d(t,"b",(function(){return getGradient})),n.d(t,"d",(function(){return getKernelsForBackend})),n.d(t,"f",(function(){return registerKernel})),n.d(t,"e",(function(){return registerGradient})),n.d(t,"h",(function(){return unregisterKernel})),n.d(t,"g",(function(){return unregisterGradient})),n.d(t,"a",(function(){return copyRegisteredKernels}));var r=n(13),a=n(91),s=n(58);const o=Object(a.a)("kernelRegistry",()=>new Map),i=Object(a.a)("gradRegistry",()=>new Map);function getKernel(e,t){const n=makeKey(e,t);return o.get(n)}function getGradient(e){return i.get(e)}function getKernelsForBackend(e){const t=o.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function registerKernel(e){const{kernelName:t,backendName:n}=e,r=makeKey(t,n);o.has(r)&&s.b(`The kernel '${t}' for backend '${n}' is already registered`),o.set(r,e)}function registerGradient(e){const{kernelName:t}=e;i.has(t)&&Object(r.c)().getBool("DEBUG")&&s.b(`Overriding the gradient for '${t}'`),i.set(t,e)}function unregisterKernel(e,t){const n=makeKey(e,t);if(!o.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);o.delete(n)}function unregisterGradient(e){if(!i.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);i.delete(e)}function copyRegisteredKernels(e,t){getKernelsForBackend(e).forEach(e=>{registerKernel(Object.assign({},e,{backendName:t}))})}function makeKey(e,t){return`${t}_${e}`}},function(e,t,n){"use strict";var r,a;n.d(t,"a",(function(){return r})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(r||(r={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(a||(a={}))},function(e,t,n){"use strict";function binaryInsert(e,t,n){const r=function binarySearch(e,t,n){return function binarySearch_(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||defaultComparator)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function defaultComparator(e,t){return e>t?1:e<t?-1:0}function nonMaxSuppressionV3Impl(e,t,n,r,a){return nonMaxSuppressionImpl_(e,t,n,r,a,0)}function nonMaxSuppressionV4Impl(e,t,n,r,a,s){return nonMaxSuppressionImpl_(e,t,n,r,a,0,!1,s,!0)}function nonMaxSuppressionV5Impl(e,t,n,r,a,s){return nonMaxSuppressionImpl_(e,t,n,r,a,s,!0)}function nonMaxSuppressionImpl_(e,t,n,r,a,s,o=!1,i=!1,u=!1){const c=[];for(let e=0;e<t.length;e++)t[e]>a&&c.push({score:t[e],boxIndex:e,suppressBeginIndex:0});c.sort(ascendingComparator);const l=s>0?-.5/s:0,p=[],h=[];for(;p.length<n&&c.length>0;){const t=c.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=p.length-1;n>=o;--n){const o=intersectionOverUnion(e,s,p[n]);if(o>=r){i=!0;break}if(t.score=t.score*suppressWeight(r,l,o),t.score<=a)break}t.suppressBeginIndex=p.length,i||(t.score===n?(p.push(s),h.push(t.score)):t.score>a&&binaryInsert(c,t,ascendingComparator))}const f=p.length,m=n-f;i&&m>0&&(p.push(...new Array(m).fill(0)),h.push(...new Array(m).fill(0)));const b={selectedIndices:p};return o&&(b.selectedScores=h),u&&(b.validOutputs=f),b}function intersectionOverUnion(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(a[0],a[2]),l=Math.min(a[1],a[3]),p=Math.max(a[0],a[2]),h=Math.max(a[1],a[3]),f=(i-s)*(u-o),m=(p-c)*(h-l);if(f<=0||m<=0)return 0;const b=Math.max(s,c),g=Math.max(o,l),y=Math.min(i,p),x=Math.min(u,h),v=Math.max(y-b,0)*Math.max(x-g,0);return v/(f+m-v)}function suppressWeight(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function ascendingComparator(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,"a",(function(){return nonMaxSuppressionV3Impl})),n.d(t,"b",(function(){return nonMaxSuppressionV4Impl})),n.d(t,"c",(function(){return nonMaxSuppressionV5Impl}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return axesAreInnerMostDims})),n.d(t,"c",(function(){return combineLocations})),n.d(t,"d",(function(){return computeOutAndReduceShapes})),n.d(t,"e",(function(){return expandShapeToKeepDim})),n.d(t,"a",(function(){return assertAxesAreInnerMostDims})),n.d(t,"f",(function(){return getAxesPermutation})),n.d(t,"h",(function(){return getUndoAxesPermutation})),n.d(t,"g",(function(){return getInnerMostAxes}));var r=n(6);function axesAreInnerMostDims(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function combineLocations(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function computeOutAndReduceShapes(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map(t=>e[t])]}function expandShapeToKeepDim(e,t){return combineLocations(e,t.map(e=>1),t)}function assertAxesAreInnerMostDims(e,t,n){r.b(axesAreInnerMostDims(t,n),()=>e+" supports only inner-most axes for now. "+`Got axes ${t} and rank-${n} input.`)}function getAxesPermutation(e,t){if(axesAreInnerMostDims(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function getUndoAxesPermutation(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function getInnerMostAxes(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({pad_:function pad_(e,t,n=0){const o=Object(s.a)(e,"x","pad");if(0===o.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const i={paddings:t,constantValue:n},u={x:o};return r.a.runKernel(a.fc,u,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return tensor}));var r=n(2),a=n(42);function tensor(e,t,n){const s=Object(r.c)(e,n);return Object(a.a)(e,t,s,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({sigmoid_:function sigmoid_(e){const t={x:Object(s.a)(e,"x","sigmoid","float32")};return r.a.runKernel(a.Cc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({max_:function max_(e,t=null,n=!1){const o={x:Object(s.a)(e,"x","max")},i={reductionIndices:t,keepDims:n};return r.a.runKernel(a.Jb,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({pow_:function pow_(e,t){let n=Object(o.a)(e,"base","pow"),i=Object(o.a)(t,"exp","pow");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.hc,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({log_:function log_(e){const t={x:Object(s.a)(e,"x","log","float32")};return r.a.runKernel(a.Db,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({split_:function split_(e,t,n=0){const o={x:Object(s.a)(e,"x","split")},i={numOrSizeSplits:t,axis:n};return r.a.runKernel(a.Pc,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({stack_:function stack_(e,t=0){const n=Object(s.b)(e,"tensors","stack","string_or_numeric");o.b(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&o.b(t<=n[0].rank,()=>"Axis must be <= rank of the tensor");const i=n,u={axis:t};return r.a.runKernel(a.ec,i,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return ones}));var r=n(4),a=n(6),s=n(47),o=n(76);function ones(e,t="float32"){if("complex64"===t){const t=ones(e,"float32"),n=Object(o.a)(e,"float32");return Object(s.a)(t,n)}const n=Object(a.D)(Object(a.O)(e),t);return r.a.makeTensor(n,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({expandDims_:function expandDims_(e,t=0){const n=Object(s.a)(e,"x","expandDims","string_or_numeric");o.b(t<=n.rank,()=>"Axis must be <= rank of the tensor");const i={input:n},u={dim:t};return r.a.runKernel(a.cb,i,u)}})},function(e,t,n){"use strict";var r,a,s,o,i;n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return upcastType})),n.d(t,"b",(function(){return sumOutType})),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(i||(i={}));const u={float32:o,int32:a,bool:s,complex64:i};function upcastType(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function sumOutType(e){return upcastType(e,"int32")}},function(e,t,n){"use strict";n.d(t,"a",(function(){return fill}));var r=n(4),a=n(5);function fill(e,t,n){const s={shape:e,value:t,dtype:n};return r.a.runKernel(a.fb,{},s)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(24),u=n(3),c=n(7);const l=Object(u.b)({conv2d_:function conv2d_(e,t,n,u,l="NHWC",p=[1,1],h){const f=Object(s.a)(e,"x","conv2d","float32"),m=Object(s.a)(t,"filter","conv2d","float32");let b=f,g=!1;3===f.rank&&(g=!0,b=Object(c.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),o.b(4===b.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${b.rank}.`),o.b(4===m.rank,()=>"Error in conv2d: filter must be rank 4, but got rank "+m.rank+"."),i.a("conv2d",u,h);const y="NHWC"===l?b.shape[3]:b.shape[1];o.b(y===m.shape[2],()=>`Error in conv2d: depth of input (${y}) must match input depth for filter ${m.shape[2]}.`),o.b(i.i(n,p),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${p}'`);const x={x:b,filter:m},v={strides:n,pad:u,dataFormat:l,dilations:p,dimRoundingMode:h},O=r.a.runKernel(a.D,x,v);return g?Object(c.a)(O,[O.shape[1],O.shape[2],O.shape[3]]):O}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return zeros}));var r=n(4),a=n(6),s=n(47);function zeros(e,t="float32"){if("complex64"===t){const t=zeros(e,"float32"),n=zeros(e,"float32");return Object(s.a)(t,n)}const n=Object(a.F)(Object(a.O)(e),t);return r.a.makeTensor(n,e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({relu_:function relu_(e){const t={x:Object(s.a)(e,"x","relu")};return r.a.runKernel(a.oc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return bincountImpl})),n.d(t,"b",(function(){return bincountReduceImpl}));var r=n(0);function bincountImpl(e,t,n,a,s){const o=r.util.sizeFromShape(a),i=r.util.makeZerosTypedArray(s,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=s||(i[r]+=o>0?t[n]:1)}return i}function bincountReduceImpl(e,t,n,a=!1){const s=e.shape[0],o=e.shape[1],i=Object(r.buffer)([s,n],t.dtype);for(let r=0;r<s;r++)for(let s=0;s<o;s++){const o=e.get(r,s);if(o<0)throw new Error("Input x must be non-negative!");o>=n||(a?i.set(1,r,o):t.size>0?i.set(i.get(r,o)+t.get(r,s),r,o):i.set(i.get(r,o)+1,r,o))}return i}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return c}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e-t),i=Object(s.b)((e,t,n,r)=>({real:e-n,imag:t-r})),u=Object(s.a)(r.Sub,o,i),c={kernelName:r.Sub,backendName:"cpu",kernelFunc:u}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(7);var u=n(3);const c=Object(u.b)({batchNorm_:function batchNorm_(e,t,n,u,c,l){null==l&&(l=.001);const p=Object(s.a)(e,"x","batchNorm"),h=Object(s.a)(t,"mean","batchNorm"),f=Object(s.a)(n,"variance","batchNorm");let m,b;null!=c&&(m=Object(s.a)(c,"scale","batchNorm")),null!=u&&(b=Object(s.a)(u,"offset","batchNorm")),o.b(h.rank===f.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),o.b(null==b||h.rank===b.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),o.b(null==m||h.rank===m.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const g={x:function xAs4D(e){let t;return t=0===e.rank||1===e.rank?Object(i.a)(e,[1,1,1,e.size]):2===e.rank?Object(i.a)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Object(i.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(p),scale:m,offset:b,mean:h,variance:f},y={varianceEpsilon:l},x=r.a.runKernel(a.kb,g,y);return Object(i.a)(x,p.shape)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({tile_:function tile_(e,t){const n=Object(s.a)(e,"x","tile","string_or_numeric");o.b(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const i={x:n},u={reps:t};return r.a.runKernel(a.cd,i,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return MPRandGauss})),n.d(t,"b",(function(){return RandGamma})),n.d(t,"c",(function(){return UniformRandom}));var r=n(109);n(108);class MPRandGauss{constructor(e,t,n,a,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=a,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const o=s||Math.random();this.random=r.alea(o.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class RandGamma{constructor(e,t,n,a){this.alpha=e,this.beta=1/t,this.dtype=n;const s=a||Math.random();this.randu=r.alea(s.toString()),this.randn=new MPRandGauss(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class UniformRandom{constructor(e=0,t=1,n,a){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==a&&(a=Math.random()),"number"==typeof a&&(a=a.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=r.alea(a)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return range}));var r=n(4),a=n(5);function range(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const o={start:e,stop:t,step:n,dtype:s};return r.a.runKernel(a.kc,{},o)}},function(e,t,n){"use strict";n.d(t,"c",(function(){return registerOp})),n.d(t,"b",(function(){return getRegisteredOp})),n.d(t,"a",(function(){return deregisterOp}));const r={};function registerOp(e,t){const n={tfOpName:e,category:"custom",inputs:[],attrs:[],customExecutor:t};r[e]=n}function getRegisteredOp(e){return r[e]}function deregisterOp(e){delete r[e]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({greater_:function greater_(e,t){let n=Object(o.a)(e,"a","greater","string_or_numeric"),u=Object(o.a)(t,"b","greater","string_or_numeric");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.pb,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(20),i=n(3);const u=Object(i.b)({logicalAnd_:function logicalAnd_(e,t){const n=Object(s.a)(e,"a","logicalAnd","bool"),i=Object(s.a)(t,"b","logicalAnd","bool");Object(o.assertAndGetBroadcastShape)(n.shape,i.shape);const u={a:n,b:i};return r.a.runKernel(a.Gb,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({mean_:function mean_(e,t=null,n=!1){const o={x:Object(s.a)(e,"x","mean")},i={axis:t,keepDims:n};return r.a.runKernel(a.Qb,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({real_:function real_(e){const t={input:Object(s.a)(e,"input","real")};return r.a.runKernel(a.lc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(6),o=n(3);const i=Object(o.b)({ifft_:function ifft_(e){Object(s.b)("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return r.a.runKernel(a.rb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({transpose_:function transpose_(e,t){const n=Object(s.a)(e,"x","transpose");if(null==t&&(t=n.shape.map((e,t)=>t).reverse()),o.b(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${t}.`),t.forEach(e=>{o.b(e>=0&&e<n.rank,()=>"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+t)}),n.rank<=1)return n.clone();const i={x:n},u={perm:t};return r.a.runKernel(a.fd,i,u)}})},function(e,t,n){"use strict";(function(e,r){let a;function getGlobalNamespace(){if(null==a){let t;if("undefined"!=typeof window)t=window;else if(void 0!==e)t=e;else if(void 0!==r)t=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}a=t}return a}function getGlobal(e,t){const n=function getGlobalMap(){const e=getGlobalNamespace();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,"b",(function(){return getGlobalNamespace})),n.d(t,"a",(function(){return getGlobal}))}).call(this,n(116),n(117))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){(function(t){e.exports=t}).call(this,{})},function(e,t,n){"use strict";n.r(t),n.d(t,"validateUpdateShape",(function(){return validateUpdateShape})),n.d(t,"validateInput",(function(){return validateInput})),n.d(t,"calculateShapes",(function(){return calculateShapes}));var r=n(6);function validateUpdateShape(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+`, indices.shape: ${t.shape}, shape: ${e}`+`, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+" Output shape length < "+(r+(n.rank-a)));if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function validateInput(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+t.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===t.size)throw new Error("Indices specified for empty output. indices shape: "+t.shape);if(0===e.size)throw new Error("Updates specified for empty output. updates shape: "+e.shape)}validateUpdateShape(n,t,e)}function calculateShapes(e,t,n){const a=t.shape.length,s=a>1?t.shape[a-1]:1,o=n.length;let i=1;for(let e=s;e<o;++e)i*=n[e];const u=s<1?1:s;return{sliceRank:s,numUpdates:Object(r.O)(t.shape)/u,sliceSize:i,strides:[...Object(r.j)(n.slice(0,s)),1],outputSize:Object(r.O)(n)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(24),u=n(3),c=n(7);const l=Object(u.b)({depthwiseConv2d_:function depthwiseConv2d_(e,t,n,u,l="NHWC",p=[1,1],h){const f=Object(s.a)(e,"x","depthwiseConv2d","float32"),m=Object(s.a)(t,"filter","depthwiseConv2d","float32");let b=f,g=!1;3===f.rank&&(g=!0,b=Object(c.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]])),o.b(4===b.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`),o.b(4===m.rank,()=>"Error in depthwiseConv2d: filter must be rank 4, but got rank "+m.rank+"."),o.b(b.shape[3]===m.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`),i.a("depthwiseConv2d",u,h);const y={x:b,filter:m},x={strides:n,pad:u,dataFormat:l,dilations:p,dimRoundingMode:h},v=r.a.runKernel(a.P,y,x);return g?Object(c.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({imag_:function imag_(e){const t={input:Object(s.a)(e,"input","imag")};return r.a.runKernel(a.tb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({lessEqual_:function lessEqual_(e,t){let n=Object(o.a)(e,"a","lessEqual","string_or_numeric"),u=Object(o.a)(t,"b","lessEqual","string_or_numeric");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.Bb,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(6),o=n(3);const i=Object(o.b)({fft_:function fft_(e){Object(s.b)("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return r.a.runKernel(a.eb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return b}));var r=n(6),a=n(47),s=n(31),o=n(96),i=n(3),u=n(88),c=n(7),l=n(26),p=n(69),h=n(76),f=n(34),m=n(98);const b=Object(i.b)({rfft_:function rfft_(e,t){Object(r.b)("float32"===e.dtype,()=>"The dtype for rfft() must be real value but got "+e.dtype);let n=e.shape[e.shape.length-1];const i=e.size/n;let b;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,b=Object(l.a)(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,b=Object(s.a)([e,Object(h.a)(r)],e.shape.length-1),n=t}else b=e;const g=Object(f.a)(b),y=Object(c.a)(Object(a.a)(b,g),[i,n]),x=Object(m.a)(y),v=Math.floor(n/2)+1,O=Object(u.a)(x),k=Object(o.a)(x),w=Object(p.a)(O,[v,n-v],O.shape.length-1),I=Object(p.a)(k,[v,n-v],k.shape.length-1),S=b.shape.slice();return S[b.shape.length-1]=v,Object(c.a)(Object(a.a)(w[0],I[0]),S)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(2),a=n(6),s=n(3),o=n(7);const i=Object(s.b)({squeeze_:function squeeze_(e,t){const n=Object(r.a)(e,"x","squeeze");return Object(o.a)(n,Object(a.Q)(n.shape,t).newShape)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({unstack_:function unstack_(e,t=0){const n=Object(s.a)(e,"x","unstack","string_or_numeric");o.b(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);const i={value:n},u={axis:t};return r.a.runKernel(a.hd,i,u)}})},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e===t?1:0),i=Object(s.a)(r.Equal,o,null,"bool"),u={kernelName:r.Equal,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>Math.exp(e)),i=Object(s.b)(r.Exp,o,"float32"),u={kernelName:r.Exp,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return transposeImpl}));var r=n(0);function transposeImpl(e,t,n,a,s){const o=t.length,i=r.util.sizeFromShape(t),u=r.util.computeStrides(t),c=r.util.computeStrides(s),l=r.util.getTypedArrayFromDType(n,r.util.sizeFromShape(s));for(let t=0;t<i;++t){const n=r.util.indexToLoc(t,o,u),s=new Array(n.length);for(let e=0;e<s.length;e++)s[e]=n[a[e]];l[r.util.locToIndex(s,o,c)]=e[t]}return l}},function(e,t,n){"use strict";n.d(t,"c",(function(){return o})),n.d(t,"a",(function(){return i})),n.d(t,"b",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>1/(1+Math.exp(-e))),i=Object(s.a)(r.Sigmoid,e=>1/(1+Math.exp(-e))),u={kernelName:r.Sigmoid,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return sparseSegmentReductionImpl}));var r=n(0);function sparseSegmentReductionImpl(e,t,n,a,s,o=!1,i=0){const u=a.length,c=[t[0],e.length/t[0]],l=c[1],p=u>0?s[u-1]+1:0;if(p<0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=p;const f=h.reduce((e,t)=>e*t,1),m=r.util.getArrayFromDType(n,f);if(0===u)return p>0&&m.fill(i),[m,h];if(p<=0)throw new Error(r.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let b=0,g=1,y=0,x=s[b];for(;;){let t=0;if(g<u){if(t=s[g],x===t){++g;continue}if(x>=t)throw new Error(r.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(x<0||x>=p)throw new Error(r.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(x,p));x>y&&m.fill(i,y*l,x*l);for(let t=b;t<g;++t){const n=a[t];if(n<0||n>=c[0])throw new Error(r.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(t,a[t],c[0]));for(let t=0;t<l;t++)m[x*l+t]+=e[n*l+t]}if(o)for(let e=0;e<l;e++)m[x*l+e]/=g-b;if(b=g,++g,y=x+1,x=t,g>u)break}return y<p&&m.fill(i,y*l,p*l),[m,h]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(53),i=n(3),u=n(7);const c=Object(i.b)({broadcastTo_:function broadcastTo_(e,t){let n=Object(s.a)(e,"broadcastTo","x");const i=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Object(u.a)(n,e)}const c=n.shape,l=Array.from(t);for(let e=t.length-1;e>=0;e--)if(c[e]===t[e])l[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${i}] cannot be broadcast to [${t}].`);if(0===l.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return Object(o.a)(n);const p={x:n},h={reps:l};return r.a.runKernel(a.cd,p,h)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"TEST_EPSILON_FLOAT16",(function(){return i})),n.d(t,"expectArraysClose",(function(){return expectArraysClose})),n.d(t,"testEpsilon",(function(){return testEpsilon})),n.d(t,"expectPromiseToFail",(function(){return expectPromiseToFail})),n.d(t,"expectArraysEqual",(function(){return expectArraysEqual})),n.d(t,"expectNumbersClose",(function(){return expectNumbersClose})),n.d(t,"expectValuesInRange",(function(){return expectValuesInRange})),n.d(t,"expectArrayBuffersEqual",(function(){return expectArrayBuffersEqual})),n.d(t,"encodeStrings",(function(){return encodeStrings}));var r=n(4),a=n(2),s=n(6),o=n(8);const i=.1;function expectArraysClose(e,t,n){return null==n&&(n=testEpsilon()),expectArraysPredicate(e,t,(e,t)=>areClose(e,t,n))}function testEpsilon(){return 32===r.a.backend.floatPrecision()?.001:i}function expectArraysPredicate(e,t,n){let r=!0;if((Object(s.A)(e)||Object(s.A)(t))&&(r=!1),Object(s.A)(e)&&Object(s.A)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: `+r)}if(Array.isArray(e)&&Array.isArray(t)){const n=Object(a.c)(e),r=Object(a.c)(t);if(!Object(s.a)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const o=Object(s.A)(e)?e:Object(s.m)(e),i=Object(s.A)(t)?t:Object(s.m)(t);if(o.length!==i.length)throw new Error(`Arrays have different lengths actual: ${o.length} vs expected: ${i.length}.\nActual:   ${o}.\nExpected: ${i}.`);for(let e=0;e<i.length;++e){const t=o[e],r=i[e];if(!n(t,r))throw new Error(`Arrays differ: actual[${e}] = ${t}, expected[${e}] = ${r}.\nActual:   ${o}.\nExpected: ${i}.`)}}function expectPromiseToFail(e,t){e().then(()=>t.fail(),()=>t())}function expectArraysEqual(e,t){const n="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Object(s.z)(e)||Object(s.z)(e[0])||Object(s.z)(t)||Object(s.z)(t[0])?expectArraysPredicate(e,n,(e,t)=>e==t):expectArraysPredicate(e,t,(e,t)=>areClose(e,t,0))}function expectNumbersClose(e,t,n){if(null==n&&(n=testEpsilon()),!areClose(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function areClose(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function expectValuesInRange(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function expectArrayBuffersEqual(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let e=0;e<r.length;e++)if(n[e]!==r[e])throw new Error(`Expected ArrayBuffer value at ${e} to be ${r[e]} but got ${n[e]} instead`)}function encodeStrings(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?encodeStrings(n):e[t]=Object(o.encodeString)(n)}return e}},function(e,t,n){var r=n(272),a=n(273),s=n(274),o=n(275),i=n(276),u=n(277),c=n(278);c.alea=r,c.xor128=a,c.xorwow=s,c.xorshift7=o,c.xor4096=i,c.tychei=u,e.exports=c},function(e,t,n){"use strict";(function(e){n(4);var t=n(119),r=n(13);const a=Object(r.c)();a.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),a.registerFlag("IS_BROWSER",()=>t.isBrowser()),a.registerFlag("IS_NODE",()=>void 0!==e&&void 0!==e.versions&&void 0!==e.versions.node),a.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),a.registerFlag("PROD",()=>!1),a.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>a.getBool("DEBUG")),a.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),a.registerFlag("IS_TEST",()=>!1),a.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),a.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1)}).call(this,n(117))},function(e,t,n){"use strict";n.d(t,"a",(function(){return DataStorage})),n.d(t,"b",(function(){return KernelBackend}));class DataStorage{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class KernelBackend{refCount(e){return notYetImplemented("refCount")}incRef(e){return notYetImplemented("incRef")}timerAvailable(){return!0}time(e){return notYetImplemented("time")}read(e){return notYetImplemented("read")}readSync(e){return notYetImplemented("readSync")}readToGPU(e,t){return notYetImplemented("readToGPU")}numDataIds(){return notYetImplemented("numDataIds")}disposeData(e,t){return notYetImplemented("disposeData")}write(e,t,n){return notYetImplemented("write")}move(e,t,n,r,a){return notYetImplemented("move")}memory(){return notYetImplemented("memory")}floatPrecision(){return notYetImplemented("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return notYetImplemented("dispose")}}function notYetImplemented(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({tanh_:function tanh_(e){const t={x:Object(s.a)(e,"x","tanh","float32")};return r.a.runKernel(a.bd,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({min_:function min_(e,t=null,n=!1){const o={x:Object(s.a)(e,"x","min")},i={axis:t,keepDims:n};return r.a.runKernel(a.Rb,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({oneHot_:function oneHot_(e,t,n=1,o=0){if(t<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+t);const i={indices:Object(s.a)(e,"indices","oneHot","int32")},u={depth:t,onValue:n,offValue:o};return r.a.runKernel(a.cc,i,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));const r={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){var n,r,a=e.exports={};function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(e){if(n===setTimeout)return setTimeout(e,0);if((n===defaultSetTimout||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(e){n=defaultSetTimout}try{r="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(e){r=defaultClearTimeout}}();var s,o=[],i=!1,u=-1;function cleanUpNextTick(){i&&s&&(i=!1,s.length?o=s.concat(o):u=-1,o.length&&drainQueue())}function drainQueue(){if(!i){var e=runTimeout(cleanUpNextTick);i=!0;for(var t=o.length;t;){for(s=o,o=[];++u<t;)s&&s[u].run();u=-1,t=o.length}s=null,i=!1,function runClearTimeout(e){if(r===clearTimeout)return clearTimeout(e);if((r===defaultClearTimeout||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{return r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function Item(e,t){this.fun=e,this.array=t}function noop(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];o.push(new Item(e,t)),1!==o.length||i||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=noop,a.addListener=noop,a.once=noop,a.off=noop,a.removeListener=noop,a.removeAllListeners=noop,a.emit=noop,a.prependListener=noop,a.prependOnceListener=noop,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,n){"use strict";n.d(t,"b",(function(){return a.a})),n.d(t,"c",(function(){return s.a})),n.d(t,"d",(function(){return o.a})),n.d(t,"e",(function(){return i.a})),n.d(t,"f",(function(){return u.a})),n.d(t,"g",(function(){return c.a})),n.d(t,"h",(function(){return l.a})),n.d(t,"i",(function(){return p.a})),n.d(t,"j",(function(){return h.a})),n.d(t,"k",(function(){return f.a})),n.d(t,"l",(function(){return m.a})),n.d(t,"m",(function(){return b.a})),n.d(t,"n",(function(){return g.a})),n.d(t,"o",(function(){return y.a})),n.d(t,"p",(function(){return x.a})),n.d(t,"q",(function(){return v.a})),n.d(t,"r",(function(){return C})),n.d(t,"w",(function(){return j.a})),n.d(t,"s",(function(){return E.a})),n.d(t,"t",(function(){return $})),n.d(t,"u",(function(){return R})),n.d(t,"v",(function(){return F})),n.d(t,"x",(function(){return D.a})),n.d(t,"z",(function(){return M.a})),n.d(t,"A",(function(){return P.a})),n.d(t,"B",(function(){return B.a})),n.d(t,"C",(function(){return L.a})),n.d(t,"D",(function(){return z.a})),n.d(t,"E",(function(){return U.a})),n.d(t,"F",(function(){return V.a})),n.d(t,"G",(function(){return W.a})),n.d(t,"H",(function(){return k.a})),n.d(t,"I",(function(){return G})),n.d(t,"J",(function(){return H})),n.d(t,"K",(function(){return q})),n.d(t,"L",(function(){return K})),n.d(t,"M",(function(){return X.a})),n.d(t,"N",(function(){return Y.a})),n.d(t,"O",(function(){return Q.a})),n.d(t,"P",(function(){return Z.a})),n.d(t,"Q",(function(){return re})),n.d(t,"R",(function(){return ae.a})),n.d(t,"S",(function(){return se.a})),n.d(t,"U",(function(){return oe.a})),n.d(t,"V",(function(){return ie.a})),n.d(t,"W",(function(){return ue.a})),n.d(t,"X",(function(){return ce.a})),n.d(t,"Y",(function(){return le})),n.d(t,"Z",(function(){return de.a})),n.d(t,"ab",(function(){return pe.a})),n.d(t,"bb",(function(){return he.a})),n.d(t,"cb",(function(){return fe})),n.d(t,"eb",(function(){return me.a})),n.d(t,"fb",(function(){return be.a})),n.d(t,"hb",(function(){return ge.a})),n.d(t,"ib",(function(){return ye.a})),n.d(t,"jb",(function(){return xe.a})),n.d(t,"kb",(function(){return ve.a})),n.d(t,"lb",(function(){return Oe.a})),n.d(t,"mb",(function(){return we})),n.d(t,"ob",(function(){return Ie.a})),n.d(t,"pb",(function(){return Se.a})),n.d(t,"qb",(function(){return Te.a})),n.d(t,"sb",(function(){return Ne.a})),n.d(t,"ub",(function(){return _e.a})),n.d(t,"vb",(function(){return Ce.a})),n.d(t,"xb",(function(){return je.a})),n.d(t,"Bb",(function(){return Ee})),n.d(t,"Cb",(function(){return Ae})),n.d(t,"Db",(function(){return $e.a})),n.d(t,"Eb",(function(){return Re.a})),n.d(t,"Fb",(function(){return Fe.a})),n.d(t,"Gb",(function(){return De.a})),n.d(t,"Ib",(function(){return Me.a})),n.d(t,"Jb",(function(){return Pe.a})),n.d(t,"Kb",(function(){return Be.a})),n.d(t,"Lb",(function(){return Le.a})),n.d(t,"Mb",(function(){return We})),n.d(t,"Nb",(function(){return Ge.a})),n.d(t,"Ob",(function(){return Ye})),n.d(t,"Pb",(function(){return Qe.a})),n.d(t,"Qb",(function(){return Ze.a})),n.d(t,"Rb",(function(){return Je.a})),n.d(t,"Sb",(function(){return tt})),n.d(t,"Ub",(function(){return w.a})),n.d(t,"Vb",(function(){return qe.a})),n.d(t,"Wb",(function(){return nt.a})),n.d(t,"Xb",(function(){return rt.a})),n.d(t,"Yb",(function(){return at.a})),n.d(t,"Zb",(function(){return st.a})),n.d(t,"ac",(function(){return ot.a})),n.d(t,"bc",(function(){return meshgrid})),n.d(t,"cc",(function(){return ct.a})),n.d(t,"dc",(function(){return lt.a})),n.d(t,"ec",(function(){return dt.a})),n.d(t,"fc",(function(){return pt.a})),n.d(t,"gc",(function(){return ft})),n.d(t,"ic",(function(){return I.a})),n.d(t,"jc",(function(){return mt})),n.d(t,"kc",(function(){return bt.a})),n.d(t,"lc",(function(){return Ue.a})),n.d(t,"nc",(function(){return gt.a})),n.d(t,"oc",(function(){return yt.a})),n.d(t,"pc",(function(){return it.a})),n.d(t,"qc",(function(){return xt.a})),n.d(t,"sc",(function(){return vt})),n.d(t,"tc",(function(){return Ot.a})),n.d(t,"uc",(function(){return kt})),n.d(t,"vc",(function(){return wt})),n.d(t,"wc",(function(){return It})),n.d(t,"xc",(function(){return St})),n.d(t,"yc",(function(){return _t})),n.d(t,"zc",(function(){return Ct.a})),n.d(t,"Ac",(function(){return jt.a})),n.d(t,"Bc",(function(){return Et.a})),n.d(t,"Cc",(function(){return At.a})),n.d(t,"Dc",(function(){return $t})),n.d(t,"Ec",(function(){return Ft})),n.d(t,"Fc",(function(){return Dt})),n.d(t,"Gc",(function(){return Mt.a})),n.d(t,"Hc",(function(){return Pt.a})),n.d(t,"Ic",(function(){return Bt.a})),n.d(t,"Jc",(function(){return Lt.a})),n.d(t,"Kc",(function(){return zt.a})),n.d(t,"Lc",(function(){return Ut.a})),n.d(t,"Mc",(function(){return te.a})),n.d(t,"Nc",(function(){return Vt.a})),n.d(t,"Oc",(function(){return Wt})),n.d(t,"Pc",(function(){return Gt})),n.d(t,"Qc",(function(){return Ht})),n.d(t,"Rc",(function(){return qt})),n.d(t,"Tc",(function(){return Kt.a})),n.d(t,"Uc",(function(){return Xt.a})),n.d(t,"Vc",(function(){return Yt.a})),n.d(t,"Xc",(function(){return Qt.a})),n.d(t,"Yc",(function(){return Zt})),n.d(t,"Zc",(function(){return Jt.a})),n.d(t,"ad",(function(){return T.a})),n.d(t,"bd",(function(){return en.a})),n.d(t,"dd",(function(){return tn.a})),n.d(t,"ed",(function(){return nn.a})),n.d(t,"fd",(function(){return N.a})),n.d(t,"gd",(function(){return rn})),n.d(t,"hd",(function(){return an})),n.d(t,"id",(function(){return sn})),n.d(t,"jd",(function(){return on})),n.d(t,"kd",(function(){return un.a})),n.d(t,"ld",(function(){return Ve.a})),n.d(t,"md",(function(){return Nt.a})),n.d(t,"nb",(function(){return cn.a})),n.d(t,"wb",(function(){return ln.a})),n.d(t,"Ab",(function(){return dn.a})),n.d(t,"Sc",(function(){return pn.a})),n.d(t,"qd",(function(){return hn.a})),n.d(t,"rd",(function(){return fn.a})),n.d(t,"sd",(function(){return ht.a})),n.d(t,"td",(function(){return mn.a})),n.d(t,"ud",(function(){return bn.a})),n.d(t,"vd",(function(){return gn.a})),n.d(t,"wd",(function(){return yn.a})),n.d(t,"xd",(function(){return xn.a})),n.d(t,"zd",(function(){return Ke.a})),n.d(t,"Ad",(function(){return Xe.a})),n.d(t,"Bd",(function(){return vn.a})),n.d(t,"Cd",(function(){return _.a})),n.d(t,"Dd",(function(){return On.a})),n.d(t,"Ed",(function(){return kn.a})),n.d(t,"Fd",(function(){return tensor2d})),n.d(t,"Gd",(function(){return In.a})),n.d(t,"Hd",(function(){return tensor4d})),n.d(t,"Id",(function(){return tensor5d})),n.d(t,"Jd",(function(){return tensor6d})),n.d(t,"Kd",(function(){return ke.a})),n.d(t,"Ld",(function(){return Sn.a})),n.d(t,"Nd",(function(){return Tn.a})),n.d(t,"Od",(function(){return Nn.a})),n.d(t,"Pd",(function(){return _n})),n.d(t,"Qd",(function(){return Cn.a})),n.d(t,"Rd",(function(){return variable})),n.d(t,"Sd",(function(){return jn.a})),n.d(t,"Td",(function(){return En.a})),n.d(t,"Ud",(function(){return An.a})),n.d(t,"Vd",(function(){return $n.a})),n.d(t,"y",(function(){return Rn})),n.d(t,"Md",(function(){return Fn.a})),n.d(t,"mc",(function(){return Dn})),n.d(t,"hc",(function(){return Pn})),n.d(t,"Wc",(function(){return Bn.a})),n.d(t,"od",(function(){return Ln.a})),n.d(t,"tb",(function(){return zn.a})),n.d(t,"db",(function(){return Un})),n.d(t,"gb",(function(){return enclosingPowerOfTwo})),n.d(t,"T",(function(){return cosineWindow})),n.d(t,"zb",(function(){return Vn})),n.d(t,"rc",(function(){return S.b})),n.d(t,"a",(function(){return S.a})),n.d(t,"yb",(function(){return zr})),n.d(t,"Hb",(function(){return Ur})),n.d(t,"Tb",(function(){return Vr})),n.d(t,"pd",(function(){return Br})),n.d(t,"rb",(function(){return r})),n.d(t,"cd",(function(){return Lr})),n.d(t,"nd",(function(){return Wr})),n.d(t,"yd",(function(){return Gr}));var r={};n.r(r),n.d(r,"conv2d",(function(){return qn})),n.d(r,"depthwiseConv2d",(function(){return Yn})),n.d(r,"matMul",(function(){return Qn}));var a=n(37),s=n(187),o=n(188),i=n(12),u=n(189),c=n(190),l=n(191),p=n(192),h=n(193),f=n(194),m=n(195),b=n(196),g=n(197),y=n(198),x=n(123),v=n(199),O=n(2),k=n(31),w=n(25),I=n(10),S=n(3),T=n(65),N=n(26),_=n(112);const C=Object(S.b)({basicLSTMCell_:function basicLSTMCell_(e,t,n,r,a,s){const o=Object(O.a)(e,"forgetBias","basicLSTMCell"),u=Object(O.a)(t,"lstmKernel","basicLSTMCell"),c=Object(O.a)(n,"lstmBias","basicLSTMCell"),l=Object(O.a)(r,"data","basicLSTMCell"),p=Object(O.a)(a,"c","basicLSTMCell"),h=Object(O.a)(s,"h","basicLSTMCell"),f=Object(k.a)([l,h],1),m=Object(w.a)(f,u),b=Object(i.a)(m,c),g=b.shape[0],y=b.shape[1]/4,x=[g,y],v=Object(N.a)(b,[0,0],x),S=Object(N.a)(b,[0,y],x),C=Object(N.a)(b,[0,2*y],x),j=Object(N.a)(b,[0,3*y],x),E=Object(i.a)(Object(I.a)(Object(T.a)(v),Object(_.a)(S)),Object(I.a)(p,Object(T.a)(Object(i.a)(o,C))));return[E,Object(I.a)(Object(_.a)(E),Object(T.a)(j))]}});var j=n(124),E=n(80),A=n(6);const $=Object(S.b)({batchNorm2d_:function batchNorm2d_(e,t,n,r,a,s){const o=Object(O.a)(e,"x","batchNorm"),i=Object(O.a)(t,"mean","batchNorm"),u=Object(O.a)(n,"variance","batchNorm");let c,l;return null!=a&&(c=Object(O.a)(a,"scale","batchNorm")),null!=r&&(l=Object(O.a)(r,"offset","batchNorm")),A.b(2===o.rank,()=>"Error in batchNorm2D: x must be rank 2 but got rank "+o.rank+"."),A.b(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),A.b(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&A.b(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`),null!=l&&A.b(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`),Object(E.a)(o,i,u,l,c,s)}});const R=Object(S.b)({batchNorm3d_:function batchNorm3d_(e,t,n,r,a,s){const o=Object(O.a)(e,"x","batchNorm"),i=Object(O.a)(t,"mean","batchNorm"),u=Object(O.a)(n,"variance","batchNorm");let c,l;return null!=a&&(c=Object(O.a)(a,"scale","batchNorm")),null!=r&&(l=Object(O.a)(r,"offset","batchNorm")),A.b(3===o.rank,()=>"Error in batchNorm3D: x must be rank 3 but got rank "+o.rank+"."),A.b(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),A.b(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&A.b(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`),null!=l&&A.b(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`),Object(E.a)(o,i,u,l,c,s)}});const F=Object(S.b)({batchNorm4d_:function batchNorm4d_(e,t,n,r,a,s){const o=Object(O.a)(e,"x","batchNorm"),i=Object(O.a)(t,"mean","batchNorm"),u=Object(O.a)(n,"variance","batchNorm");let c,l;return null!=a&&(c=Object(O.a)(a,"scale","batchNorm")),null!=r&&(l=Object(O.a)(r,"offset","batchNorm")),A.b(4===o.rank,()=>"Error in batchNorm4D: x must be rank 4 but got rank "+o.rank+"."),A.b(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),A.b(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&A.b(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`),null!=l&&A.b(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`),Object(E.a)(o,i,u,l,c,s)}});var D=n(125),M=n(200),P=n(107),B=n(40),L=n(23),z=n(201),U=n(202),V=n(53),W=n(47);const G=Object(S.b)({concat1d_:function concat1d_(e){return Object(k.a)(e,0)}});const H=Object(S.b)({concat2d_:function concat2d_(e,t){return Object(k.a)(e,t)}});const q=Object(S.b)({concat3d_:function concat3d_(e,t){return Object(k.a)(e,t)}});const K=Object(S.b)({concat4d_:function concat4d_(e,t){return Object(k.a)(e,t)}});var X=n(203),Y=n(75),Q=n(204),Z=n(205),J=n(4),ee=n(5),te=n(7);const ne=Object(S.b)({conv3DBackpropInput_:function conv3DBackpropInput_(e,t,n,r,a){A.b(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let s=e,o=t,i=!1;4===t.rank&&(i=!0,o=Object(te.a)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const u=s[4],c=o.shape[4];A.b(5===s.length,()=>"Error in conv3dDerInput: inShape must be length 5, but got length "+s.length+"."),A.b(5===o.rank,()=>"Error in conv3dDerInput: dy must be rank 5, but got rank "+o.rank),A.b(5===n.rank,()=>"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank),A.b(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),A.b(c===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[4]}.`);const l={dy:o,filter:n},p={pad:a,strides:r,inputShape:s},h=J.a.runKernel(ee.I,l,p);return i?Object(te.a)(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});const re=Object(S.b)({conv3dTranspose_:function conv3dTranspose_(e,t,n,r,a){const s=Object(O.a)(e,"x","conv3dTranspose"),o=Object(O.a)(t,"filter","conv3dTranspose");return ne(n,s,o,r,a)}});var ae=n(206),se=n(207),oe=n(208),ie=n(209),ue=n(210),ce=n(95);const le=Object(S.b)({diag_:function diag_(e){const t={x:Object(O.a)(e,"x","diag")};return J.a.runKernel(ee.S,t)}});var de=n(211),pe=n(21),he=n(212);const fe=Object(S.b)({dot_:function dot_(e,t){const n=Object(O.a)(e,"t1","dot"),r=Object(O.a)(t,"t2","dot");A.b(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(A.b(a===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`),1===n.rank&&1===r.rank){const e=Object(te.a)(n,[1,-1]),t=Object(te.a)(r,[-1,1]),a=Object(w.a)(e,t);return Object(te.a)(a,[])}if(1===n.rank&&2===r.rank){const e=Object(te.a)(n,[1,-1]),t=Object(te.a)(r,[r.shape[0],r.shape[1]]),a=Object(w.a)(e,t);return Object(te.a)(a,[a.size])}if(2===n.rank&&1===r.rank){const e=Object(te.a)(r,[-1,1]),t=Object(w.a)(n,e);return Object(te.a)(t,[t.size])}{const e=Object(te.a)(r,[r.shape[0],r.shape[1]]);return Object(w.a)(n,e)}}});var me=n(213),be=n(127),ge=n(126),ye=n(214),xe=n(55),ve=n(72),Oe=n(215),ke=n(81);const we=Object(S.b)({eye_:function eye_(e,t,n,r="float32"){null==t&&(t=e);const a=Object(B.a)([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=Object(te.a)(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Object(ke.a)(Object(ve.a)(o,0),[n[0],1,1]);if(2===n.length)return Object(ke.a)(Object(ve.a)(Object(ve.a)(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Object(ke.a)(Object(ve.a)(Object(ve.a)(Object(ve.a)(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var Ie=n(74),Se=n(128),Te=n(121),Ne=n(129),_e=n(85),Ce=n(130),je=n(96);const Ee=Object(S.b)({isFinite_:function isFinite_(e){const t={x:Object(O.a)(e,"x","isFinite")};return J.a.runKernel(ee.ub,t)}});const Ae=Object(S.b)({isInf_:function isInf_(e){const t={x:Object(O.a)(e,"x","isInf")};return J.a.runKernel(ee.vb,t)}});var $e=n(216),Re=n(131),Fe=n(217),De=n(97),Me=n(218),Pe=n(219),Be=n(68),Le=n(132),ze=n(30),Ue=n(45),Ve=n(133);const We=Object(S.b)({logSigmoid_:function logSigmoid_(e){const t=Object(O.a)(e,"x","logSigmoid");return Object(ze.a)(e=>({value:Object(Ue.a)(Object(Ve.a)(Object(Ue.a)(e))),gradFunc:t=>Object(I.a)(t,Object(T.a)(Object(Ue.a)(e)))}))(t)}});var Ge=n(220),He=n(62),qe=n(66),Ke=n(14),Xe=n(27);const Ye=Object(S.b)({logSumExp_:function logSumExp_(e,t=null,n=!1){const r=Object(O.a)(e,"x","logSumExp"),a=Object(A.I)(t,r.shape),s=Object(qe.a)(r,a,!0),o=Object(Ke.a)(r,s),u=Object(xe.a)(o),c=Object(Xe.a)(u,a),l=Object(Be.a)(c),p=Object(i.a)(Object(te.a)(s,l.shape),l);if(n){const e=Object(He.e)(p.shape,a);return Object(te.a)(p,e)}return p}});var Qe=n(86),Ze=n(134),Je=n(135),et=n(20);const tt=Object(S.b)({logicalXor_:function logicalXor_(e,t){const n=Object(O.a)(e,"a","logicalXor","bool"),r=Object(O.a)(t,"b","logicalXor","bool");return Object(et.assertAndGetBroadcastShape)(n.shape,r.shape),Object(Qe.a)(Object(Je.a)(e,t),Object(Ze.a)(Object(Qe.a)(e,t)))}});var nt=n(136),rt=n(221),at=n(222),st=n(122),ot=n(87),it=n(71),ut=n(22);function meshgrid(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(n+" is not a valid third argument to meshgrid");if(void 0===e)return[];let r=Object(O.a)(e,"x","meshgrid",e instanceof ut.a?e.dtype:"float32");if(void 0===t)return[r];let a=Object(O.a)(t,"y","meshgrid",t instanceof ut.a?t.dtype:"float32");const s=Object(A.O)(r.shape),o=Object(A.O)(a.shape);return"xy"===n?(r=Object(te.a)(r,[1,-1]),a=Object(te.a)(a,[-1,1]),[Object(w.a)(Object(it.a)([o,1],r.dtype),r),Object(w.a)(a,Object(it.a)([1,s],a.dtype))]):(r=Object(te.a)(r,[-1,1]),a=Object(te.a)(a,[1,-1]),[Object(w.a)(r,Object(it.a)([1,o],r.dtype)),Object(w.a)(Object(it.a)([s,1],a.dtype),a)])}var ct=n(113),lt=n(137),dt=n(223),pt=n(224),ht=n(35);const ft=Object(S.b)({moments_:function moments_(e,t=null,n=!1){e=Object(O.a)(e,"x","moments");const r=Object(A.I)(t,e.shape),a=Object(ot.a)(e,r,n);let s=a.shape;n||(s=Object(He.e)(a.shape,r));const o=Object(ht.a)(Object(Ke.a)(Object(L.a)(e,"float32"),Object(te.a)(a,s)));return{mean:a,variance:Object(ot.a)(o,r,n)}}});const mt=Object(S.b)({multiRNNCell_:function multiRNNCell_(e,t,n,r){const a=Object(O.a)(t,"data","multiRNNCell"),s=Object(O.b)(n,"c","multiRNNCell"),o=Object(O.b)(r,"h","multiRNNCell");let i=a;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const c=[],l=[];for(let e=0;e<u.length;e+=2)c.push(u[e]),l.push(u[e+1]);return[c,l]}});var bt=n(225),gt=n(138),yt=n(114),xt=n(226);const vt=Object(S.b)({outerProduct_:function outerProduct_(e,t){const n=Object(O.a)(e,"v1","outerProduct"),r=Object(O.a)(t,"v2","outerProduct");A.b(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const a=Object(te.a)(n,[-1,1]),s=Object(te.a)(r,[1,-1]);return Object(w.a)(a,s)}});var Ot=n(63);const kt=Object(S.b)({pad1d_:function pad1d_(e,t,n=0){return Object(A.b)(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),Object(Ot.a)(e,[t],n)}});const wt=Object(S.b)({pad2d_:function pad2d_(e,t,n=0){return Object(A.b)(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),Object(Ot.a)(e,t,n)}});const It=Object(S.b)({pad3d_:function pad3d_(e,t,n=0){return Object(A.b)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),Object(Ot.a)(e,t,n)}});const St=Object(S.b)({pad4d_:function pad4d_(e,t,n=0){return Object(A.b)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),Object(Ot.a)(e,t,n)}});var Tt=n(24),Nt=n(139);const _t=Object(S.b)({pool_:function pool_(e,t,n,r,a,s,o){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const i=Object(O.a)(e,"x","maxPool");let u=i,c=!1;3===i.rank&&(c=!0,u=Object(te.a)(i,[1,i.shape[0],i.shape[1],i.shape[2]])),A.b(Tt.i(s,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`);const l=Tt.f(u.shape,t,s,a,r),p=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function withSpaceToBatchBasePaddings(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),a=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],a[t]])}([l.filterHeight,l.filterWidth],p):[[0,0],[0,0]];const f=1===p[0]&&1===p[1],[m,b]=function requiredSpaceToBatchPaddings(e,t,n){const r=n.map(e=>e[0]),a=n.map(e=>e[1]),s=e.concat(r,a),o=t.map((e,t)=>(e-s[t]%e)%e),i=a.map((e,t)=>e+o[t]),u=t.map((e,t)=>[r[t],i[t]]),c=t.map((e,t)=>[0,o[t]]);return[u,c]}([l.inHeight,l.inWidth],p,h),g=f?r:"valid",y=f?u:Object(Nt.a)(u,p,m),v=("avg"===n?()=>Object(x.a)(y,t,s,g,o):()=>Object(nt.a)(y,t,s,g,o))(),k=f?v:Object(j.a)(v,p,b);return c?Object(te.a)(k,[k.shape[1],k.shape[2],k.shape[3]]):k}});var Ct=n(67),jt=n(140),Et=n(120),At=n(227);const $t=Object(S.b)({rand_:function rand_(e,t,n){const r=Object(A.O)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return J.a.makeTensor(a,e,n)}});var Rt=n(82);const Ft=Object(S.b)({randomGamma_:function randomGamma_(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);const s=new Rt.b(t,n,r,a),o=Object(B.a)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});const Dt=Object(S.b)({randomNormal_:function randomNormal_(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);const s=new Rt.a(t,n,r,!1,a),o=Object(B.a)(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}});var Mt=n(141),Pt=n(83),Bt=n(88),Lt=n(228),zt=n(77),Ut=n(142),Vt=n(48);const Wt=Object(S.b)({reverse1d_:function reverse1d_(e){const t=Object(O.a)(e,"x","reverse");return A.b(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),Object(Vt.a)(t,0)}});const Gt=Object(S.b)({reverse2d_:function reverse2d_(e,t){const n=Object(O.a)(e,"x","reverse");return A.b(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),Object(Vt.a)(n,t)}});const Ht=Object(S.b)({reverse3d_:function reverse3d_(e,t){const n=Object(O.a)(e,"x","reverse");return A.b(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),Object(Vt.a)(n,t)}});const qt=Object(S.b)({reverse4d_:function reverse4d_(e,t){const n=Object(O.a)(e,"x","reverse");return A.b(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),Object(Vt.a)(n,t)}});var Kt=n(143),Xt=n(229),Yt=n(16),Qt=n(230);const Zt=Object(S.b)({separableConv2d_:function separableConv2d_(e,t,n,r,a,s=[1,1],o="NHWC"){const i=Object(O.a)(e,"x","separableConv2d"),u=Object(O.a)(t,"depthwiseFilter","separableConv2d"),c=Object(O.a)(n,"pointwiseFilter","separableConv2d");let l=i,p=!1;if(3===i.rank&&(p=!0,l=Object(te.a)(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");A.b(4===l.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`),A.b(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),A.b(4===c.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),A.b(1===c.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`),A.b(1===c.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`);const h=u.shape[2],f=u.shape[3];A.b(c.shape[2]===h*f,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*f}, but got ${c.shape[2]}.`);const m=Object(ce.a)(l,u,r,a,o,s),b=Object(Y.a)(m,c,1,"valid",o);return p?Object(te.a)(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});var Jt=n(231),en=n(232),tn=n(233),nn=n(234);const rn=Object(S.b)({slice1d_:function slice1d_(e,t,n){const r=Object(O.a)(e,"x","slice1d");return A.b(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),Object(N.a)(r,[t],[n])}});const an=Object(S.b)({slice2d_:function slice2d_(e,t,n){const r=Object(O.a)(e,"x","slice2d");return A.b(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),Object(N.a)(r,t,n)}});const sn=Object(S.b)({slice3d_:function slice3d_(e,t,n){const r=Object(O.a)(e,"x","slice3d");return A.b(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),Object(N.a)(r,t,n)}});const on=Object(S.b)({slice4d_:function slice4d_(e,t,n){const r=Object(O.a)(e,"x","slice4d");return A.b(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),Object(N.a)(r,t,n)}});var un=n(235),cn=n(98),ln=n(89),dn=n(144),pn=n(99),hn=n(69),fn=n(54),mn=n(145),bn=n(100),gn=n(70),yn=n(146),xn=n(236),vn=n(237),On=n(64),kn=n(41),wn=n(42);function tensor2d(e,t,n){if(Object(A.d)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Object(O.c)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Object(wn.a)(e,t,r,n)}var In=n(147);function tensor4d(e,t,n){if(Object(A.d)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Object(O.c)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Object(wn.a)(e,t,r,n)}function tensor5d(e,t,n){if(Object(A.d)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Object(O.c)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Object(wn.a)(e,t,r,n)}function tensor6d(e,t,n){if(Object(A.d)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Object(O.c)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,Object(wn.a)(e,t,r,n)}var Sn=n(238),Tn=n(239),Nn=n(240);const _n=Object(S.b)({unsortedSegmentSum_:function unsortedSegmentSum_(e,t,n){const r=Object(O.a)(e,"x","unsortedSegmentSum"),a=Object(O.a)(t,"segmentIds","unsortedSegmentSum","int32");Object(A.b)(Object(A.v)(n),()=>"numSegments must be of dtype int");const s={x:r,segmentIds:a},o={numSegments:n};return J.a.runKernel(ee.id,s,o)}});var Cn=n(101);function variable(e,t=!0,n,r){return J.a.makeVariable(e,t,n,r)}var jn=n(56),En=n(148),An=n(76),$n=n(34);const Rn=async function booleanMaskAsync_(e,t,n){const r=Object(O.a)(e,"tensor","boolMask"),a=Object(O.a)(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;A.b(o>0,()=>"mask cannot be scalar"),A.e(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+o;e++)u*=i[e];const c=i.slice(0,s).concat([u],i.slice(s+o)),l=Object(te.a)(r,c),p=Object(te.a)(a,[-1]),h=await Object(En.a)(p),f=Object(bn.a)(h,[1]),m=Object(Ne.a)(l,f,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),f.dispose(),l.dispose(),p.dispose(),h.dispose(),m};var Fn=n(90);const Dn=Object(S.b)({norm_:function norm_(e,t="euclidean",n=null,r=!1){const s=function normImpl(e,t,n=null){if(0===e.rank)return Object(a.a)(e);if(1!==e.rank&&null===n)return normImpl(Object(te.a)(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return Object(Xe.a)(Object(a.a)(e),n);if(t===1/0)return Object(qe.a)(Object(a.a)(e),n);if(t===-1/0)return Object(ct.a)(Object(a.a)(e),n);if("euclidean"===t||2===t)return Object(fn.a)(Object(Xe.a)(Object(Ct.a)(Object(a.a)(e),Object(Yt.a)(2,"int32")),n));throw new Error("Error in norm: invalid ord value: "+t)}if(Array.isArray(n)&&2===n.length){if(1===t)return Object(qe.a)(Object(Xe.a)(Object(a.a)(e),n[0]),n[1]-1);if(t===1/0)return Object(qe.a)(Object(Xe.a)(Object(a.a)(e),n[1]),n[0]);if(t===-1/0)return Object(ct.a)(Object(Xe.a)(Object(a.a)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return Object(fn.a)(Object(Xe.a)(Object(ht.a)(e),n));throw new Error("Error in norm: invalid ord value: "+t)}throw new Error("Error in norm: invalid axis: "+n)}(e=Object(O.a)(e,"x","norm"),t,n);let o=s.shape;if(r){const t=Object(A.I)(n,e.shape);o=He.e(s.shape,t)}return Object(te.a)(s,o)}});var Mn=n(15);const Pn=Object(S.b)({movingAverage_:function movingAverage_(e,t,n,r,a=!0){const s=Object(O.a)(e,"v","movingAverage"),o=Object(O.a)(t,"x","movingAverage"),u=Object(O.a)(n,"decay","movingAverage");Object(Mn.assertTypesMatch)(s,o),A.b(A.a(s.shape,o.shape),()=>"Shape mismatch in v and x");const c=Object(Yt.a)(1),l=Object(Ke.a)(c,u);let p=Object(I.a)(Object(Ke.a)(o,s),l);if(a){A.b(null!=r,()=>"When using zeroDebias: true, step is required.");const e=Object(O.a)(r,"step","movingAverage");p=Object(pe.a)(p,Object(Ke.a)(c,Object(Ct.a)(u,e)))}return Object(i.a)(s,p)}});var Bn=n(241),Ln=n(244),zn=n(242);const Un=Object(S.b)({dropout_:function dropout_(e,t,n,r){const a=Object(O.a)(e,"x","dropout");if(A.b("float32"===a.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),A.b(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof ut.a?a.clone():a;const s=function getNoiseShape(e,t){if(null==t)return e.shape.slice();if(A.a(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,u=Object(pe.a)(Object(Se.a)(Object(i.a)(Object(Mt.a)(s,0,1,"float32",r),o)),o);return Object(I.a)(a,u)}});function enclosingPowerOfTwo(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function cosineWindow(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return Object(kn.a)(a,"float32")}const Vn=async function inTopKAsync_(e,t,n=1){const r=Object(O.a)(e,"predictions","inTopK"),a=Object(O.a)(t,"targets","inTopK");Object(A.b)(r.rank>1,()=>"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank),Object(A.b)(r.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`),Object(A.e)(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];Object(A.b)(n>0&&n<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`);const o=await r.data(),i=await a.data(),[u,c]=[o.length/s,s],l=Object(A.o)("bool",u);for(let e=0;e<u;e++){const t=e*c,r=o.subarray(t,t+c),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort((e,t)=>t.value-e.value),l[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){l[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),Object(On.a)(l,a.shape,"bool")};const Wn=Object(S.b)({conv2DBackpropFilter_:function conv2DBackpropFilter_(e,t,n,r,a,s="NHWC",o){let i=e;3===e.rank&&(i=Object(te.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Object(te.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),A.b(4===i.rank,()=>"Error in conv2dDerFilter: input must be rank 4, but got shape "+i.shape+"."),A.b(4===u.rank,()=>"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."),A.b(4===n.length,()=>"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+".");const c="NHWC"===s?i.shape[3]:i.shape[1],l="NHWC"===s?u.shape[3]:u.shape[1];A.b(c===n[2],()=>`Error in conv2dDerFilter: depth of input ${c}) must match input depth in filter (${n[2]}.`),A.b(l===n[3],()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`),Tt.a("conv2dDerFilter",a,o);const p={x:i,dy:u},h={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,filterShape:n};return J.a.runKernel(ee.E,p,h)}});var Gn=n(183),Hn=n(38);const qn=Object(S.b)({fusedConv2d_:function fusedConv2d_({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:u,activation:c="linear",preluActivationWeights:l,leakyreluAlpha:p}){if(c=c||"linear",!1===Object(Hn.d)(J.a.state.gradientDepth,c)){let h=Object(Y.a)(e,t,n,r,a,s,o);return null!=u&&(h=Object(i.a)(h,u)),Object(Hn.a)(h,c,l,p)}const h=Object(O.a)(e,"x","conv2d","float32"),f=Object(O.a)(t,"filter","conv2d","float32");let m=h,b=!1;3===h.rank&&(b=!0,m=Object(te.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),A.b(4===m.rank,()=>"Error in fused conv2d: input must be rank 4, but got rank "+m.rank+"."),A.b(4===f.rank,()=>"Error in fused conv2d: filter must be rank 4, but got rank "+f.rank+"."),Tt.a("fused conv2d",r,o),A.b(m.shape[3]===f.shape[2],()=>`Error in conv2d: depth of input (${m.shape[3]}) must match input depth for filter ${f.shape[2]}.`),A.b(Tt.i(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),A.b("NHWC"===a,()=>`Error in conv2d: got dataFormat of ${a} but only NHWC is currently supported.`);const g=Tt.b(m.shape,f.shape,n,s,r,o);let y,x;null!=u&&(y=Object(O.a)(u,"bias","fused conv2d"),[y]=Object(Mn.makeTypesMatch)(y,h),et.assertAndGetBroadcastShape(g.outShape,y.shape)),null!=l&&(x=Object(O.a)(l,"prelu weights","fused conv2d"));const grad=(e,t)=>{const[a,o,i,u]=t,l=Object(Hn.c)(e,i,c);A.b(Tt.j(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const p=[Object(Gn.a)(o.shape,l,a,n,r),Wn(o,l,a.shape,n,r)];if(null!=u){const e=Object(Hn.b)(u,l);p.push(e)}return p},v={x:m,filter:f,bias:y,preluActivationWeights:x},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:c,leakyreluAlpha:p};if(null==u){return Object(ze.a)((e,t,n)=>{let r=J.a.runKernel(ee.lb,v,k);return n([t,e,r]),b&&(r=Object(te.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:grad}})(m,f)}return Object(ze.a)((e,t,n,r)=>{let a=J.a.runKernel(ee.lb,v,k);return r([t,e,a,n]),b&&(a=Object(te.a)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:grad}})(m,f,y)}});const Kn=Object(S.b)({depthwiseConv2dNativeBackpropFilter_:function depthwiseConv2dNativeBackpropFilter_(e,t,n,r,a,s=[1,1],o){let i=e;3===e.rank&&(i=Object(te.a)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Object(te.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const c={x:i,dy:u},l={strides:r,pad:a,dimRoundingMode:o,dilations:s,filterShape:n};return J.a.runKernel(ee.Q,c,l)}});const Xn=Object(S.b)({depthwiseConv2dNativeBackpropInput_:function depthwiseConv2dNativeBackpropInput_(e,t,n,r,a,s=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Object(te.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const c={dy:i,filter:n},l={strides:r,pad:a,dimRoundingMode:o,dilations:s,inputShape:e},p=J.a.runKernel(ee.R,c,l);return u?Object(te.a)(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});const Yn=Object(S.b)({fusedDepthwiseConv2d_:function fusedDepthwiseConv2d_({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:u,activation:c="linear",preluActivationWeights:l,leakyreluAlpha:p}){if(!1===Object(Hn.d)(J.a.state.gradientDepth,c)){let h=Object(ce.a)(e,t,n,r,a,s,o);return null!=u&&(h=Object(i.a)(h,u)),Object(Hn.a)(h,c,l,p)}const h=Object(O.a)(e,"x","depthwiseConv2d","float32"),f=Object(O.a)(t,"filter","depthwiseConv2d","float32");let m=h,b=!1;3===h.rank&&(b=!0,m=Object(te.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),A.b(4===m.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${m.rank}.`),A.b(4===f.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${f.rank}.`),A.b(m.shape[3]===f.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${m.shape[3]}) must match the inChannels dimension in filter ${f.shape[2]}.`),null==s&&(s=[1,1]),A.b(Tt.i(n,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),Tt.a("fused depthwiseConv2d",r,o);const g=Tt.b(m.shape,f.shape,n,s,r,o,!0);let y,x;null!=u&&(y=Object(O.a)(u,"bias","fused conv2d"),[y]=Object(Mn.makeTypesMatch)(y,h),et.assertAndGetBroadcastShape(g.outShape,y.shape)),null!=l&&(x=Object(O.a)(l,"prelu weights","fused depthwiseConv2d"));const grad=(e,t)=>{A.b(Tt.j(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);const[a,i,u,l]=t,p=Object(Hn.c)(e,u,c),h=Xn(i.shape,p,a,n,r,s,o),f=Kn(i,p,a.shape,n,r,s,o);if(null!=l){return[h,f,Object(Hn.b)(y,p)]}return[h,f]},v={x:m,filter:f,bias:y,preluActivationWeights:x},k={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:c,leakyreluAlpha:p};if(null==u){return Object(ze.a)((e,t,n)=>{let r=J.a.runKernel(ee.mb,v,k);return n([t,e,r]),b&&(r=Object(te.a)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:grad}})(m,f)}return Object(ze.a)((e,t,n,r)=>{let a=J.a.runKernel(ee.mb,v,k);return r([t,e,a,n]),b&&(a=Object(te.a)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:grad}})(m,f,y)}});const Qn=Object(S.b)({fusedMatMul_:function fusedMatMul_({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:u}){if(!1===Object(Hn.d)(J.a.state.gradientDepth,s)){let c=Object(w.a)(e,t,n,r);return null!=a&&(c=Object(i.a)(c,a)),Object(Hn.a)(c,s,o,u)}let c=Object(O.a)(e,"a","fused matMul"),l=Object(O.a)(t,"b","fused matMul");[c,l]=Object(Mn.makeTypesMatch)(c,l);const p=n?c.shape[c.rank-2]:c.shape[c.rank-1],h=r?l.shape[l.rank-1]:l.shape[l.rank-2],f=n?c.shape[c.rank-1]:c.shape[c.rank-2],m=r?l.shape[l.rank-2]:l.shape[l.rank-1],b=c.shape.slice(0,-2),g=l.shape.slice(0,-2),y=A.O(b),x=A.O(g);A.b(p===h,()=>`Error in fused matMul: inner shapes (${p}) and (${h}) of Tensors with shapes ${c.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const v=et.assertAndGetBroadcastShape(c.shape.slice(0,-2),l.shape.slice(0,-2)).concat([f,m]),k=n?Object(te.a)(c,[y,p,f]):Object(te.a)(c,[y,f,p]),I=r?Object(te.a)(l,[x,m,h]):Object(te.a)(l,[x,h,m]);let S,T;null!=a&&(S=Object(O.a)(a,"bias","fused matMul"),[S]=Object(Mn.makeTypesMatch)(S,c),et.assertAndGetBroadcastShape(v,S.shape)),null!=o&&(T=Object(O.a)(o,"prelu weights","fused matMul"));const grad=(e,t)=>{const[o,i,u,c]=t,l=Object(Hn.c)(Object(te.a)(e,u.shape),u,s);let p,h;if(n||r?!n&&r?(p=Object(w.a)(l,i,!1,!1),h=Object(w.a)(l,o,!0,!1)):n&&!r?(p=Object(w.a)(i,l,!1,!0),h=Object(w.a)(o,l,!1,!1)):(p=Object(w.a)(i,l,!0,!0),h=Object(w.a)(l,o,!0,!0)):(p=Object(w.a)(l,i,!1,!0),h=Object(w.a)(o,l,!0,!1)),null!=a){return[p,h,Object(Hn.b)(c,l)]}return[p,h]},N={a:k,b:I,bias:S,preluActivationWeights:T},_={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:u};if(null==a){return Object(ze.a)((e,t,n)=>{const r=J.a.runKernel(ee.kd,N,_);return n([e,t,r]),{value:Object(te.a)(r,v),gradFunc:grad}})(k,I)}return Object(ze.a)((e,t,n,r)=>{const a=J.a.runKernel(ee.kd,N,_);return r([e,t,a,n]),{value:Object(te.a)(a,v),gradFunc:grad}})(k,I,S)}});const Zn=Object(S.b)({hammingWindow_:function hammingWindow_(e){return cosineWindow(e,.54,.46)}});const Jn=Object(S.b)({hannWindow_:function hannWindow_(e){return cosineWindow(e,.5,.5)}});const er=Object(S.b)({frame_:function frame_(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push(Object(N.a)(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=Object(k.a)([Object(N.a)(e,s,t-r),Object(Ie.a)([r],a)]);o.push(i),s+=n}return 0===o.length?tensor2d([],[0,t]):Object(te.a)(Object(k.a)(o),[o.length,t])}});const tr=Object(S.b)({stft_:function stft_(e,t,n,r,a=Jn){null==r&&(r=enclosingPowerOfTwo(t));const s=er(e,t,n),o=Object(I.a)(s,a(t));return Object(pn.a)(o,r)}});const nr=Object(S.b)({cropAndResize_:function cropAndResize_(e,t,n,r,a="bilinear",s=0){const o=Object(O.a)(e,"image","cropAndResize"),i=Object(O.a)(t,"boxes","cropAndResize","float32"),u=Object(O.a)(n,"boxInd","cropAndResize","int32"),c=i.shape[0];A.b(4===o.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),A.b(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${c},4] but had shape ${i.shape}.`),A.b(1===u.rank&&u.shape[0]===c,()=>`Error in cropAndResize: boxInd must be have size [${c}] but had shape ${i.shape}.`),A.b(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),A.b(r[0]>=1&&r[1]>=1,()=>"cropSize must be atleast [1,1], but was "+r),A.b("bilinear"===a||"nearest"===a,()=>"method must be bilinear or nearest, but was "+a);const l={image:o,boxes:i,boxInd:u},p={method:a,extrapolationValue:s,cropSize:r};return J.a.runKernel(ee.L,l,p)}});const rr=Object(S.b)({flipLeftRight_:function flipLeftRight_(e){const t=Object(O.a)(e,"image","flipLeftRight","float32");A.b(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);const n={image:t};return J.a.runKernel(ee.gb,n,{})}});const ar=Object(S.b)({grayscaleToRGB_:function grayscaleToRGB_(e){const t=Object(O.a)(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];A.b(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),A.b(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,Object(ke.a)(t,a)}});const sr=Object(S.b)({rotateWithOffset_:function rotateWithOffset_(e,t,n=0,r=.5){const a=Object(O.a)(e,"image","rotateWithOffset","float32");A.b(4===a.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`);const s={image:a},o={radians:t,fillValue:n,center:r};return J.a.runKernel(ee.wc,s,o)}});function nonMaxSuppSanityCheck(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),A.b(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),A.b(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),A.b(4===e.shape[1],()=>"boxes must have 4 columns, but 2nd dimension was "+e.shape[1]),A.b(1===t.rank,()=>"scores must be a 1D tensor"),A.b(t.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was `+t.shape[0]),A.b(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const ir=Object(S.b)({nonMaxSuppression_:function nonMaxSuppression_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=Object(O.a)(e,"boxes","nonMaxSuppression","float32"),o=Object(O.a)(t,"scores","nonMaxSuppression","float32"),i=nonMaxSuppSanityCheck(s,o,n,r,a),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return J.a.runKernel(ee.Yb,{boxes:s,scores:o},u)}});var ur=n(61);const cr=async function nonMaxSuppressionAsync_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=Object(O.a)(e,"boxes","nonMaxSuppressionAsync"),o=Object(O.a)(t,"scores","nonMaxSuppressionAsync"),i=nonMaxSuppSanityCheck(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),c=u[0],l=u[1],{selectedIndices:p}=Object(ur.a)(c,l,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),Object(kn.a)(p,"int32")};const lr=Object(S.b)({nonMaxSuppressionWithScore_:function nonMaxSuppressionWithScore_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=Object(O.a)(e,"boxes","nonMaxSuppression"),i=Object(O.a)(t,"scores","nonMaxSuppression"),u=nonMaxSuppSanityCheck(o,i,n,r,a,s),c={boxes:o,scores:i},l={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:a=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},p=J.a.runKernel(ee.ac,c,l);return{selectedIndices:p[0],selectedScores:p[1]}}});const dr=async function nonMaxSuppressionWithScoreAsync_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=Object(O.a)(e,"boxes","nonMaxSuppressionAsync"),i=Object(O.a)(t,"scores","nonMaxSuppressionAsync"),u=nonMaxSuppSanityCheck(o,i,n,r,a,s);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold,s=u.softNmsSigma;const c=await Promise.all([o.data(),i.data()]),l=c[0],p=c[1],{selectedIndices:h,selectedScores:f}=Object(ur.c)(l,p,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Object(kn.a)(h,"int32"),selectedScores:Object(kn.a)(f)}};const pr=Object(S.b)({nonMaxSuppressionPadded_:function nonMaxSuppressionPadded_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=Object(O.a)(e,"boxes","nonMaxSuppression"),i=Object(O.a)(t,"scores","nonMaxSuppression"),u=nonMaxSuppSanityCheck(o,i,n,r,a,null),c={boxes:o,scores:i},l={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},p=J.a.runKernel(ee.Zb,c,l);return{selectedIndices:p[0],validOutputs:p[1]}}});const hr=async function nonMaxSuppressionPaddedAsync_(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=Object(O.a)(e,"boxes","nonMaxSuppressionAsync"),i=Object(O.a)(t,"scores","nonMaxSuppressionAsync"),u=nonMaxSuppSanityCheck(o,i,n,r,a,null),c=u.maxOutputSize,l=u.iouThreshold,p=u.scoreThreshold,[h,f]=await Promise.all([o.data(),i.data()]),{selectedIndices:m,validOutputs:b}=Object(ur.b)(h,f,c,l,p,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:Object(kn.a)(m,"int32"),validOutputs:Object(Yt.a)(b,"int32")}};const fr=Object(S.b)({resizeBilinear_:function resizeBilinear_(e,t,n=!1,r=!1){const a=Object(O.a)(e,"images","resizeBilinear");A.b(3===a.rank||4===a.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),A.b(2===t.length,()=>"Error in resizeBilinear: new shape must 2D, but got shape "+t+"."),A.b(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=a,o=!1;3===a.rank&&(o=!0,s=Object(te.a)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},u={alignCorners:n,halfPixelCenters:r,size:t},c=J.a.runKernel(ee.rc,i,u);return o?Object(te.a)(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const mr=Object(S.b)({resizeNearestNeighbor_:function resizeNearestNeighbor_(e,t,n=!1,r=!1){const a=Object(O.a)(e,"images","resizeNearestNeighbor");A.b(3===a.rank||4===a.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),A.b(2===t.length,()=>"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+t+"."),A.b("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),A.b(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=a,o=!1;3===a.rank&&(o=!0,s=Object(te.a)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},u={alignCorners:n,halfPixelCenters:r,size:t},c=J.a.runKernel(ee.tc,i,u);return o?Object(te.a)(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});const br=Object(S.b)({threshold_:function threshold_(e,t="binary",n=!1,r=.5){const a=Object(O.a)(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,u,c,l,p=Object(I.a)(Object(kn.a)([r]),255);if(A.b(3===a.rank,()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`),A.b(3===a.shape[2]||1===a.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`),A.b("int32"===a.dtype||"float32"===a.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`),A.b("otsu"===t||"binary"===t,()=>"Method must be binary or otsu, but was "+t),3===a.shape[2]){[o,u,c]=Object(hn.a)(a,[1,1,1],-1);const e=Object(I.a)(o,.2989),t=Object(I.a)(u,.587),n=Object(I.a)(c,.114);l=Object(i.a)(Object(i.a)(e,t),n)}else l=e;if("otsu"===t){p=function otsu(e,t){let n,r,a,s,o,u,c=Object(kn.a)([-1]),l=Object(kn.a)([0]),p=Object(kn.a)([0]);for(let h=0;h<e.size-1;h++){n=Object(N.a)(e,0,h+1),r=Object(N.a)(e,h+1),o=Object(pe.a)(Object(Xe.a)(n),t),u=Object(pe.a)(Object(Xe.a)(r),t);const f=Object(Xe.a)(Object(I.a)(n,Object(Pt.a)(0,n.size)));a=Object(pe.a)(f,Object(Xe.a)(n));const m=Object(Ie.a)(r.shape,n.size),b=Object(i.a)(Object(Pt.a)(0,r.size),m),g=Object(I.a)(r,b);s=Object(pe.a)(Object(Xe.a)(g),Object(Xe.a)(r));const y=Object(Ke.a)(a,s),x=Object(Ke.a)(a,s),v=Object(I.a)(o,u);p=Object(I.a)(Object(I.a)(v,y),x);const O=Object(_e.a)(p,l);l=Object(jn.a)(O,p,l),c=Object(jn.a)(O,Object(kn.a)([h]),c)}return c}(Object(D.a)(Object(L.a)(Object(Kt.a)(l),"int32"),Object(On.a)([]),256),s)}const h=n?Object(De.a)(l,p):Object(_e.a)(l,p);return Object(L.a)(Object(I.a)(h,255),"int32")}});const gr=Object(S.b)({transform_:function transform_(e,t,n="nearest",r="constant",a=0,s){const o=Object(O.a)(e,"image","transform","float32"),i=Object(O.a)(t,"transforms","transform","float32");A.b(4===o.rank,()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`),A.b(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),A.b(null==s||2===s.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);const u={image:o,transforms:i},c={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return J.a.runKernel(ee.ed,u,c)}});const yr=Object(S.b)({bandPart_:function bandPart_(e,t,n){Object(A.b)(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),Object(A.b)(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=Object(O.a)(e,"a","bandPart");Object(A.b)(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=Object(te.a)(Object(Pt.a)(0,s,1,"int32"),[-1,1]),u=Object(Pt.a)(0,o,1,"int32"),c=Object(Ke.a)(i,u),l=Object(Qe.a)(Object(De.a)(c,Object(Yt.a)(+t,"int32")),Object(Ce.a)(c,Object(Yt.a)(-n,"int32"))),p=Object(An.a)([s,o],r.dtype);return Object(te.a)(Object(gn.a)(Object(Cn.a)(Object(te.a)(r,[-1,s,o])).map(e=>Object(jn.a)(l,e,p))),a)}});const xr=Object(S.b)({gramSchmidt_:function gramSchmidt_(e){let t;if(Array.isArray(e)){t=!1,Object(A.b)(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)Object(A.b)(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=Object(hn.a)(e,e.shape[0],0).map(e=>Object(bn.a)(e,[0]));Object(A.b)(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let t=0;t<e.length;++t)n.push(J.a.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=Object(I.a)(Object(Xe.a)(Object(I.a)(n[r],e)),n[r]);e=Object(Ke.a)(e,t)}return Object(pe.a)(e,Dn(e,"euclidean"))}));return t?Object(gn.a)(n,0):n}});var vr=n(17);function qr2d(e,t=!1){return J.a.tidy(()=>{Object(A.b)(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let a=we(n),s=Object(V.a)(e);const o=tensor2d([[1]],[1,1]);let i=Object(V.a)(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=s,u=i,c=a;[i,s,a]=J.a.tidy(()=>{const t=Object(N.a)(s,[e,e],[n-e,1]),u=Dn(t),c=Object(N.a)(s,[e,e],[1,1]),l=Object(jn.a)(Object(_e.a)(c,0),tensor2d([[-1]]),tensor2d([[1]])),p=Object(Ke.a)(c,Object(I.a)(l,u)),h=Object(pe.a)(t,p);i=1===h.shape[0]?Object(V.a)(o):Object(k.a)([o,Object(N.a)(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const f=Object(Ue.a)(Object(pe.a)(Object(w.a)(l,p),u)),m=Object(N.a)(s,[e,0],[n-e,r]),b=Object(I.a)(f,i),g=Object(Fn.a)(i);if(0===e)s=Object(Ke.a)(m,Object(w.a)(b,Object(w.a)(g,m)));else{const t=Object(Ke.a)(m,Object(w.a)(b,Object(w.a)(g,m)));s=Object(k.a)([Object(N.a)(s,[0,0],[e,r]),t],0)}const y=Object(Fn.a)(b),x=Object(N.a)(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=Object(Ke.a)(x,Object(w.a)(Object(w.a)(x,i),y));else{const t=Object(Ke.a)(x,Object(w.a)(Object(w.a)(x,i),y));a=Object(k.a)([Object(N.a)(a,[0,0],[n,e]),t],1)}return[i,s,a]}),Object(vr.d)([t,u,c])}return!t&&n>r&&(a=Object(N.a)(a,[0,0],[n,r]),s=Object(N.a)(s,[0,0],[r,r])),[a,s]})}const Or=Object(S.b)({qr_:function qr_(e,t=!1){if(Object(A.b)(e.rank>=2,()=>"qr() requires input tensor to have a rank >= 2, but got rank "+e.rank),2===e.rank)return qr2d(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=Object(Cn.a)(Object(te.a)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach(e=>{const[n,r]=qr2d(e,t);a.push(n),s.push(r)});return[Object(te.a)(Object(gn.a)(a,0),e.shape),Object(te.a)(Object(gn.a)(s,0),e.shape)]}}});var kr=n(32);const wr=Object(S.b)({computeWeightedLoss_:function computeWeightedLoss_(e,t,n=kr.a.SUM_BY_NONZERO_WEIGHTS){const r=Object(O.a)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=Object(O.a)(t,"weights","computeWeightedLoss"));const s=null==a?r:Object(I.a)(r,a);if(n===kr.a.NONE)return s;if(n===kr.a.SUM)return Object(Xe.a)(s);if(n===kr.a.MEAN){if(null==a)return Object(ot.a)(s);{const e=r.size/a.size,t=Object(pe.a)(Object(Xe.a)(s),Object(Xe.a)(a));return e>1?Object(pe.a)(t,Object(Yt.a)(e)):t}}if(n===kr.a.SUM_BY_NONZERO_WEIGHTS){if(null==a)return Object(pe.a)(Object(Xe.a)(s),Object(Yt.a)(r.size));{const e=Object(I.a)(a,Object(it.a)(r.shape)),t=Object(L.a)(Object(Xe.a)(Object(gt.a)(e,Object(Yt.a)(0))),"float32");return Object(pe.a)(Object(Xe.a)(s),t)}}throw Error("Unknown reduction: "+n)}});const Ir=Object(S.b)({absoluteDifference_:function absoluteDifference_(e,t,n,r=kr.a.SUM_BY_NONZERO_WEIGHTS){const s=Object(O.a)(e,"labels","absoluteDifference"),o=Object(O.a)(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Object(O.a)(n,"weights","absoluteDifference")),Object(A.e)(s.shape,o.shape,"Error in absoluteDifference: ");const u=Object(a.a)(Object(Ke.a)(s,o));return wr(u,i,r)}});const Sr=Object(S.b)({cosineDistance_:function cosineDistance_(e,t,n,r,a=kr.a.SUM_BY_NONZERO_WEIGHTS){const s=Object(O.a)(e,"labels","cosineDistance"),o=Object(O.a)(t,"predictions","cosineDistance");let i=null;null!=r&&(i=Object(O.a)(r,"weights","cosineDistance")),Object(A.e)(s.shape,o.shape,"Error in cosineDistance: ");const u=Object(Yt.a)(1),c=Object(Ke.a)(u,Object(Xe.a)(Object(I.a)(s,o),n,!0));return wr(c,i,a)}});const Tr=Object(S.b)({hingeLoss_:function hingeLoss_(e,t,n,r=kr.a.SUM_BY_NONZERO_WEIGHTS){let a=Object(O.a)(e,"labels","hingeLoss");const s=Object(O.a)(t,"predictions","hingeLoss");let o=null;null!=n&&(o=Object(O.a)(n,"weights","hingeLoss")),Object(A.e)(a.shape,s.shape,"Error in hingeLoss: ");const i=Object(Yt.a)(1);a=Object(Ke.a)(Object(I.a)(Object(Yt.a)(2),a),i);const u=Object(zt.a)(Object(Ke.a)(i,Object(I.a)(a,s)));return wr(u,o,r)}});const Nr=Object(S.b)({huberLoss_:function huberLoss_(e,t,n,r=1,s=kr.a.SUM_BY_NONZERO_WEIGHTS){const o=Object(O.a)(e,"labels","huberLoss"),u=Object(O.a)(t,"predictions","huberLoss");let c=null;null!=n&&(c=Object(O.a)(n,"weights","huberLoss")),Object(A.e)(o.shape,u.shape,"Error in huberLoss: ");const l=Object(Yt.a)(r),p=Object(a.a)(Object(Ke.a)(u,o)),h=Object(lt.a)(p,l),f=Object(Ke.a)(p,h),m=Object(i.a)(Object(I.a)(Object(Yt.a)(.5),Object(ht.a)(h)),Object(I.a)(l,f));return wr(m,c,s)}});const _r=Object(S.b)({logLoss_:function logLoss_(e,t,n,r=1e-7,a=kr.a.SUM_BY_NONZERO_WEIGHTS){const s=Object(O.a)(e,"labels","logLoss"),o=Object(O.a)(t,"predictions","logLoss");let u=null;null!=n&&(u=Object(O.a)(n,"weights","logLoss")),Object(A.e)(s.shape,o.shape,"Error in logLoss: ");const c=Object(Yt.a)(1),l=Object(Yt.a)(r),p=Object(Ue.a)(Object(I.a)(s,Object(Be.a)(Object(i.a)(o,l)))),h=Object(I.a)(Object(Ke.a)(c,s),Object(Be.a)(Object(i.a)(Object(Ke.a)(c,o),l))),f=Object(Ke.a)(p,h);return wr(f,u,a)}});const Cr=Object(S.b)({meanSquaredError_:function meanSquaredError_(e,t,n,r=kr.a.SUM_BY_NONZERO_WEIGHTS){const a=Object(O.a)(e,"labels","meanSquaredError"),s=Object(O.a)(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=Object(O.a)(n,"weights","meanSquaredError")),Object(A.e)(a.shape,s.shape,"Error in meanSquaredError: ");const i=Object(mn.a)(a,s);return wr(i,o,r)}});const jr=Object(S.b)({sigmoidCrossEntropy_:function sigmoidCrossEntropy_(e,t,n,r=0,s=kr.a.SUM_BY_NONZERO_WEIGHTS){let o=Object(O.a)(e,"multiClassLabels","sigmoidCrossEntropy");const u=Object(O.a)(t,"logits","sigmoidCrossEntropy");let c=null;if(null!=n&&(c=Object(O.a)(n,"weights","sigmoidCrossEntropy")),Object(A.e)(o.shape,u.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Object(Yt.a)(r),t=Object(Yt.a)(1),n=Object(Yt.a)(.5);o=Object(i.a)(Object(I.a)(o,Object(Ke.a)(t,e)),Object(I.a)(n,e))}const l=function sigmoidCrossEntropyWithLogits_(e,t){const n=Object(O.a)(e,"labels","sigmoidCrossEntropyWithLogits"),r=Object(O.a)(t,"logits","sigmoidCrossEntropyWithLogits");Object(A.e)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=Object(zt.a)(r),o=Object(I.a)(r,n),u=Object(Le.a)(Object(xe.a)(Object(Ue.a)(Object(a.a)(r))));return Object(i.a)(Object(Ke.a)(s,o),u)}(o,u);return wr(l,c,s)}});const Er=Object(S.b)({softmaxCrossEntropy_:function softmaxCrossEntropy_(e,t,n,r=0,a=kr.a.SUM_BY_NONZERO_WEIGHTS){let s=Object(O.a)(e,"onehotLabels","softmaxCrossEntropy");const o=Object(O.a)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=Object(O.a)(n,"weights","softmaxCrossEntropy")),Object(A.e)(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Object(Yt.a)(r),t=Object(Yt.a)(1),n=Object(Yt.a)(s.shape[1]);s=Object(i.a)(Object(I.a)(s,Object(Ke.a)(t,e)),Object(pe.a)(e,n))}const c=function softmaxCrossEntropyWithLogits_(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was `+n);return Object(ze.a)((e,t,r)=>{const a=Ye(t,[n],!0),s=Object(Ke.a)(Object(L.a)(t,"float32"),a);r([e,s]);const o=Object(Ue.a)(Object(I.a)(s,e));return{value:Object(Xe.a)(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=Object(He.e)(e.shape,[n]);return[Object(I.a)(Object(te.a)(e,s),Object(Ke.a)(Object(L.a)(r,"float32"),Object(xe.a)(a))),Object(I.a)(Object(te.a)(e,s),Object(Ke.a)(Object(xe.a)(a),Object(L.a)(r,"float32")))]}}})(e,t)}(s,o);return wr(c,u,a)}});const Ar=Object(S.b)({sparseFillEmptyRows_:function sparseFillEmptyRows_(e,t,n,r){const a=Object(O.a)(e,"indices","sparseFillEmptyRows","int32"),s=Object(O.a)(t,"values","sparseFillEmptyRows"),o=Object(O.a)(n,"denseShape","sparseFillEmptyRows","int32"),i=Object(O.a)(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error("Indices should be Tensor2D but received shape\n        "+a.shape);if(1!==s.rank)throw new Error("Values should be Tensor1D but received shape "+s.shape);if(1!==o.rank)throw new Error("Dense shape should be Tensor1D but received shape "+o.shape);if(0!==i.rank)throw new Error("Default value should be a scalar but received shape "+i.shape);const u={indices:a,values:s,denseShape:o,defaultValue:i},c=J.a.runKernel(ee.Kc,u);return{outputIndices:c[0],outputValues:c[1],emptyRowIndicator:c[2],reverseIndexMap:c[3]}}});const $r=Object(S.b)({sparseReshape_:function sparseReshape_(e,t,n){const r=Object(O.a)(e,"inputIndices","sparseReshape","int32"),a=Object(O.a)(t,"inputShape","sparseReshape","int32"),s=Object(O.a)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error("Input indices should be Tensor2D but received shape\n        "+r.shape);if(1!==a.rank)throw new Error("Input shape should be Tensor1D but received shape "+a.shape);if(1!==s.rank)throw new Error("New shape should be Tensor1D but received shape "+s.shape);const o={inputIndices:r,inputShape:a,newShape:s},i=J.a.runKernel(ee.Lc,o);return{outputIndices:i[0],outputShape:i[1]}}});const Rr=Object(S.b)({sparseSegmentMean_:function sparseSegmentMean_(e,t,n){const r=Object(O.a)(e,"data","sparseSegmentMean"),a=Object(O.a)(t,"indices","sparseSegmentMean","int32"),s=Object(O.a)(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error("Indices should be Tensor1D but received shape\n          "+a.shape);if(1!==s.rank)throw new Error("Segment ids should be Tensor1D but received shape\n          "+s.shape);const o={data:r,indices:a,segmentIds:s};return J.a.runKernel(ee.Mc,o)}});const Fr=Object(S.b)({sparseSegmentSum_:function sparseSegmentSum_(e,t,n){const r=Object(O.a)(e,"data","sparseSegmentSum"),a=Object(O.a)(t,"indices","sparseSegmentSum","int32"),s=Object(O.a)(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error("Indices should be Tensor1D but received shape\n         "+a.shape);if(1!==s.rank)throw new Error("Segment ids should be Tensor1D but received shape\n         "+s.shape);const o={data:r,indices:a,segmentIds:s};return J.a.runKernel(ee.Nc,o)}});const Dr=Object(S.b)({stringNGrams_:function stringNGrams_(e,t,n,r,a,s,o,i){const u=Object(O.a)(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error("Data must be a vector, saw: "+u.shape);const c=Object(O.a)(t,"dataSplits","stringNGrams");if("int32"!==c.dtype)throw new Error("Data splits must be of datatype int32");const l={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},p={data:u,dataSplits:c},h=J.a.runKernel(ee.Vc,p,l);return{nGrams:h[0],nGramsSplits:h[1]}}});const Mr=Object(S.b)({stringSplit_:function stringSplit_(e,t,n=!0){const r=Object(O.a)(e,"input","stringSplit","string"),a=Object(O.a)(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error("Input should be Tensor1D but received shape "+r.shape);if(0!==a.rank)throw new Error("Delimiter should be a scalar but received shape "+a.shape);const s={skipEmpty:n},o={input:r,delimiter:a},i=J.a.runKernel(ee.Wc,o,s);return{indices:i[0],values:i[1],shape:i[2]}}});const Pr=Object(S.b)({stringToHashBucketFast_:function stringToHashBucketFast_(e,t){const n=Object(O.a)(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return J.a.runKernel(ee.Xc,a,r)}}),Br={fft:cn.a,ifft:ln.a,rfft:pn.a,irfft:dn.a},Lr={hammingWindow:Zn,hannWindow:Jn,frame:er,stft:tr},zr={flipLeftRight:rr,grayscaleToRGB:ar,resizeNearestNeighbor:mr,resizeBilinear:fr,rotateWithOffset:sr,cropAndResize:nr,nonMaxSuppression:ir,nonMaxSuppressionAsync:cr,nonMaxSuppressionWithScore:lr,nonMaxSuppressionWithScoreAsync:dr,nonMaxSuppressionPadded:pr,nonMaxSuppressionPaddedAsync:hr,threshold:br,transform:gr},Ur={bandPart:yr,gramSchmidt:xr,qr:Or},Vr={absoluteDifference:Ir,computeWeightedLoss:wr,cosineDistance:Sr,hingeLoss:Tr,huberLoss:Nr,logLoss:_r,meanSquaredError:Cr,sigmoidCrossEntropy:jr,softmaxCrossEntropy:Er},Wr={sparseFillEmptyRows:Ar,sparseReshape:$r,sparseSegmentMean:Rr,sparseSegmentSum:Fr},Gr={stringNGrams:Dr,stringSplit:Mr,stringToHashBucketFast:Pr}},function(e,t,n){"use strict";let r;function mockIsMobile(e){r=e}function isMobile(e){if(void 0!==r)return r;if(e||function _isNavigatorDefined(){return"undefined"!=typeof navigator&&null!=navigator}()){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function isBrowser(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}n.r(t),n.d(t,"mockIsMobile",(function(){return mockIsMobile})),n.d(t,"isMobile",(function(){return isMobile})),n.d(t,"isBrowser",(function(){return isBrowser}))},function(e,t,n){"use strict";function print(e,t=!1){console.log(e.toString(t))}n.d(t,"a",(function(){return print}))},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({floorDiv_:function floorDiv_(e,t){let n=Object(o.a)(e,"a","floorDiv"),i=Object(o.a)(t,"b","floorDiv");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.ib,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(23),c=n(3);const l=Object(c.b)({maximum_:function maximum_(e,t){let n=Object(o.a)(e,"a","maximum"),c=Object(o.a)(t,"b","maximum");[n,c]=Object(s.makeTypesMatch)(n,c),"bool"===n.dtype&&(n=Object(u.a)(n,"int32"),c=Object(u.a)(c,"int32")),Object(i.assertAndGetBroadcastShape)(n.shape,c.shape);const l={a:n,b:c};return r.a.runKernel(a.Pb,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(23),u=n(24),c=n(3),l=n(7);const p=Object(c.b)({avgPool_:function avgPool_(e,t,n,c,p){const h=Object(s.a)(e,"x","avgPool","float32");o.b(u.i(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let f=h,m=!1;3===h.rank&&(m=!0,f=Object(l.a)(h,[1,h.shape[0],h.shape[1],h.shape[2]])),o.b(4===f.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${f.rank}.`),u.a("avgPool",c,p);const b={x:f},g={filterSize:t,strides:n,pad:c,dimRoundingMode:p};let y=r.a.runKernel(a.o,b,g);return y=Object(i.a)(y,h.dtype),m?Object(l.a)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({batchToSpaceND_:function batchToSpaceND_(e,t,n){const i=Object(s.a)(e,"x","batchToSpaceND"),u=t.reduce((e,t)=>e*t);o.b(i.rank>=1+t.length,()=>`input rank is ${i.rank} but should be > than blockShape.length ${t.length}`),o.b(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),o.b(i.shape[0]%u==0,()=>`input tensor batch is ${i.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${u}`);const c={x:i},l={blockShape:t,crops:n};return r.a.runKernel(a.t,c,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({bincount_:function bincount_(e,t,n){const i=Object(s.a)(e,"x","bincount"),u=Object(s.a)(t,"weights","bincount");o.b("int32"===i.dtype,()=>"Error in bincount: input dtype must be int32, but got "+i.dtype),o.b(n>=0,()=>`size must be non-negative, but got ${n}.`),o.b(u.size===i.size||0===u.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${i.shape}, weights shape: `+u.shape+".");const c={x:i,weights:u},l={size:n};return r.a.runKernel(a.u,c,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({equal_:function equal_(e,t){let n=Object(o.a)(e,"a","equal","string_or_numeric"),u=Object(o.a)(t,"b","equal","string_or_numeric");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.Z,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({elu_:function elu_(e){const t={x:Object(s.a)(e,"x","elu","float32")};return r.a.runKernel(a.X,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({floor_:function floor_(e){const t={x:Object(s.a)(e,"x","floor","float32")};return r.a.runKernel(a.hb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({gather_:function gather_(e,t,n=0,o=0){const i={x:Object(s.a)(e,"x","gather"),indices:Object(s.a)(t,"indices","gather","int32")},u={axis:n,batchDims:o};return r.a.runKernel(a.ob,i,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({greaterEqual_:function greaterEqual_(e,t){let n=Object(o.a)(e,"a","greaterEqual","string_or_numeric"),u=Object(o.a)(t,"b","greaterEqual","string_or_numeric");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.qb,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({leakyRelu_:function leakyRelu_(e,t=.2){const n={x:Object(s.a)(e,"x","leakyRelu")},o={alpha:t};return r.a.runKernel(a.zb,n,o)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({log1p_:function log1p_(e){const t={x:Object(s.a)(e,"x","log1p")};return r.a.runKernel(a.Eb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({softplus_:function softplus_(e){const t={x:Object(s.a)(e,"x","softplus")};return r.a.runKernel(a.Ic,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({logicalNot_:function logicalNot_(e){const t={x:Object(s.a)(e,"x","logicalNot","bool")};return r.a.runKernel(a.Hb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(20),i=n(3);const u=Object(i.b)({logicalOr_:function logicalOr_(e,t){const n=Object(s.a)(e,"a","logicalOr","bool"),i=Object(s.a)(t,"b","logicalOr","bool");Object(o.assertAndGetBroadcastShape)(n.shape,i.shape);const u={a:n,b:i};return r.a.runKernel(a.Ib,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(24),u=n(3),c=n(7);const l=Object(u.b)({maxPool_:function maxPool_(e,t,n,u,l){const p=Object(s.a)(e,"x","maxPool");let h=p,f=!1;3===p.rank&&(f=!0,h=Object(c.a)(p,[1,p.shape[0],p.shape[1],p.shape[2]])),o.b(4===h.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${h.rank}.`),o.b(i.i(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),i.a("maxPool",u,l);const m={x:h},b={filterSize:t,strides:n,pad:u,dimRoundingMode:l},g=r.a.runKernel(a.Kb,m,b);return f?Object(c.a)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(23),c=n(3);const l=Object(c.b)({minimum_:function minimum_(e,t){let n=Object(o.a)(e,"a","minimum"),c=Object(o.a)(t,"b","minimum");[n,c]=Object(s.makeTypesMatch)(n,c),"bool"===n.dtype&&(n=Object(u.a)(n,"int32"),c=Object(u.a)(c,"int32")),Object(i.assertAndGetBroadcastShape)(n.shape,c.shape);const l={a:n,b:c};return r.a.runKernel(a.Sb,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({notEqual_:function notEqual_(e,t){let n=Object(o.a)(e,"a","notEqual","string_or_numeric"),u=Object(o.a)(t,"b","notEqual","string_or_numeric");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.bc,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({spaceToBatchND_:function spaceToBatchND_(e,t,n){const i=Object(s.a)(e,"x","spaceToBatchND");o.b(i.rank>=1+t.length,()=>`input rank ${i.rank} should be > than [blockShape] ${t.length}`),o.b(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),o.b(i.shape.reduce((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]==0:e,!0),()=>`input spatial dimensions ${i.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const u={x:i},c={blockShape:t,paddings:n};return r.a.runKernel(a.Jc,u,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({prelu_:function prelu_(e,t){const n={x:Object(s.a)(e,"x","prelu"),alpha:Object(s.a)(t,"alpha","prelu")};return r.a.runKernel(a.ic,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(40),a=n(3),s=n(82);const o=Object(a.b)({randomUniform_:function randomUniform_(e,t=0,n=1,a="float32",o){const i=Object(r.a)(e,a),u=new s.c(t,n,null,o);for(let e=0;e<i.values.length;e++)i.values[e]=u.nextValue();return i.toTensor()}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({relu6_:function relu6_(e){const t={x:Object(s.a)(e,"x","relu6")};return r.a.runKernel(a.pc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({round_:function round_(e){const t={x:Object(s.a)(e,"x","round")};return r.a.runKernel(a.xc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return m}));var r=n(47),a=n(31),s=n(96),o=n(10),i=n(3),u=n(88),c=n(7),l=n(48),p=n(16),h=n(26),f=n(89);const m=Object(i.b)({irfft_:function irfft_(e){const t=e.shape[e.shape.length-1],n=e.size/t;let i;if(t<=2){const r=Object(c.a)(e,[n,t]);i=Object(f.a)(r)}else{const m=[n,2*(t-1)],b=Object(c.a)(Object(u.a)(e),[n,t]),g=Object(c.a)(Object(s.a)(e),[n,t]),y=Object(l.a)(Object(h.a)(b,[0,1],[n,t-2]),1),x=Object(o.a)(Object(l.a)(Object(h.a)(g,[0,1],[n,t-2]),1),Object(p.a)(-1)),v=Object(a.a)([b,y],1),O=Object(a.a)([g,x],1),k=Object(c.a)(Object(r.a)(v,O),[m[0],m[1]]);i=Object(f.a)(k)}if(i=Object(u.a)(i),3===e.rank&&0!==e.shape[0]){const t=i,n=e.shape[0];i=Object(c.a)(i,[n,i.shape[0]/n,i.shape[1]]),t.dispose()}return i}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({squaredDifference_:function squaredDifference_(e,t){let n=Object(o.a)(e,"a","squaredDifference"),u=Object(o.a)(t,"b","squaredDifference");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.Sc,c,{})}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({step_:function step_(e,t=0){const n={x:Object(s.a)(e,"x","step")},o={alpha:t};return r.a.runKernel(a.Tc,n,o)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return tensor3d}));var r=n(2),a=n(6),s=n(42);function tensor3d(e,t,n){if(Object(a.d)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const o=Object(r.c)(e,n);if(3!==o.length&&1!==o.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===o.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Object(s.a)(e,t,o,n)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var r=n(149),a=n(2);const s=async function whereAsync_(e){const t=Object(a.a)(e,"condition","whereAsync","bool"),n=await t.data(),s=Object(r.a)(t.shape,n);return e!==t&&t.dispose(),s}},function(e,t,n){"use strict";n.d(t,"a",(function(){return whereImpl}));var r=n(40);function whereImpl(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const a=Object(r.a)(e,"int32"),s=Object(r.a)([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=a.indexToLoc(n[t]),o=t*e.length;s.values.set(r,o)}return s.toTensor()}},function(e,t,n){"use strict";n.r(t);var r=n(151);n.d(t,"simpleAbsImpl",(function(){return r.b}));var a=n(51);n.d(t,"addImpl",(function(){return a.c}));var s=n(78);n.d(t,"bincountImpl",(function(){return s.a})),n.d(t,"bincountReduceImpl",(function(){return s.b}));var o=n(152);n.d(t,"ceilImpl",(function(){return o.b}));var i=n(153);n.d(t,"concatImpl",(function(){return i.a}));var u=n(102);n.d(t,"equalImpl",(function(){return u.c}));var c=n(103);n.d(t,"expImpl",(function(){return c.c}));var l=n(154);n.d(t,"expm1Impl",(function(){return l.b}));var p=n(155);n.d(t,"floorImpl",(function(){return p.b}));var h=n(156);n.d(t,"gatherNdImpl",(function(){return h.a}));var f=n(157);n.d(t,"gatherV2Impl",(function(){return f.a}));var m=n(158);n.d(t,"greaterImpl",(function(){return m.b}));var b=n(159);n.d(t,"greaterEqualImpl",(function(){return b.b}));var g=n(160);n.d(t,"lessImpl",(function(){return g.b}));var y=n(161);n.d(t,"lessEqualImpl",(function(){return y.b}));var x=n(162);n.d(t,"linSpaceImpl",(function(){return x.a}));var v=n(163);n.d(t,"logImpl",(function(){return v.b}));var O=n(164);n.d(t,"maxImpl",(function(){return O.a}));var k=n(165);n.d(t,"maximumImpl",(function(){return k.b}));var w=n(166);n.d(t,"minimumImpl",(function(){return w.b}));var I=n(52);n.d(t,"multiplyImpl",(function(){return I.c}));var S=n(167);n.d(t,"negImpl",(function(){return S.b}));var T=n(168);n.d(t,"notEqualImpl",(function(){return T.b}));var N=n(169);n.d(t,"prodImpl",(function(){return N.b}));var _=n(170);n.d(t,"rangeImpl",(function(){return _.a}));var C=n(171);n.d(t,"rsqrtImpl",(function(){return C.b}));var j=n(105);n.d(t,"sigmoidImpl",(function(){return j.c}));var E=n(44);n.d(t,"sliceImpl",(function(){return E.c}));var A=n(172);n.d(t,"sparseFillEmptyRowsImpl",(function(){return A.a}));var $=n(173);n.d(t,"sparseReshapeImpl",(function(){return $.a}));var R=n(106);n.d(t,"sparseSegmentReductionImpl",(function(){return R.a}));var F=n(174);n.d(t,"sqrtImpl",(function(){return F.b}));var D=n(175);n.d(t,"squaredDifferenceImpl",(function(){return D.b}));var M=n(176);n.d(t,"stridedSliceImpl",(function(){return M.a}));var P=n(177);n.d(t,"stringNGramsImpl",(function(){return P.a}));var B=n(178);n.d(t,"stringSplitImpl",(function(){return B.a}));var L=n(179);n.d(t,"stringToHashBucketFastImpl",(function(){return L.a}));var z=n(79);n.d(t,"subImpl",(function(){return z.c}));var U=n(180);n.d(t,"tileImpl",(function(){return U.a}));var V=n(181);n.d(t,"topKImpl",(function(){return V.a}));var W=n(104);n.d(t,"transposeImpl",(function(){return W.a}));var G=n(182);n.d(t,"uniqueImpl",(function(){return G.a}))},function(e,t,n){"use strict";n.d(t,"b",(function(){return simpleAbsImpl})),n.d(t,"a",(function(){return s}));var r=n(0),a=n(9);function simpleAbsImpl(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const s={kernelName:r.Abs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Object(a.a)(t,"abs");let s=new Float32Array(r.util.sizeFromShape(t.shape));return s=simpleAbsImpl(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>Math.ceil(e)),i=Object(s.b)(r.Ceil,o),u={kernelName:r.Ceil,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return concatImpl}));var r=n(0);function concatImpl(e,t,n,a){const s=r.util.getArrayFromDType(n,r.util.sizeFromShape(t));if(a&&"string"!==n){let t=0;e.forEach(e=>{const n=r.util.sizeFromShape(e.shape);s.set(e.vals,t),t+=n})}else{let a=0;e.forEach(e=>{const o="string"===n?r.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const r=n*t[1]+a;for(let t=0;t<e.shape[1];++t)s[r+t]=o[i++]}a+=e.shape[1]})}return s}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>Math.expm1(e)),i=Object(s.b)(r.Expm1,o),u={kernelName:r.Expm1,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>Math.floor(e)),i=Object(s.b)(r.Floor,o),u={kernelName:r.Floor,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return gatherNdImpl}));var r=n(0);function gatherNdImpl(e,t,n,a,s,o,i,u,c){const l=Object(r.buffer)([a,o],n);for(let n=0;n<a;n++){const r=[];let a=0;for(let t=0;t<s;t++){const o=e[n*s+t];a+=o*i[t],r.push(o)}if(a<0||a>=c/o)throw new Error(`Invalid indices: ${r} does not index into ${u}`);for(let e=0;e<o;e++)l.values[n*o+e]=t.get(...t.indexToLoc(a*o+e))}return l}},function(e,t,n){"use strict";n.d(t,"a",(function(){return gatherV2Impl}));var r=n(0);function gatherV2Impl(e,t,n){const a=Object(r.buffer)(n,e.dtype);for(let n=0;n<a.size;++n){const r=a.indexToLoc(n).slice(),s=r[0],o=r[2],i=t.locToIndex([s,o]);r[2]=t.values[i];const u=e.locToIndex(r);0<=u&&u<e.values.length&&(a.values[n]=e.values[u])}return a}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e>t?1:0),i=Object(s.a)(r.Greater,o,null,"bool"),u={kernelName:r.Greater,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e>=t?1:0),i=Object(s.a)(r.GreaterEqual,o,null,"bool"),u={kernelName:r.GreaterEqual,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e<t?1:0),i=Object(s.a)(r.Less,o,null,"bool"),u={kernelName:r.Less,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e<=t?1:0),i=Object(s.a)(r.LessEqual,o,null,"bool"),u={kernelName:r.LessEqual,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return linSpaceImpl}));var r=n(0);function linSpaceImpl(e,t,n){const a=(t-e)/(n-1),s=r.util.makeZerosTypedArray(n,"float32");s[0]=e;for(let e=1;e<s.length;e++)s[e]=s[e-1]+a;return s}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>Math.log(e)),i=Object(s.b)(r.Log,o),u={kernelName:r.Log,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return maxImpl}));var r=n(0);function maxImpl(e,t,n,a){const s=r.util.getTypedArrayFromDType(a,r.util.sizeFromShape(n));for(let n=0;n<s.length;++n){const r=n*t;let a=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>a)&&(a=t)}s[n]=a}return s}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>Math.max(e,t)),i=Object(s.a)(r.Maximum,o),u={kernelName:r.Maximum,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>Math.min(e,t)),i=Object(s.a)(r.Minimum,o),u={kernelName:r.Minimum,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return negImpl})),n.d(t,"a",(function(){return o}));var r=n(0),a=n(9),s=n(52);function negImpl(e,t,n){const a=r.util.createScalarValue(-1,n);return Object(s.c)([],t,a,e,n)}const o={kernelName:r.Neg,backendName:"cpu",kernelFunc:function neg(e){const{inputs:t,backend:n}=e,{x:r}=t;Object(a.a)(r,"neg");const s=n.data.get(r.dataId).values,[o,i]=negImpl(s,r.shape,r.dtype);return n.makeTensorInfo(i,r.dtype,o)}}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>e!==t?1:0),i=Object(s.a)(r.NotEqual,o,null,"bool"),u={kernelName:r.NotEqual,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return prodImpl})),n.d(t,"a",(function(){return o}));var r=n(0),a=n(9),s=n(29);function prodImpl(e,t,n,a){const[s,o]=r.backend_util.computeOutAndReduceShapes(e,a),i=Object(r.upcastType)(t,"int32"),u=r.util.makeZerosTypedArray(r.util.sizeFromShape(s),i),c=r.util.sizeFromShape(o);for(let e=0;e<u.length;++e){const t=e*c;let r=1;for(let e=0;e<c;++e)r*=n[t+e];u[e]=r}return{outVals:u,outShape:s,outDtype:i}}const o={kernelName:r.Prod,backendName:"cpu",kernelFunc:function prod(e){const{inputs:t,backend:n,attrs:o}=e,{x:i}=t,{axis:u,keepDims:c}=o;Object(a.a)(i,"prod");const l=i.shape.length,p=r.util.parseAxisParam(u,i.shape),h=r.backend_util.getAxesPermutation(p,l);let f=p,m=i;const b=[];null!=h&&(m=Object(s.a)({inputs:{x:i},backend:n,attrs:{perm:h}}),b.push(m),f=r.backend_util.getInnerMostAxes(f.length,l));const g=n.data.get(m.dataId).values,{outVals:y,outShape:x,outDtype:v}=prodImpl(m.shape,m.dtype,g,f);let O=x;return c&&(O=r.backend_util.expandShapeToKeepDim(x,p)),b.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(O,v,y)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return rangeImpl}));var r=n(0);function rangeImpl(e,t,n,a){if(e===t||e<t&&n<0||t<e&&n>1)return r.util.makeZerosTypedArray(0,a);const s=Math.abs(Math.ceil((t-e)/n)),o=r.util.makeZerosTypedArray(s,a);t<e&&1===n&&(n=-1),o[0]=e;for(let e=1;e<o.length;e++)o[e]=o[e-1]+n;return o}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>1/Math.sqrt(e)),i=Object(s.b)(r.Rsqrt,o),u={kernelName:r.Rsqrt,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return sparseFillEmptyRowsImpl}));var r=n(0);function sparseFillEmptyRowsImpl(e,t,n,a,s,o,i){const u=t[0],c=o[0],l=new Array(c),p=new Array(u),h=t[1];if(0===c){if(0!==u)throw new Error(r.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[r.util.getArrayFromDType(n,0),[0,h],r.util.getArrayFromDType(s,0),l,p]}let f=!0,m=0;const b=new Array(c).fill(0);for(let t=0;t<u;++t){const n=e[t*h];if(n<0)throw new Error(r.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(t,n));if(n>=c)throw new Error(r.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(t,n,c));++b[n],f=f&&n>=m,m=n}let g=!0;for(let e=0;e<c;++e){const t=0===b[e];l[e]=t,g=g&&!t,b[e]=Math.max(b[e],1),e>0&&(b[e]+=b[e-1])}if(g&&f){const t=e,n=a;for(let e=0;e<u;++e)p[e]=e;return[t,[u,h],n,l,p]}{const t=b[c-1],o=r.util.getArrayFromDType(n,t*h),f=r.util.getArrayFromDType(s,t),m=new Array(c).fill(0);for(let t=0;t<u;++t){const n=e[t*h],r=m[n],s=(0===n?0:b[n-1])+r;m[n]++;for(let n=0;n<h;++n)o[s*h+n]=e[t*h+n];f[s]=a[t],p[t]=s}for(let e=0;e<c;++e){if(0===m[e]){const t=0===e?0:b[e-1];o[t*h+0]=e;for(let e=1;e<h;++e)o[t*h+e]=0;f[t]=i}}return[o,[t,h],f,l,p]}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return sparseReshapeImpl}));var r=n(0);function sparseReshapeImpl(e,t,n,a,s){const o=r.util.sizeFromShape(a),i=t[0],u=s.length,c=[];let l=1,p=-1;for(let e=0;e<u;++e){const t=s[e];if(-1===t){if(-1!==p)throw new Error(r.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(p,e));p=e,c.push(1)}else{if(t<0)throw new Error(r.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(e,t));l*=t,c.push(t)}}if(-1!==p){if(l<=0)throw new Error(r.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(o/l);if(l*e!==o)throw new Error(r.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(a,c));c[p]=e}if(r.util.sizeFromShape(c)!==o)throw new Error(r.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(a,c));const h=a.length,f=[];if(h>0){f[h-1]=1;for(let e=h-2;e>=0;--e)f[e]=f[e+1]*a[e+1]}const m=[];if(u>0){m[u-1]=1;for(let e=u-2;e>=0;--e)m[e]=m[e+1]*c[e+1]}const b=r.util.getArrayFromDType(n,i*u);for(let t=0;t<i;++t){let n=0;for(let r=0;r<h;++r)n+=e[t*h+r]*f[r];for(let e=0;e<u;++e)b[t*u+e]=Math.trunc(n/m[e]),n%=m[e]}return[b,[i,u],c]}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(43),s=n(11);const o=Object(a.a)(e=>Math.sqrt(e)),i=Object(s.a)(r.Sqrt,e=>Math.sqrt(e)),u={kernelName:r.Sqrt,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return u}));var r=n(0),a=n(18),s=n(19);const o=Object(a.a)((e,t)=>{const n=e-t;return n*n}),i=Object(s.a)(r.SquaredDifference,o),u={kernelName:r.SquaredDifference,backendName:"cpu",kernelFunc:i}},function(e,t,n){"use strict";n.d(t,"a",(function(){return stridedSliceImpl}));var r=n(0);function stridedSliceImpl(e,t,n,a){const s=Object(r.buffer)(e,t.dtype);for(let e=0;e<s.size;e++){const r=s.indexToLoc(e),o=new Array(r.length);for(let e=0;e<o.length;e++)o[e]=r[e]*n[e]+a[e];s.set(t.get(...o),...r)}return s}},function(e,t,n){"use strict";n.d(t,"a",(function(){return stringNGramsImpl}));var r=n(0);class StringNGramsOp{constructor(e,t,n,a,s,o){this.separator=r.util.encodeString(e),this.nGramWidths=t,this.leftPad=r.util.encodeString(n),this.rightPad=r.util.encodeString(a),this.padWidth=s,this.preserveShort=o}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),c=Math.max(0,i-(a-(o+1))),l=s-(u+c),p=t+(u>0?0:o-i);let h=0;h+=u*this.leftPad.length;for(let t=0;t<l;++t)h+=e[p+t].length;h+=c*this.rightPad.length;h+=(u+c+l-1)*this.separator.length,n[r+o]=new Uint8Array(h);const f=n[r+o];let m=0;const appendToNGram=e=>e.forEach(e=>f[m++]=e);for(let e=0;e<u;++e)appendToNGram(this.leftPad),appendToNGram(this.separator);for(let t=0;t<l-1;++t)appendToNGram(e[p+t]),appendToNGram(this.separator);if(l>0){appendToNGram(e[p+l-1]);for(let e=0;e<c;++e)appendToNGram(this.separator),appendToNGram(this.rightPad)}else{for(let e=0;e<c-1;++e)appendToNGram(this.rightPad),appendToNGram(this.separator);appendToNGram(this.rightPad)}}}compute(e,t){const n=e.length,a=t.length;if(a>0){let e=t[0];if(0!==e)throw new Error("First split value must be 0, got "+e);for(let r=1;r<a;++r){let a=t[r]>=e;if(a=a&&t[r]<=n,!a)throw new Error(`Invalid split value ${t[r]}, must be in [${e}, ${n}]`);e=t[r]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=a-1,o=r.util.getArrayFromDType("int32",a);if(0===n||0===a){const e=new Array(n);for(let e=0;e<=s;++e)o[e]=0;return[e,o]}o[0]=0;for(let e=1;e<=s;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach(e=>{r+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===r&&(r=1),o[e]=o[e-1]+r}const i=new Array(o[s]);for(let n=0;n<s;++n){const r=t[n];let a=o[n];if(this.nGramWidths.forEach(s=>{const o=t[n+1]-t[n],u=this.getNumNGrams(o,s);this.createNGrams(e,r,i,a,u,s),a+=u}),this.preserveShort&&a===o[n]){const s=t[n+1]-t[n];if(0===s)continue;const o=s+2*this.padWidth,u=1;this.createNGrams(e,r,i,a,u,o)}}return[i,o]}}function stringNGramsImpl(e,t,n,r,a,s,o,i){return new StringNGramsOp(n,r,a,s,o,i).compute(e,t)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return stringSplitImpl}));var r=n(0);function split(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return void(n&&0===e.length||r.push(e))}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}function stringSplitImpl(e,t,n){const a=e.length,s=[];let o=0,i=0;const u=new Array(a);for(let r=0;r<a;++r){const a=s.length;split(e[r],t,n,s);const c=s.length-a;u[r]=c,o+=c,i=Math.max(i,c)}const c=r.util.getArrayFromDType("int32",2*o),l=new Array(o),p=[a,i];let h=0;for(let e=0;e<a;++e)for(let t=0;t<u[e];++t)c[2*h]=e,c[2*h+1]=t,l[h]=s[h],++h;return[c,l,p]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return stringToHashBucketFastImpl}));var r=n(0);function stringToHashBucketFastImpl(e,t){const n=r.util.getArrayFromDType("int32",e.length);for(let a=0;a<e.length;++a)n[a]=r.util.fingerPrint64(e[a]).modulo(t).getLowBitsUnsigned();return n}},function(e,t,n){"use strict";n.d(t,"a",(function(){return tileImpl}));var r=n(0);function tileImpl(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const a=Object(r.buffer)(n,e.dtype);for(let t=0;t<a.values.length;++t){const n=a.indexToLoc(t),r=new Array(e.rank);for(let t=0;t<r.length;t++)r[t]=n[t]%e.shape[t];const s=e.locToIndex(r);a.values[t]=e.values[s]}return a}},function(e,t,n){"use strict";n.d(t,"a",(function(){return topKImpl}));var r=n(0);const comparePair=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function select(e,t,n=0,a=e.length-1){for(;a>n;){if(a-n>600){const r=a-n+1,s=t-n+1,o=Math.log(r),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(r-i)/r)*Math.sign(s-r/2);select(e,t,Math.max(n,Math.floor(t-s*i/r+u)),Math.min(a,Math.floor(t+(r-s)*i/r+u)))}const s=e[t];let o=n,i=a;for(r.util.swap(e,n,t),comparePair(e[a],s)>0&&r.util.swap(e,n,a);o<i;){for(r.util.swap(e,o,i),o++,i--;comparePair(e[o],s)<0;)o+=1;for(;comparePair(e[i],s)>0;)i-=1}0===comparePair(e[n],s)?r.util.swap(e,n,i):(i+=1,r.util.swap(e,i,a)),i<=t&&(n=i+1),t<=i&&(a=i-1)}}function topKImpl(e,t,n,a,s){const o=t[t.length-1],[i,u]=[e.length/o,o],c=r.util.getTypedArrayFromDType(n,i*a),l=r.util.getTypedArrayFromDType("int32",i*a);for(let t=0;t<i;t++){const n=t*u,r=e.subarray(n,n+u);let o=new Array(r.length);r.forEach((e,t)=>o[t]={value:e,index:t}),a<o.length&&(select(o,a),o=o.slice(0,a)),s&&o.sort(comparePair);const i=t*a,p=c.subarray(i,i+a),h=l.subarray(i,i+a);for(let e=0;e<a;e++)p[e]=o[e].value,h[e]=o[e].index}const p=t.slice();return p[p.length-1]=a,[Object(r.buffer)(p,n,c),Object(r.buffer)(p,"int32",l)]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return uniqueImpl}));var r=n(0);function uniqueImpl(e,t,n,a){const s=r.util.parseAxisParam(t,n)[0],o=[1,n[0],1];for(let e=0;e<s;e++)o[0]*=n[e];o[1]=n[s];for(let e=s+1;e<n.length;e++)o[2]*=n[e];const i={},u=new Int32Array(n[s]),c=new r.TensorBuffer(o,a,e),l=[],p=1===o[0]&&1===o[2];for(let t=0;t<n[s];t++){let n;if(p)n=e[t].toString();else{const e=[];for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)e.push(c.get(n,t,r));n=e.join(",")}if(void 0!==i[n])u[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,u[t]=e,l.push(t)}}const h=o.slice();h[1]=Object.keys(i).length;const f=new r.TensorBuffer(h,a);l.forEach((e,t)=>{for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)f.set(c.get(n,e,r),n,t,r)});const m=n.slice();return m[s]=h[1],{outputValues:f.values,outputShape:m,indices:u}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(6),o=n(24),i=n(3),u=n(7);const c=Object(i.b)({conv2DBackpropInput_:function conv2DBackpropInput_(e,t,n,i,c,l="NHWC",p){s.b(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let h=e,f=t,m=!1;3===t.rank&&(m=!0,f=Object(u.a)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),h=[1,e[0],e[1],e[2]]),s.b(4===h.length,()=>"Error in conv2dDerInput: inShape must be length 4, but got length "+h.length+"."),s.b(4===f.rank,()=>"Error in conv2dDerInput: dy must be rank 4, but got rank "+f.rank),s.b(4===n.rank,()=>"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank);const b="NHWC"===l?h[3]:h[1],g="NHWC"===l?f.shape[3]:f.shape[1];s.b(b===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${b}) must match input depth for filter ${n.shape[2]}.`),s.b(g===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${g}) must match output depth for filter ${n.shape[3]}.`),o.a("conv2dDerInput",c,p);const y={dy:f,filter:n},x={strides:i,pad:c,dataFormat:l,dimRoundingMode:p,inputShape:h},v=r.a.runKernel(a.F,y,x);return m?Object(u.a)(v,[v.shape[1],v.shape[2],v.shape[3]]):v}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return zeros}));var r=n(0),a=n(33);function zeros(e,t,n="float32"){if("complex64"===n){const n=zeros(e,t,"float32"),r=zeros(e,t,"float32");return Object(a.a)({inputs:{real:n,imag:r},backend:e})}const s=r.util.makeZerosTypedArray(r.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,s)}},function(e,t){e.exports=Long;var n=null;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function Long(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function isLong(e){return!0===(e&&e.__isLong__)}Long.prototype.__isLong__,Object.defineProperty(Long.prototype,"__isLong__",{value:!0}),Long.isLong=isLong;var r={},a={};function fromInt(e,t){var n,s,o;return t?(o=0<=(e>>>=0)&&e<256)&&(s=a[e])?s:(n=fromBits(e,(0|e)<0?-1:0,!0),o&&(a[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(s=r[e])?s:(n=fromBits(e,e<0?-1:0,!1),o&&(r[e]=n),n)}function fromNumber(e,t){if(isNaN(e))return t?p:l;if(t){if(e<0)return p;if(e>=i)return g}else{if(e<=-u)return y;if(e+1>=u)return b}return e<0?fromNumber(-e,t).neg():fromBits(e%o|0,e/o|0,t)}function fromBits(e,t,n){return new Long(e,t,n)}Long.fromInt=fromInt,Long.fromNumber=fromNumber,Long.fromBits=fromBits;var s=Math.pow;function fromString(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return l;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return fromString(e.substring(1),t,n).neg();for(var a=fromNumber(s(n,8)),o=l,i=0;i<e.length;i+=8){var u=Math.min(8,e.length-i),c=parseInt(e.substring(i,i+u),n);if(u<8){var p=fromNumber(s(n,u));o=o.mul(p).add(fromNumber(c))}else o=(o=o.mul(a)).add(fromNumber(c))}return o.unsigned=t,o}function fromValue(e,t){return"number"==typeof e?fromNumber(e,t):"string"==typeof e?fromString(e,t):fromBits(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}Long.fromString=fromString,Long.fromValue=fromValue;var o=4294967296,i=o*o,u=i/2,c=fromInt(1<<24),l=fromInt(0);Long.ZERO=l;var p=fromInt(0,!0);Long.UZERO=p;var h=fromInt(1);Long.ONE=h;var f=fromInt(1,!0);Long.UONE=f;var m=fromInt(-1);Long.NEG_ONE=m;var b=fromBits(-1,2147483647,!1);Long.MAX_VALUE=b;var g=fromBits(-1,-1,!0);Long.MAX_UNSIGNED_VALUE=g;var y=fromBits(0,-2147483648,!1);Long.MIN_VALUE=y;var x=Long.prototype;x.toInt=function toInt(){return this.unsigned?this.low>>>0:this.low},x.toNumber=function toNumber(){return this.unsigned?(this.high>>>0)*o+(this.low>>>0):this.high*o+(this.low>>>0)},x.toString=function toString(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(y)){var t=fromNumber(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=fromNumber(s(e,6),this.unsigned),o=this,i="";;){var u=o.div(a),c=(o.sub(u.mul(a)).toInt()>>>0).toString(e);if((o=u).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},x.getHighBits=function getHighBits(){return this.high},x.getHighBitsUnsigned=function getHighBitsUnsigned(){return this.high>>>0},x.getLowBits=function getLowBits(){return this.low},x.getLowBitsUnsigned=function getLowBitsUnsigned(){return this.low>>>0},x.getNumBitsAbs=function getNumBitsAbs(){if(this.isNegative())return this.eq(y)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},x.isZero=function isZero(){return 0===this.high&&0===this.low},x.eqz=x.isZero,x.isNegative=function isNegative(){return!this.unsigned&&this.high<0},x.isPositive=function isPositive(){return this.unsigned||this.high>=0},x.isOdd=function isOdd(){return 1==(1&this.low)},x.isEven=function isEven(){return 0==(1&this.low)},x.equals=function equals(e){return isLong(e)||(e=fromValue(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)},x.eq=x.equals,x.notEquals=function notEquals(e){return!this.eq(e)},x.neq=x.notEquals,x.ne=x.notEquals,x.lessThan=function lessThan(e){return this.comp(e)<0},x.lt=x.lessThan,x.lessThanOrEqual=function lessThanOrEqual(e){return this.comp(e)<=0},x.lte=x.lessThanOrEqual,x.le=x.lessThanOrEqual,x.greaterThan=function greaterThan(e){return this.comp(e)>0},x.gt=x.greaterThan,x.greaterThanOrEqual=function greaterThanOrEqual(e){return this.comp(e)>=0},x.gte=x.greaterThanOrEqual,x.ge=x.greaterThanOrEqual,x.compare=function compare(e){if(isLong(e)||(e=fromValue(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},x.comp=x.compare,x.negate=function negate(){return!this.unsigned&&this.eq(y)?y:this.not().add(h)},x.neg=x.negate,x.add=function add(e){isLong(e)||(e=fromValue(e));var t=this.high>>>16,n=65535&this.high,r=this.low>>>16,a=65535&this.low,s=e.high>>>16,o=65535&e.high,i=e.low>>>16,u=0,c=0,l=0,p=0;return l+=(p+=a+(65535&e.low))>>>16,c+=(l+=r+i)>>>16,u+=(c+=n+o)>>>16,u+=t+s,fromBits((l&=65535)<<16|(p&=65535),(u&=65535)<<16|(c&=65535),this.unsigned)},x.subtract=function subtract(e){return isLong(e)||(e=fromValue(e)),this.add(e.neg())},x.sub=x.subtract,x.multiply=function multiply(e){if(this.isZero())return l;if(isLong(e)||(e=fromValue(e)),n)return fromBits(n.mul(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned);if(e.isZero())return l;if(this.eq(y))return e.isOdd()?y:l;if(e.eq(y))return this.isOdd()?y:l;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(c)&&e.lt(c))return fromNumber(this.toNumber()*e.toNumber(),this.unsigned);var t=this.high>>>16,r=65535&this.high,a=this.low>>>16,s=65535&this.low,o=e.high>>>16,i=65535&e.high,u=e.low>>>16,p=65535&e.low,h=0,f=0,m=0,b=0;return m+=(b+=s*p)>>>16,f+=(m+=a*p)>>>16,m&=65535,f+=(m+=s*u)>>>16,h+=(f+=r*p)>>>16,f&=65535,h+=(f+=a*u)>>>16,f&=65535,h+=(f+=s*i)>>>16,h+=t*p+r*u+a*i+s*o,fromBits((m&=65535)<<16|(b&=65535),(h&=65535)<<16|(f&=65535),this.unsigned)},x.mul=x.multiply,x.divide=function divide(e){if(isLong(e)||(e=fromValue(e)),e.isZero())throw Error("division by zero");var t,r,a;if(n)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?fromBits((this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?p:l;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return p;if(e.gt(this.shru(1)))return f;a=p}else{if(this.eq(y))return e.eq(h)||e.eq(m)?y:e.eq(y)?h:(t=this.shr(1).div(e).shl(1)).eq(l)?e.isNegative()?h:m:(r=this.sub(e.mul(t)),a=t.add(r.div(e)));if(e.eq(y))return this.unsigned?p:l;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=l}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(t)/Math.LN2),i=o<=48?1:s(2,o-48),u=fromNumber(t),c=u.mul(e);c.isNegative()||c.gt(r);)c=(u=fromNumber(t-=i,this.unsigned)).mul(e);u.isZero()&&(u=h),a=a.add(u),r=r.sub(c)}return a},x.div=x.divide,x.modulo=function modulo(e){return isLong(e)||(e=fromValue(e)),n?fromBits((this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high),n.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},x.mod=x.modulo,x.rem=x.modulo,x.not=function not(){return fromBits(~this.low,~this.high,this.unsigned)},x.and=function and(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low&e.low,this.high&e.high,this.unsigned)},x.or=function or(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low|e.low,this.high|e.high,this.unsigned)},x.xor=function xor(e){return isLong(e)||(e=fromValue(e)),fromBits(this.low^e.low,this.high^e.high,this.unsigned)},x.shiftLeft=function shiftLeft(e){return isLong(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):fromBits(0,this.low<<e-32,this.unsigned)},x.shl=x.shiftLeft,x.shiftRight=function shiftRight(e){return isLong(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},x.shr=x.shiftRight,x.shiftRightUnsigned=function shiftRightUnsigned(e){if(isLong(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?fromBits(this.low>>>e|t<<32-e,t>>>e,this.unsigned):fromBits(32===e?t:t>>>e-32,0,this.unsigned)},x.shru=x.shiftRightUnsigned,x.shr_u=x.shiftRightUnsigned,x.toSigned=function toSigned(){return this.unsigned?fromBits(this.low,this.high,!1):this},x.toUnsigned=function toUnsigned(){return this.unsigned?this:fromBits(this.low,this.high,!0)},x.toBytes=function toBytes(e){return e?this.toBytesLE():this.toBytesBE()},x.toBytesLE=function toBytesLE(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},x.toBytesBE=function toBytesBE(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},Long.fromBytes=function fromBytes(e,t,n){return n?Long.fromBytesLE(e,t):Long.fromBytesBE(e,t)},Long.fromBytesLE=function fromBytesLE(e,t){return new Long(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},Long.fromBytesBE=function fromBytesBE(e,t){return new Long(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},function(e,t,n){"use strict";(function(e){var r=n(266),a=n(267),s=n(268);function kMaxLength(){return Buffer.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(e,t){if(kMaxLength()<t)throw new RangeError("Invalid typed array length");return Buffer.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=Buffer.prototype:(null===e&&(e=new Buffer(t)),e.length=t),e}function Buffer(e,t,n){if(!(Buffer.TYPED_ARRAY_SUPPORT||this instanceof Buffer))return new Buffer(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe(this,e)}return from(this,e,t,n)}function from(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function fromArrayBuffer(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);Buffer.TYPED_ARRAY_SUPPORT?(e=t).__proto__=Buffer.prototype:e=fromArrayLike(e,t);return e}(e,t,n,r):"string"==typeof t?function fromString(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!Buffer.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|byteLength(t,n),a=(e=createBuffer(e,r)).write(t,n);a!==r&&(e=e.slice(0,a));return e}(e,t,n):function fromObject(e,t){if(Buffer.isBuffer(t)){var n=0|checked(t.length);return 0===(e=createBuffer(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function isnan(e){return e!=e}(t.length)?createBuffer(e,0):fromArrayLike(e,t);if("Buffer"===t.type&&s(t.data))return fromArrayLike(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function allocUnsafe(e,t){if(assertSize(t),e=createBuffer(e,t<0?0:0|checked(t)),!Buffer.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function fromArrayLike(e,t){var n=t.length<0?0:0|checked(t.length);e=createBuffer(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function checked(e){if(e>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|e}function byteLength(e,t){if(Buffer.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return base64ToBytes(e).length;default:if(r)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),r=!0}}function slowToString(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,n);case"utf8":case"utf-8":return utf8Slice(this,t,n);case"ascii":return asciiSlice(this,t,n);case"latin1":case"binary":return latin1Slice(this,t,n);case"base64":return base64Slice(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function swap(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function bidirectionalIndexOf(e,t,n,r,a){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=a?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(a)return-1;n=e.length-1}else if(n<0){if(!a)return-1;n=0}if("string"==typeof t&&(t=Buffer.from(t,r)),Buffer.isBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,n,r,a);if("number"==typeof t)return t&=255,Buffer.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?a?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):arrayIndexOf(e,[t],n,r,a);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,n,r,a){var s,o=1,i=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;o=2,i/=2,u/=2,n/=2}function read(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(a){var c=-1;for(s=n;s<i;s++)if(read(e,s)===read(t,-1===c?0:s-c)){if(-1===c&&(c=s),s-c+1===u)return c*o}else-1!==c&&(s-=s-c),c=-1}else for(n+u>i&&(n=i-u),s=n;s>=0;s--){for(var l=!0,p=0;p<u;p++)if(read(e,s+p)!==read(t,p)){l=!1;break}if(l)return s}return-1}function hexWrite(e,t,n,r){n=Number(n)||0;var a=e.length-n;r?(r=Number(r))>a&&(r=a):r=a;var s=t.length;if(s%2!=0)throw new TypeError("Invalid hex string");r>s/2&&(r=s/2);for(var o=0;o<r;++o){var i=parseInt(t.substr(2*o,2),16);if(isNaN(i))return o;e[n+o]=i}return o}function utf8Write(e,t,n,r){return blitBuffer(utf8ToBytes(t,e.length-n),e,n,r)}function asciiWrite(e,t,n,r){return blitBuffer(function asciiToBytes(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function latin1Write(e,t,n,r){return asciiWrite(e,t,n,r)}function base64Write(e,t,n,r){return blitBuffer(base64ToBytes(t),e,n,r)}function ucs2Write(e,t,n,r){return blitBuffer(function utf16leToBytes(e,t){for(var n,r,a,s=[],o=0;o<e.length&&!((t-=2)<0);++o)n=e.charCodeAt(o),r=n>>8,a=n%256,s.push(a),s.push(r);return s}(t,e.length-n),e,n,r)}function base64Slice(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function utf8Slice(e,t,n){n=Math.min(e.length,n);for(var r=[],a=t;a<n;){var s,o,i,u,c=e[a],l=null,p=c>239?4:c>223?3:c>191?2:1;if(a+p<=n)switch(p){case 1:c<128&&(l=c);break;case 2:128==(192&(s=e[a+1]))&&(u=(31&c)<<6|63&s)>127&&(l=u);break;case 3:s=e[a+1],o=e[a+2],128==(192&s)&&128==(192&o)&&(u=(15&c)<<12|(63&s)<<6|63&o)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:s=e[a+1],o=e[a+2],i=e[a+3],128==(192&s)&&128==(192&o)&&128==(192&i)&&(u=(15&c)<<18|(63&s)<<12|(63&o)<<6|63&i)>65535&&u<1114112&&(l=u)}null===l?(l=65533,p=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),a+=p}return function decodeCodePointsArray(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=Buffer,t.SlowBuffer=function SlowBuffer(e){+e!=e&&(e=0);return Buffer.alloc(+e)},t.INSPECT_MAX_BYTES=50,Buffer.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function typedArraySupport(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=kMaxLength(),Buffer.poolSize=8192,Buffer._augment=function(e){return e.__proto__=Buffer.prototype,e},Buffer.from=function(e,t,n){return from(null,e,t,n)},Buffer.TYPED_ARRAY_SUPPORT&&(Buffer.prototype.__proto__=Uint8Array.prototype,Buffer.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&Buffer[Symbol.species]===Buffer&&Object.defineProperty(Buffer,Symbol.species,{value:null,configurable:!0})),Buffer.alloc=function(e,t,n){return function alloc(e,t,n,r){return assertSize(t),t<=0?createBuffer(e,t):void 0!==n?"string"==typeof r?createBuffer(e,t).fill(n,r):createBuffer(e,t).fill(n):createBuffer(e,t)}(null,e,t,n)},Buffer.allocUnsafe=function(e){return allocUnsafe(null,e)},Buffer.allocUnsafeSlow=function(e){return allocUnsafe(null,e)},Buffer.isBuffer=function isBuffer(e){return!(null==e||!e._isBuffer)},Buffer.compare=function compare(e,t){if(!Buffer.isBuffer(e)||!Buffer.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,a=0,s=Math.min(n,r);a<s;++a)if(e[a]!==t[a]){n=e[a],r=t[a];break}return n<r?-1:r<n?1:0},Buffer.isEncoding=function isEncoding(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer.concat=function concat(e,t){if(!s(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=Buffer.allocUnsafe(t),a=0;for(n=0;n<e.length;++n){var o=e[n];if(!Buffer.isBuffer(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,a),a+=o.length}return r},Buffer.byteLength=byteLength,Buffer.prototype._isBuffer=!0,Buffer.prototype.swap16=function swap16(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer.prototype.swap32=function swap32(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer.prototype.swap64=function swap64(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer.prototype.toString=function toString(){var e=0|this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer.prototype.equals=function equals(e){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer.compare(this,e)},Buffer.prototype.inspect=function inspect(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},Buffer.prototype.compare=function compare(e,t,n,r,a){if(!Buffer.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===a&&(a=this.length),t<0||n>e.length||r<0||a>this.length)throw new RangeError("out of range index");if(r>=a&&t>=n)return 0;if(r>=a)return-1;if(t>=n)return 1;if(this===e)return 0;for(var s=(a>>>=0)-(r>>>=0),o=(n>>>=0)-(t>>>=0),i=Math.min(s,o),u=this.slice(r,a),c=e.slice(t,n),l=0;l<i;++l)if(u[l]!==c[l]){s=u[l],o=c[l];break}return s<o?-1:o<s?1:0},Buffer.prototype.includes=function includes(e,t,n){return-1!==this.indexOf(e,t,n)},Buffer.prototype.indexOf=function indexOf(e,t,n){return bidirectionalIndexOf(this,e,t,n,!0)},Buffer.prototype.lastIndexOf=function lastIndexOf(e,t,n){return bidirectionalIndexOf(this,e,t,n,!1)},Buffer.prototype.write=function write(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var a=this.length-t;if((void 0===n||n>a)&&(n=a),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var s=!1;;)switch(r){case"hex":return hexWrite(this,e,t,n);case"utf8":case"utf-8":return utf8Write(this,e,t,n);case"ascii":return asciiWrite(this,e,t,n);case"latin1":case"binary":return latin1Write(this,e,t,n);case"base64":return base64Write(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,n);default:if(s)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),s=!0}},Buffer.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function asciiSlice(e,t,n){var r="";n=Math.min(e.length,n);for(var a=t;a<n;++a)r+=String.fromCharCode(127&e[a]);return r}function latin1Slice(e,t,n){var r="";n=Math.min(e.length,n);for(var a=t;a<n;++a)r+=String.fromCharCode(e[a]);return r}function hexSlice(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var a="",s=t;s<n;++s)a+=toHex(e[s]);return a}function utf16leSlice(e,t,n){for(var r=e.slice(t,n),a="",s=0;s<r.length;s+=2)a+=String.fromCharCode(r[s]+256*r[s+1]);return a}function checkOffset(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,n,r,a,s){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>a||t<s)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function objectWriteUInt16(e,t,n,r){t<0&&(t=65535+t+1);for(var a=0,s=Math.min(e.length-n,2);a<s;++a)e[n+a]=(t&255<<8*(r?a:1-a))>>>8*(r?a:1-a)}function objectWriteUInt32(e,t,n,r){t<0&&(t=4294967295+t+1);for(var a=0,s=Math.min(e.length-n,4);a<s;++a)e[n+a]=t>>>8*(r?a:3-a)&255}function checkIEEE754(e,t,n,r,a,s){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function writeFloat(e,t,n,r,s){return s||checkIEEE754(e,0,n,4),a.write(e,t,n,r,23,4),n+4}function writeDouble(e,t,n,r,s){return s||checkIEEE754(e,0,n,8),a.write(e,t,n,r,52,8),n+8}Buffer.prototype.slice=function slice(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),Buffer.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=Buffer.prototype;else{var a=t-e;n=new Buffer(a,void 0);for(var s=0;s<a;++s)n[s]=this[s+e]}return n},Buffer.prototype.readUIntLE=function readUIntLE(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e],a=1,s=0;++s<t&&(a*=256);)r+=this[e+s]*a;return r},Buffer.prototype.readUIntBE=function readUIntBE(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e+--t],a=1;t>0&&(a*=256);)r+=this[e+--t]*a;return r},Buffer.prototype.readUInt8=function readUInt8(e,t){return t||checkOffset(e,1,this.length),this[e]},Buffer.prototype.readUInt16LE=function readUInt16LE(e,t){return t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer.prototype.readUInt16BE=function readUInt16BE(e,t){return t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer.prototype.readUInt32LE=function readUInt32LE(e,t){return t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer.prototype.readUInt32BE=function readUInt32BE(e,t){return t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer.prototype.readIntLE=function readIntLE(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=this[e],a=1,s=0;++s<t&&(a*=256);)r+=this[e+s]*a;return r>=(a*=128)&&(r-=Math.pow(2,8*t)),r},Buffer.prototype.readIntBE=function readIntBE(e,t,n){e|=0,t|=0,n||checkOffset(e,t,this.length);for(var r=t,a=1,s=this[e+--r];r>0&&(a*=256);)s+=this[e+--r]*a;return s>=(a*=128)&&(s-=Math.pow(2,8*t)),s},Buffer.prototype.readInt8=function readInt8(e,t){return t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer.prototype.readInt16LE=function readInt16LE(e,t){t||checkOffset(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},Buffer.prototype.readInt16BE=function readInt16BE(e,t){t||checkOffset(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},Buffer.prototype.readInt32LE=function readInt32LE(e,t){return t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer.prototype.readInt32BE=function readInt32BE(e,t){return t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer.prototype.readFloatLE=function readFloatLE(e,t){return t||checkOffset(e,4,this.length),a.read(this,e,!0,23,4)},Buffer.prototype.readFloatBE=function readFloatBE(e,t){return t||checkOffset(e,4,this.length),a.read(this,e,!1,23,4)},Buffer.prototype.readDoubleLE=function readDoubleLE(e,t){return t||checkOffset(e,8,this.length),a.read(this,e,!0,52,8)},Buffer.prototype.readDoubleBE=function readDoubleBE(e,t){return t||checkOffset(e,8,this.length),a.read(this,e,!1,52,8)},Buffer.prototype.writeUIntLE=function writeUIntLE(e,t,n,r){(e=+e,t|=0,n|=0,r)||checkInt(this,e,t,n,Math.pow(2,8*n)-1,0);var a=1,s=0;for(this[t]=255&e;++s<n&&(a*=256);)this[t+s]=e/a&255;return t+n},Buffer.prototype.writeUIntBE=function writeUIntBE(e,t,n,r){(e=+e,t|=0,n|=0,r)||checkInt(this,e,t,n,Math.pow(2,8*n)-1,0);var a=n-1,s=1;for(this[t+a]=255&e;--a>=0&&(s*=256);)this[t+a]=e/s&255;return t+n},Buffer.prototype.writeUInt8=function writeUInt8(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,1,255,0),Buffer.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},Buffer.prototype.writeUInt16LE=function writeUInt16LE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer.prototype.writeUInt16BE=function writeUInt16BE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,65535,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer.prototype.writeUInt32LE=function writeUInt32LE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):objectWriteUInt32(this,e,t,!0),t+4},Buffer.prototype.writeUInt32BE=function writeUInt32BE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,4294967295,0),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer.prototype.writeIntLE=function writeIntLE(e,t,n,r){if(e=+e,t|=0,!r){var a=Math.pow(2,8*n-1);checkInt(this,e,t,n,a-1,-a)}var s=0,o=1,i=0;for(this[t]=255&e;++s<n&&(o*=256);)e<0&&0===i&&0!==this[t+s-1]&&(i=1),this[t+s]=(e/o>>0)-i&255;return t+n},Buffer.prototype.writeIntBE=function writeIntBE(e,t,n,r){if(e=+e,t|=0,!r){var a=Math.pow(2,8*n-1);checkInt(this,e,t,n,a-1,-a)}var s=n-1,o=1,i=0;for(this[t+s]=255&e;--s>=0&&(o*=256);)e<0&&0===i&&0!==this[t+s+1]&&(i=1),this[t+s]=(e/o>>0)-i&255;return t+n},Buffer.prototype.writeInt8=function writeInt8(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,1,127,-128),Buffer.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer.prototype.writeInt16LE=function writeInt16LE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer.prototype.writeInt16BE=function writeInt16BE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,2,32767,-32768),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer.prototype.writeInt32LE=function writeInt32LE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,2147483647,-2147483648),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):objectWriteUInt32(this,e,t,!0),t+4},Buffer.prototype.writeInt32BE=function writeInt32BE(e,t,n){return e=+e,t|=0,n||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),Buffer.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer.prototype.writeFloatLE=function writeFloatLE(e,t,n){return writeFloat(this,e,t,!0,n)},Buffer.prototype.writeFloatBE=function writeFloatBE(e,t,n){return writeFloat(this,e,t,!1,n)},Buffer.prototype.writeDoubleLE=function writeDoubleLE(e,t,n){return writeDouble(this,e,t,!0,n)},Buffer.prototype.writeDoubleBE=function writeDoubleBE(e,t,n){return writeDouble(this,e,t,!1,n)},Buffer.prototype.copy=function copy(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var a,s=r-n;if(this===e&&n<t&&t<r)for(a=s-1;a>=0;--a)e[a+t]=this[a+n];else if(s<1e3||!Buffer.TYPED_ARRAY_SUPPORT)for(a=0;a<s;++a)e[a+t]=this[a+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),t);return s},Buffer.prototype.fill=function fill(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var a=e.charCodeAt(0);a<256&&(e=a)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Buffer.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{var o=Buffer.isBuffer(e)?e:utf8ToBytes(new Buffer(e,r).toString()),i=o.length;for(s=0;s<n-t;++s)this[s+t]=o[s%i]}return this};var o=/[^+\/0-9A-Za-z-_]/g;function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){var n;t=t||1/0;for(var r=e.length,a=null,s=[],o=0;o<r;++o){if((n=e.charCodeAt(o))>55295&&n<57344){if(!a){if(n>56319){(t-=3)>-1&&s.push(239,191,189);continue}if(o+1===r){(t-=3)>-1&&s.push(239,191,189);continue}a=n;continue}if(n<56320){(t-=3)>-1&&s.push(239,191,189),a=n;continue}n=65536+(a-55296<<10|n-56320)}else a&&(t-=3)>-1&&s.push(239,191,189);if(a=null,n<128){if((t-=1)<0)break;s.push(n)}else if(n<2048){if((t-=2)<0)break;s.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;s.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;s.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return s}function base64ToBytes(e){return r.toByteArray(function base64clean(e){if((e=function stringtrim(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(o,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function blitBuffer(e,t,n,r){for(var a=0;a<r&&!(a+n>=t.length||a>=e.length);++a)t[a+n]=e[a];return a}}).call(this,n(116))},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({acos_:function acos_(e){const t={x:Object(s.a)(e,"x","acos")};return r.a.runKernel(a.b,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({acosh_:function acosh_(e){const t={x:Object(s.a)(e,"x","acosh")};return r.a.runKernel(a.c,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({addN_:function addN_(e){o.b(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),o.b(e.length>=1,()=>"Must pass at least one tensor to tf.addN(), but got "+e.length);const t=e.map((e,t)=>Object(s.a)(e,"tensors"+t,"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!o.a(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const i=t;return r.a.runKernel(a.e,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({all_:function all_(e,t=null,n=!1){const o={x:Object(s.a)(e,"x","all","bool")},i={axis:t,keepDims:n};return r.a.runKernel(a.f,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({any_:function any_(e,t=null,n=!1){const o={x:Object(s.a)(e,"x","any","bool")},i={axis:t,keepDims:n};return r.a.runKernel(a.g,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({argMax_:function argMax_(e,t=0){const n={x:Object(s.a)(e,"x","argMax")},o={axis:t};return r.a.runKernel(a.h,n,o)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({argMin_:function argMin_(e,t=0){const n={x:Object(s.a)(e,"x","argMin")},o={axis:t};return r.a.runKernel(a.i,n,o)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({asin_:function asin_(e){const t={x:Object(s.a)(e,"x","asin")};return r.a.runKernel(a.j,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({asinh_:function asinh_(e){const t={x:Object(s.a)(e,"x","asinh")};return r.a.runKernel(a.k,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({atan_:function atan_(e){const t={x:Object(s.a)(e,"x","atan")};return r.a.runKernel(a.l,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({atan2_:function atan2_(e,t){let n=Object(o.a)(e,"a","atan2"),i=Object(o.a)(t,"b","atan2");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.m,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({atanh_:function atanh_(e){const t={x:Object(s.a)(e,"x","atanh")};return r.a.runKernel(a.n,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(24),u=n(23),c=n(3),l=n(7);const p=Object(c.b)({avgPool3d_:function avgPool3d_(e,t,n,c,p,h="NDHWC"){const f=Object(s.a)(e,"x","avgPool3d","float32");let m=f,b=!1;4===f.rank&&(b=!0,m=Object(l.a)(f,[1,f.shape[0],f.shape[1],f.shape[2],f.shape[3]])),o.b(5===m.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${m.rank}.`),o.b("NDHWC"===h,()=>"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+h),Object(i.a)("avgPool3d",c,p);const g={x:m},y={filterSize:t,strides:n,pad:c,dimRoundingMode:p,dataFormat:h};let x=r.a.runKernel(a.p,g,y);return x=Object(u.a)(x,m.dtype),b?Object(l.a)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({broadcastArgs_:function broadcastArgs_(e,t){const n=Object(s.a)(e,"s0","broadcastArgs","int32"),o=Object(s.a)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error("broadcastArgs(): first input must be a vector (rank=1). Has rank "+n.rank);if(1!==o.rank)throw new Error("broadcastArgs(): second input must be a vector (rank=1). Has rank "+o.rank);const i={s0:n,s1:o};return r.a.runKernel(a.v,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({ceil_:function ceil_(e){const t={x:Object(s.a)(e,"x","ceil","float32")};return r.a.runKernel(a.y,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({clipByValue_:function clipByValue_(e,t,n){const i=Object(s.a)(e,"x","clipByValue");o.b(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`);const u={x:i},c={clipValueMin:t,clipValueMax:n};return r.a.runKernel(a.z,u,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(2),a=n(6),s=n(75),o=n(24),i=n(3),u=n(7);const c=Object(i.b)({conv1d_:function conv1d_(e,t,n,i,c="NWC",l=1,p){const h=Object(r.a)(e,"x","conv1d"),f=Object(r.a)(t,"filter","conv1d");let m=h,b=!1;2===h.rank&&(b=!0,m=Object(u.a)(h,[1,h.shape[0],h.shape[1]])),a.b(3===m.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${m.rank}.`),a.b(3===f.rank,()=>"Error in conv1d: filter must be rank 3, but got rank "+f.rank+"."),o.a("conv1d",i,p),a.b(m.shape[2]===f.shape[1],()=>`Error in conv1d: depth of input (${m.shape[2]}) must match input depth for filter ${f.shape[1]}.`),a.b(o.i(n,l),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${l}'`),a.b("NWC"===c,()=>`Error in conv1d: got dataFormat of ${c} but only NWC is currently supported.`);const g=Object(u.a)(f,[1,f.shape[0],f.shape[1],f.shape[2]]),y=Object(u.a)(m,[m.shape[0],1,m.shape[1],m.shape[2]]),x=[1,n],v=[1,l],O=Object(s.a)(y,g,x,i,"NHWC",v,p);return b?Object(u.a)(O,[O.shape[2],O.shape[3]]):Object(u.a)(O,[O.shape[0],O.shape[2],O.shape[3]])}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(2),a=n(183),s=n(3);const o=Object(s.b)({conv2dTranspose_:function conv2dTranspose_(e,t,n,s,o,i){const u=Object(r.a)(e,"x","conv2dTranspose"),c=Object(r.a)(t,"filter","conv2dTranspose");return Object(a.a)(n,u,c,s,o,"NHWC",i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(24),u=n(3),c=n(7);const l=Object(u.b)({conv3d_:function conv3d_(e,t,n,u,l="NDHWC",p=[1,1,1]){const h=Object(s.a)(e,"x","conv3d"),f=Object(s.a)(t,"filter","conv3d");let m=h,b=!1;4===h.rank&&(b=!0,m=Object(c.a)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),o.b(5===m.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${m.rank}.`),o.b(5===f.rank,()=>"Error in conv3d: filter must be rank 5, but got rank "+f.rank+"."),o.b(m.shape[4]===f.shape[3],()=>`Error in conv3d: depth of input (${m.shape[4]}) must match input depth for filter ${f.shape[3]}.`),o.b(Object(i.i)(n,p),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${p}'`),o.b("NDHWC"===l,()=>`Error in conv3d: got dataFormat of ${l} but only NDHWC is currently supported.`);const g={x:m,filter:f},y={strides:n,pad:u,dataFormat:l,dilations:p},x=r.a.runKernel(a.G,g,y);return b?Object(c.a)(x,[x.shape[1],x.shape[2],x.shape[3],x.shape[4]]):x}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({cos_:function cos_(e){const t={x:Object(s.a)(e,"x","cos","float32")};return r.a.runKernel(a.J,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({cosh_:function cosh_(e){const t={x:Object(s.a)(e,"x","cosh","float32")};return r.a.runKernel(a.K,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({cumsum_:function cumsum_(e,t=0,n=!1,o=!1){const i={x:Object(s.a)(e,"x","cumsum")},u={axis:t,exclusive:n,reverse:o};return r.a.runKernel(a.M,i,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({denseBincount_:function denseBincount_(e,t,n,i=!1){const u=Object(s.a)(e,"x","denseBincount"),c=Object(s.a)(t,"weights","denseBincount");o.b("int32"===u.dtype,()=>"Error in denseBincount: input dtype must be int32, but got "+u.dtype),o.b(u.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${u.rank}.`),o.b(n>=0,()=>`size must be non-negative, but got ${n}.`),o.b(c.size===u.size||0===c.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${u.shape}, weights shape: `+c.shape+".");const l={x:u,weights:c},p={size:n,binaryOutput:i};return r.a.runKernel(a.N,l,p)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({depthToSpace_:function depthToSpace_(e,t,n="NHWC"){const i=Object(s.a)(e,"x","depthToSpace","float32"),u="NHWC"===n?i.shape[1]:i.shape[2],c="NHWC"===n?i.shape[2]:i.shape[3],l="NHWC"===n?i.shape[3]:i.shape[1];o.b(t>1,()=>"blockSize should be > 1 for depthToSpace, but was: "+t),o.b(u*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t}  for depthToSpace with input shape\n    ${i.shape}`),o.b(c*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${c} and ${t} for depthToSpace with input shape\n        ${i.shape}`),o.b(l%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${l} for depthToSpace with input shape ${i.shape}`);const p={x:i},h={blockSize:t,dataFormat:n};return r.a.runKernel(a.O,p,h)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3),u=n(7);const c=Object(i.b)({dilation2d_:function dilation2d_(e,t,n,i,c=[1,1],l="NHWC"){const p=Object(s.a)(e,"x","dilation2d"),h=Object(s.a)(t,"filter","dilation2d");o.b(3===p.rank||4===p.rank,()=>"Error in dilation2d: input must be rank 3 or 4, but got rank "+p.rank+"."),o.b(3===h.rank,()=>"Error in dilation2d: filter must be rank 3, but got rank "+h.rank+"."),o.b("NHWC"===l,()=>"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+l);let f=p,m=!1;3===p.rank&&(f=Object(u.a)(p,[1,p.shape[0],p.shape[1],p.shape[2]]),m=!0);const b={x:f,filter:h},g={strides:n,pad:i,dilations:c},y=r.a.runKernel(a.T,b,g);return m?Object(u.a)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(15),a=n(2),s=n(21),o=n(126),i=n(3),u=n(56),c=n(34);const l=Object(i.b)({divNoNan_:function divNoNan_(e,t){let n=Object(a.a)(e,"a","div"),i=Object(a.a)(t,"b","div");[n,i]=Object(r.makeTypesMatch)(n,i);const l=Object(s.a)(n,i),p=Object(c.a)(l),h=Object(o.a)(i,p);return Object(u.a)(h,p,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({einsum_:function einsum_(e,...t){const n=t.map((e,t)=>Object(s.a)(e,"tensors"+t,"einsum")),o={equation:e};return r.a.runKernel(a.W,n,o)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(23),u=n(3);const c=Object(u.b)({erf_:function erf_(e){let t=Object(s.a)(e,"x","erf");o.b("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=Object(i.a)(t,"float32"));const n={x:t};return r.a.runKernel(a.ab,n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({expm1_:function expm1_(e){const t={x:Object(s.a)(e,"x","expm1")};return r.a.runKernel(a.db,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({isNaN_:function isNaN_(e){const t={x:Object(s.a)(e,"x","isNaN")};return r.a.runKernel(a.wb,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(20),u=n(3);const c=Object(u.b)({less_:function less_(e,t){let n=Object(o.a)(e,"a","less","string_or_numeric"),u=Object(o.a)(t,"b","less","string_or_numeric");[n,u]=Object(s.makeTypesMatch)(n,u),Object(i.assertAndGetBroadcastShape)(n.shape,u.shape);const c={a:n,b:u};return r.a.runKernel(a.Ab,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return linspace}));var r=n(4),a=n(5);function linspace(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return r.a.runKernel(a.Cb,{},s)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3),u=n(7);const c=Object(i.b)({localResponseNormalization_:function localResponseNormalization_(e,t=5,n=1,i=1,c=.5){const l=Object(s.a)(e,"x","localResponseNormalization");o.b(4===l.rank||3===l.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${l.rank}.`),o.b(o.v(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let p=l,h=!1;3===l.rank&&(h=!0,p=Object(u.a)(l,[1,l.shape[0],l.shape[1],l.shape[2]]));const f={x:p},m={depthRadius:t,bias:n,alpha:i,beta:c},b=r.a.runKernel(a.xb,f,m);return h?Object(u.a)(b,[b.shape[1],b.shape[2],b.shape[3]]):b}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return f}));var r=n(30),a=n(2),s=n(23),o=n(55),i=n(68),u=n(66),c=n(10),l=n(3),p=n(14),h=n(27);const f=Object(l.b)({logSoftmax_:function logSoftmax_(e,t=-1){const n=Object(a.a)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);return Object(r.a)((e,n)=>{const r=Object(u.a)(e,t,!0),a=Object(p.a)(e,r),l=Object(p.a)(Object(s.a)(a,"float32"),Object(i.a)(Object(h.a)(Object(o.a)(a),t,!0)));n([l]);return{value:l,gradFunc:(e,n)=>{const[r]=n,a=Object(o.a)(r);return Object(p.a)(e,Object(c.a)(Object(h.a)(e,t,!0),a))}}})(n)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(24),u=n(3),c=n(7);const l=Object(u.b)({maxPool3d_:function maxPool3d_(e,t=[1,1,1],n,u,l,p="NDHWC"){const h=Object(s.a)(e,"x","maxPool3d");let f=h,m=!1;4===h.rank&&(m=!0,f=Object(c.a)(h,[1,h.shape[0],h.shape[1],h.shape[2],h.shape[3]])),o.b(5===f.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${f.rank}.`),o.b("NDHWC"===p,()=>"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+p),Object(i.a)("maxPool3d",u,l);const b={x:f},g={filterSize:t,strides:n,pad:u,dimRoundingMode:l,dataFormat:p},y=r.a.runKernel(a.Lb,b,g);return m?Object(c.a)(y,[y.shape[1],y.shape[2],y.shape[3],y.shape[4]]):y}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({maxPoolWithArgmax_:function maxPoolWithArgmax_(e,t,n,o,i=!1){const u={x:Object(s.a)(e,"x","maxPoolWithArgmax")},c={filterSize:t,strides:n,pad:o,includeBatchInIndex:i},l=r.a.runKernel(a.Ob,u,c);return{result:l[0],indexes:l[1]}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({mirrorPad_:function mirrorPad_(e,t,n){o.b("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const i=Object(s.a)(e,"x","mirrorPad");if(0===i.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");o.b(t.length===i.rank,()=>`Padding doesn't match input. Must be ${i.rank}. Got ${t.length}.`);const u="reflect"===n?1:0;for(let e=0;e<i.rank;e++)o.b(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),o.b(t[e][0]>=0&&t[e][0]<=i.shape[e]-u&&t[e][1]>=0&&t[e][1]<=i.shape[e]-u,()=>`Padding in dimension ${e} cannot be greater than or equal to ${i.shape[e]-u} or less than 0 for input of shape `+i.shape);const c={paddings:t,mode:n},l={x:i};return r.a.runKernel(a.Tb,l,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(15),o=n(2),i=n(3);const u=Object(i.b)({mod_:function mod_(e,t){let n=Object(o.a)(e,"a","mod"),i=Object(o.a)(t,"b","mod");[n,i]=Object(s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.a.runKernel(a.Ub,u)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(3),i=n(7);const u=Object(o.b)({multinomial_:function multinomial_(e,t,n,o=!1){const u=Object(s.a)(e,"logits","multinomial"),c=u.size,l=u.rank;if(c<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+c+".");if(l>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+l);n=n||Math.random();const p={logits:1===l?Object(i.a)(u,[1,-1]):u},h={numSamples:t,seed:n,normalized:o},f=r.a.runKernel(a.Vb,p,h);return 1===l?Object(i.a)(f,[f.size]):f}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({onesLike_:function onesLike_(e){const t={x:Object(s.a)(e,"x","onesLike")};return r.a.runKernel(a.dc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(23),i=n(3);const u=Object(i.b)({prod_:function prod_(e,t=null,n=!1){let i=Object(s.a)(e,"x","prod");"bool"===i.dtype&&(i=Object(o.a)(i,"int32"));const u={x:i},c={axis:t,keepDims:n};return r.a.runKernel(a.jc,u,c)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({reciprocal_:function reciprocal_(e){const t={x:Object(s.a)(e,"x","reciprocal")};return r.a.runKernel(a.nc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({rsqrt_:function rsqrt_(e){const t={x:Object(s.a)(e,"x","rsqrt","float32")};return r.a.runKernel(a.yc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({selu_:function selu_(e){const t={x:Object(s.a)(e,"x","selu")};return r.a.runKernel(a.Bc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(22),a=n(2),s=n(6);const o=async function setdiff1dAsync_(e,t){const n=Object(a.a)(e,"x","setdiff1d"),o=Object(a.a)(t,"y","setdiff1d");s.b(n.dtype===o.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${o.dtype}).`),s.b(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),s.b(1===o.rank,()=>`y should be 1D tensor, but got y (${o.shape}).`);const i=await n.data(),u=await o.data(),c=new Set(u);let l=0;for(let e=0;e<i.length;e++)c.has(i[e])||l++;const p=new r.b([l],n.dtype),h=new r.b([l],"int32");for(let e=0,t=0;e<i.length;e++)c.has(i[e])||(p.values[t]=i[e],h.values[t]=e,t++);return[p.toTensor(),h.toTensor()]}},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({sign_:function sign_(e){const t={x:Object(s.a)(e,"x","sign")};return r.a.runKernel(a.Dc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({sin_:function sin_(e){const t={x:Object(s.a)(e,"x","sin","float32")};return r.a.runKernel(a.Ec,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({sinh_:function sinh_(e){const t={x:Object(s.a)(e,"x","sinh")};return r.a.runKernel(a.Fc,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({softmax_:function softmax_(e,t=-1){const n=Object(s.a)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const o={logits:n},i={dim:t};return r.a.runKernel(a.Hc,o,i)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({stridedSlice_:function stridedSlice_(e,t,n,o,i=0,u=0,c=0,l=0,p=0){const h={x:Object(s.a)(e,"x","stridedSlice","string_or_numeric")},f={begin:t,end:n,strides:o,beginMask:i,endMask:u,ellipsisMask:c,newAxisMask:l,shrinkAxisMask:p};return r.a.runKernel(a.Uc,h,f)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({tan_:function tan_(e){const t={x:Object(s.a)(e,"x","tan","float32")};return r.a.runKernel(a.ad,t)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({topk_:function topk_(e,t=1,n=!0){const o=Object(s.a)(e,"x","topk");if(0===o.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const i=o.shape[o.shape.length-1];if(t<0)throw new Error("'k' passed to topk() must be >= 0 but got "+t);if(t>i)throw new Error(`'k' passed to topk() must be <= the last dimension (${i}) but got `+t);const u={x:o},c={k:t,sorted:n},[l,p]=r.a.runKernel(a.dd,u,c);return{values:l,indices:p}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return o}));var r=n(40),a=n(3),s=n(82);const o=Object(a.b)({truncatedNormal_:function truncatedNormal_(e,t=0,n=1,a,o){if(null!=a&&"bool"===a)throw new Error("Unsupported data type $ { dtype }");const i=new s.a(t,n,a,!0,o),u=Object(r.a)(e,a);for(let e=0;e<u.values.length;e++)u.values[e]=i.nextValue();return u.toTensor()}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(6),i=n(3);const u=Object(i.b)({unique_:function unique_(e,t=0){const n=Object(s.a)(e,"x","unique","string_or_numeric");Object(o.b)(n.rank>0,()=>"The input tensor must be at least 1D");const i={x:n},u={axis:t},[c,l]=r.a.runKernel(a.gd,i,u);return{values:c,indices:l}}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(4),a=n(5),s=n(2),o=n(3),i=n(94);const u=Object(o.b)({scatterND_:function scatterND_(e,t,n){const o=Object(s.a)(e,"indices","scatterND","int32"),u=Object(s.a)(t,"updates","scatterND");i.validateInput(u,o,n);const c={indices:o,updates:u},l={shape:n};return r.a.runKernel(a.zc,c,l)}})},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5),s=n(2),o=n(3);const i=Object(o.b)({gatherND_:function gatherND_(e,t){const n=Object(s.a)(t,"indices","gatherND","int32"),o={params:Object(s.a)(e,"x","gatherND","string_or_numeric"),indices:n};return r.a.runKernel(a.nb,o)}})},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return nextFrame}));const r="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==e?e:e=>e();function nextFrame(){return new Promise(e=>r(()=>e()))}}).call(this,n(280).setImmediate)},function(e,t,n){"use strict";n.d(t,"a",(function(){return i}));var r=n(4),a=n(5);var s=n(2),o=n(3);const i=Object(o.b)({sparseToDense_:function sparseToDense_(e,t,n,o=0){const i=Object(s.a)(e,"sparseIndices","sparseToDense","int32"),u=Object(s.a)(t,"sparseValues","sparseToDense"),c=Object(s.a)(o,"defaultValue","sparseToDense",u.dtype);!function validateInput(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(i,u,n,c);const l={sparseIndices:i,sparseValues:u,defaultValue:c},p={outputShape:n};return r.a.runKernel(a.Oc,l,p)}})},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}]},function(e,t,n){"use strict";n.r(t),n.d(t,"json",(function(){return r}));const r=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(265);n(283);const a=document.querySelector("#image");a.addEventListener("click",()=>{!async function detectImage(e){const t=await(0,r.detect)(e);console.log(t),t.forEach(t=>{const n=document.createElement("p");n.innerText=t.class+" - with "+Math.round(100*parseFloat(t.score))+"% confidence.",n.style="left: "+t.bbox[0]+"px;top: "+t.bbox[1]+"px; width: "+(t.bbox[2]-10)+"px;";const r=document.createElement("div");r.setAttribute("class","highlighter"),r.style="left: "+t.bbox[0]+"px;top: "+t.bbox[1]+"px;width: "+t.bbox[2]+"px;height: "+t.bbox[3]+"px;";const a=e.parentNode;a.appendChild(r),a.appendChild(n)})}(a)});document.getElementById("liveView"),document.querySelector("#webcam")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.detect=t.getModel=void 0,n(285),n(284);const r=n(282);let a;async function getModel(){return a||(a=await r.load(),a)}t.getModel=getModel,t.detect=async function detect(e){if(!e)return null;if(!e)throw new Error("htmlElement args is missing");if(!(e instanceof HTMLImageElement||e instanceof HTMLVideoElement))throw new Error("the selected HTML DOM is not image / video");const t=await getModel();return await t.detect(e)}},function(e,t,n){"use strict";t.byteLength=function byteLength(e){var t=getLens(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function toByteArray(e){var t,n,r=getLens(e),o=r[0],i=r[1],u=new s(function _byteLength(e,t,n){return 3*(t+n)/4-n}(0,o,i)),c=0,l=i>0?o-4:o;for(n=0;n<l;n+=4)t=a[e.charCodeAt(n)]<<18|a[e.charCodeAt(n+1)]<<12|a[e.charCodeAt(n+2)]<<6|a[e.charCodeAt(n+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===i&&(t=a[e.charCodeAt(n)]<<2|a[e.charCodeAt(n+1)]>>4,u[c++]=255&t);1===i&&(t=a[e.charCodeAt(n)]<<10|a[e.charCodeAt(n+1)]<<4|a[e.charCodeAt(n+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function fromByteArray(e){for(var t,n=e.length,a=n%3,s=[],o=0,i=n-a;o<i;o+=16383)s.push(encodeChunk(e,o,o+16383>i?i:o+16383));1===a?(t=e[n-1],s.push(r[t>>2]+r[t<<4&63]+"==")):2===a&&(t=(e[n-2]<<8)+e[n-1],s.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return s.join("")};for(var r=[],a=[],s="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",i=0,u=o.length;i<u;++i)r[i]=o[i],a[o.charCodeAt(i)]=i;function getLens(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function encodeChunk(e,t,n){for(var a,s,o=[],i=t;i<n;i+=3)a=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),o.push(r[(s=a)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,a){var s,o,i=8*a-r-1,u=(1<<i)-1,c=u>>1,l=-7,p=n?a-1:0,h=n?-1:1,f=e[t+p];for(p+=h,s=f&(1<<-l)-1,f>>=-l,l+=i;l>0;s=256*s+e[t+p],p+=h,l-=8);for(o=s&(1<<-l)-1,s>>=-l,l+=r;l>0;o=256*o+e[t+p],p+=h,l-=8);if(0===s)s=1-c;else{if(s===u)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,r),s-=c}return(f?-1:1)*o*Math.pow(2,s-r)},t.write=function(e,t,n,r,a,s){var o,i,u,c=8*s-a-1,l=(1<<c)-1,p=l>>1,h=23===a?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:s-1,m=r?1:-1,b=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=l):(o=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-o))<1&&(o--,u*=2),(t+=o+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(o++,u/=2),o+p>=l?(i=0,o=l):o+p>=1?(i=(t*u-1)*Math.pow(2,a),o+=p):(i=t*Math.pow(2,p-1)*Math.pow(2,a),o=0));a>=8;e[n+f]=255&i,f+=m,i/=256,a-=8);for(o=o<<a|i,c+=a;c>0;e[n+f]=255&o,f+=m,o/=256,c-=8);e[n+f-m]|=128*b}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){"use strict";(function(e){var t=n(13);const getNodeFetch_importFetch=()=>n(270);let r;class PlatformNode{constructor(){this.util=n(271),this.textEncoder=new this.util.TextEncoder}fetch(e,n){return null!=Object(t.c)().global.fetch?Object(t.c)().global.fetch(e,n):(null==r&&(r=getNodeFetch_importFetch()),r(e,n))}now(){const t=e.hrtime();return 1e3*t[0]+t[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error("Node built-in encoder only supports utf-8, but got "+t);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}Object(t.c)().get("IS_NODE")&&!Object(t.c)().get("IS_BROWSER")&&Object(t.c)().setPlatform("node",new PlatformNode)}).call(this,n(117))},function(e,t){},function(e,t){},function(e,t,n){(function(e){var r;!function(e,a,s){function Alea(e){var t=this,n=function Mash(){var e=4022871197;return function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)}}();t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=n(" "),t.s1=n(" "),t.s2=n(" "),t.s0-=n(e),t.s0<0&&(t.s0+=1),t.s1-=n(e),t.s1<0&&(t.s1+=1),t.s2-=n(e),t.s2<0&&(t.s2+=1),n=null}function copy(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function impl(e,t){var n=new Alea(e),r=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&copy(r,n),a.state=function(){return copy(n,{})}),a}a&&a.exports?a.exports=impl:n(50)&&n(93)?void 0===(r=function(){return impl}.call(t,n,t,a))||(a.exports=r):this.alea=impl}(0,e,n(50))}).call(this,n(92)(e))},function(e,t,n){(function(e){var r;!function(e,a,s){function XorGen(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function copy(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function impl(e,t){var n=new XorGen(e),r=t&&t.state,prng=function(){return(n.next()>>>0)/4294967296};return prng.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},prng.int32=n.next,prng.quick=prng,r&&("object"==typeof r&&copy(r,n),prng.state=function(){return copy(n,{})}),prng}a&&a.exports?a.exports=impl:n(50)&&n(93)?void 0===(r=function(){return impl}.call(t,n,t,a))||(a.exports=r):this.xor128=impl}(0,e,n(50))}).call(this,n(92)(e))},function(e,t,n){(function(e){var r;!function(e,a,s){function XorGen(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function copy(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function impl(e,t){var n=new XorGen(e),r=t&&t.state,prng=function(){return(n.next()>>>0)/4294967296};return prng.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},prng.int32=n.next,prng.quick=prng,r&&("object"==typeof r&&copy(r,n),prng.state=function(){return copy(n,{})}),prng}a&&a.exports?a.exports=impl:n(50)&&n(93)?void 0===(r=function(){return impl}.call(t,n,t,a))||(a.exports=r):this.xorwow=impl}(0,e,n(50))}).call(this,n(92)(e))},function(e,t,n){(function(e){var r;!function(e,a,s){function XorGen(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function init(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function copy(e,t){return t.x=e.x.slice(),t.i=e.i,t}function impl(e,t){null==e&&(e=+new Date);var n=new XorGen(e),r=t&&t.state,prng=function(){return(n.next()>>>0)/4294967296};return prng.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},prng.int32=n.next,prng.quick=prng,r&&(r.x&&copy(r,n),prng.state=function(){return copy(n,{})}),prng}a&&a.exports?a.exports=impl:n(50)&&n(93)?void 0===(r=function(){return impl}.call(t,n,t,a))||(a.exports=r):this.xorshift7=impl}(0,e,n(50))}).call(this,n(92)(e))},function(e,t,n){(function(e){var r;!function(e,a,s){function XorGen(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function init(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function copy(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function impl(e,t){null==e&&(e=+new Date);var n=new XorGen(e),r=t&&t.state,prng=function(){return(n.next()>>>0)/4294967296};return prng.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},prng.int32=n.next,prng.quick=prng,r&&(r.X&&copy(r,n),prng.state=function(){return copy(n,{})}),prng}a&&a.exports?a.exports=impl:n(50)&&n(93)?void 0===(r=function(){return impl}.call(t,n,t,a))||(a.exports=r):this.xor4096=impl}(0,e,n(50))}).call(this,n(92)(e))},function(e,t,n){(function(e){var r;!function(e,a,s){function XorGen(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function copy(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function impl(e,t){var n=new XorGen(e),r=t&&t.state,prng=function(){return(n.next()>>>0)/4294967296};return prng.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},prng.int32=n.next,prng.quick=prng,r&&("object"==typeof r&&copy(r,n),prng.state=function(){return copy(n,{})}),prng}a&&a.exports?a.exports=impl:n(50)&&n(93)?void 0===(r=function(){return impl}.call(t,n,t,a))||(a.exports=r):this.tychei=impl}(0,e,n(50))}).call(this,n(92)(e))},function(e,t,n){var r;!function(a,s){var o,i=this,u=s.pow(256,6),c=s.pow(2,52),l=2*c;function seedrandom(e,t,n){var r=[],p=mixkey(function flatten(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(flatten(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}((t=1==t?{entropy:!0}:t||{}).entropy?[e,tostring(a)]:null==e?function autoseed(){try{var e;return o&&(e=o.randomBytes)?e=e(256):(e=new Uint8Array(256),(i.crypto||i.msCrypto).getRandomValues(e)),tostring(e)}catch(e){var t=i.navigator,n=t&&t.plugins;return[+new Date,i,n,i.screen,tostring(a)]}}():e,3),r),h=new ARC4(r),prng=function(){for(var e=h.g(6),t=u,n=0;e<c;)e=256*(e+n),t*=256,n=h.g(1);for(;e>=l;)e/=2,t/=2,n>>>=1;return(e+n)/t};return prng.int32=function(){return 0|h.g(4)},prng.quick=function(){return h.g(4)/4294967296},prng.double=prng,mixkey(tostring(h.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&copy(r,h),e.state=function(){return copy(h,{})}),n?(s.random=e,t):e})(prng,p,"global"in t?t.global:this==s,t.state)}function ARC4(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<256;)o[a]=a++;for(a=0;a<256;a++)o[a]=o[s=255&s+e[a%n]+(t=o[a])],o[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,o=r.S;e--;)t=o[a=255&a+1],n=256*n+o[255&(o[a]=o[s=255&s+t])+(o[s]=t)];return r.i=a,r.j=s,n})(256)}function copy(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function mixkey(e,t){for(var n,r=e+"",a=0;a<r.length;)t[255&a]=255&(n^=19*t[255&a])+r.charCodeAt(a++);return tostring(t)}function tostring(e){return String.fromCharCode.apply(0,e)}if(s.seedrandom=seedrandom,mixkey(s.random(),a),e.exports){e.exports=seedrandom;try{o=n(279)}catch(e){}}else void 0===(r=function(){return seedrandom}.call(t,n,t,e))||(e.exports=r)}([],Math)},function(e,t){},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,a=Function.prototype.apply;function Timeout(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new Timeout(a.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new Timeout(a.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},Timeout.prototype.unref=Timeout.prototype.ref=function(){},Timeout.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function onTimeout(){e._onTimeout&&e._onTimeout()}),t))},n(281),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(116))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,a=1,s={},o=!1,i=e.document,u=Object.getPrototypeOf&&Object.getPrototypeOf(e);u=u&&u.setTimeout?u:e,"[object process]"==={}.toString.call(e.process)?function installNextTickImplementation(){r=function(e){t.nextTick((function(){runIfPresent(e)}))}}():!function canUsePostMessage(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?function installMessageChannelImplementation(){var e=new MessageChannel;e.port1.onmessage=function(e){runIfPresent(e.data)},r=function(t){e.port2.postMessage(t)}}():i&&"onreadystatechange"in i.createElement("script")?function installReadyStateChangeImplementation(){var e=i.documentElement;r=function(t){var n=i.createElement("script");n.onreadystatechange=function(){runIfPresent(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():function installSetTimeoutImplementation(){r=function(e){setTimeout(runIfPresent,0,e)}}():function installPostMessageImplementation(){var t="setImmediate$"+Math.random()+"$",onGlobalMessage=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&runIfPresent(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",onGlobalMessage,!1):e.attachEvent("onmessage",onGlobalMessage),r=function(n){e.postMessage(t+n,"*")}}(),u.setImmediate=function setImmediate(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return s[a]=o,r(a),a++},u.clearImmediate=clearImmediate}function clearImmediate(e){delete s[e]}function runIfPresent(e){if(o)setTimeout(runIfPresent,0,e);else{var t=s[e];if(t){o=!0;try{!function run(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{clearImmediate(e),o=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(116),n(117))},function(e,t,n){!function(e,t,n){"use strict";const r={1:{name:"/m/01g317",id:1,displayName:"person"},2:{name:"/m/0199g",id:2,displayName:"bicycle"},3:{name:"/m/0k4j",id:3,displayName:"car"},4:{name:"/m/04_sv",id:4,displayName:"motorcycle"},5:{name:"/m/05czz6l",id:5,displayName:"airplane"},6:{name:"/m/01bjv",id:6,displayName:"bus"},7:{name:"/m/07jdr",id:7,displayName:"train"},8:{name:"/m/07r04",id:8,displayName:"truck"},9:{name:"/m/019jd",id:9,displayName:"boat"},10:{name:"/m/015qff",id:10,displayName:"traffic light"},11:{name:"/m/01pns0",id:11,displayName:"fire hydrant"},13:{name:"/m/02pv19",id:13,displayName:"stop sign"},14:{name:"/m/015qbp",id:14,displayName:"parking meter"},15:{name:"/m/0cvnqh",id:15,displayName:"bench"},16:{name:"/m/015p6",id:16,displayName:"bird"},17:{name:"/m/01yrx",id:17,displayName:"cat"},18:{name:"/m/0bt9lr",id:18,displayName:"dog"},19:{name:"/m/03k3r",id:19,displayName:"horse"},20:{name:"/m/07bgp",id:20,displayName:"sheep"},21:{name:"/m/01xq0k1",id:21,displayName:"cow"},22:{name:"/m/0bwd_0j",id:22,displayName:"elephant"},23:{name:"/m/01dws",id:23,displayName:"bear"},24:{name:"/m/0898b",id:24,displayName:"zebra"},25:{name:"/m/03bk1",id:25,displayName:"giraffe"},27:{name:"/m/01940j",id:27,displayName:"backpack"},28:{name:"/m/0hnnb",id:28,displayName:"umbrella"},31:{name:"/m/080hkjn",id:31,displayName:"handbag"},32:{name:"/m/01rkbr",id:32,displayName:"tie"},33:{name:"/m/01s55n",id:33,displayName:"suitcase"},34:{name:"/m/02wmf",id:34,displayName:"frisbee"},35:{name:"/m/071p9",id:35,displayName:"skis"},36:{name:"/m/06__v",id:36,displayName:"snowboard"},37:{name:"/m/018xm",id:37,displayName:"sports ball"},38:{name:"/m/02zt3",id:38,displayName:"kite"},39:{name:"/m/03g8mr",id:39,displayName:"baseball bat"},40:{name:"/m/03grzl",id:40,displayName:"baseball glove"},41:{name:"/m/06_fw",id:41,displayName:"skateboard"},42:{name:"/m/019w40",id:42,displayName:"surfboard"},43:{name:"/m/0dv9c",id:43,displayName:"tennis racket"},44:{name:"/m/04dr76w",id:44,displayName:"bottle"},46:{name:"/m/09tvcd",id:46,displayName:"wine glass"},47:{name:"/m/08gqpm",id:47,displayName:"cup"},48:{name:"/m/0dt3t",id:48,displayName:"fork"},49:{name:"/m/04ctx",id:49,displayName:"knife"},50:{name:"/m/0cmx8",id:50,displayName:"spoon"},51:{name:"/m/04kkgm",id:51,displayName:"bowl"},52:{name:"/m/09qck",id:52,displayName:"banana"},53:{name:"/m/014j1m",id:53,displayName:"apple"},54:{name:"/m/0l515",id:54,displayName:"sandwich"},55:{name:"/m/0cyhj_",id:55,displayName:"orange"},56:{name:"/m/0hkxq",id:56,displayName:"broccoli"},57:{name:"/m/0fj52s",id:57,displayName:"carrot"},58:{name:"/m/01b9xk",id:58,displayName:"hot dog"},59:{name:"/m/0663v",id:59,displayName:"pizza"},60:{name:"/m/0jy4k",id:60,displayName:"donut"},61:{name:"/m/0fszt",id:61,displayName:"cake"},62:{name:"/m/01mzpv",id:62,displayName:"chair"},63:{name:"/m/02crq1",id:63,displayName:"couch"},64:{name:"/m/03fp41",id:64,displayName:"potted plant"},65:{name:"/m/03ssj5",id:65,displayName:"bed"},67:{name:"/m/04bcr3",id:67,displayName:"dining table"},70:{name:"/m/09g1w",id:70,displayName:"toilet"},72:{name:"/m/07c52",id:72,displayName:"tv"},73:{name:"/m/01c648",id:73,displayName:"laptop"},74:{name:"/m/020lf",id:74,displayName:"mouse"},75:{name:"/m/0qjjc",id:75,displayName:"remote"},76:{name:"/m/01m2v",id:76,displayName:"keyboard"},77:{name:"/m/050k8",id:77,displayName:"cell phone"},78:{name:"/m/0fx9l",id:78,displayName:"microwave"},79:{name:"/m/029bxz",id:79,displayName:"oven"},80:{name:"/m/01k6s3",id:80,displayName:"toaster"},81:{name:"/m/0130jx",id:81,displayName:"sink"},82:{name:"/m/040b_t",id:82,displayName:"refrigerator"},84:{name:"/m/0bt_c3",id:84,displayName:"book"},85:{name:"/m/01x3z",id:85,displayName:"clock"},86:{name:"/m/02s195",id:86,displayName:"vase"},87:{name:"/m/01lsmm",id:87,displayName:"scissors"},88:{name:"/m/0kmg4",id:88,displayName:"teddy bear"},89:{name:"/m/03wvsk",id:89,displayName:"hair drier"},90:{name:"/m/012xff",id:90,displayName:"toothbrush"}};class d{constructor(e,t){this.modelPath=t||`https://storage.googleapis.com/tfjs-models/savedmodel/${this.getPrefix(e)}/model.json`}getPrefix(e){return"lite_mobilenet_v2"===e?"ssd"+e:"ssd_"+e}async load(){this.model=await t.loadGraphModel(this.modelPath);const e=n.zeros([1,300,300,3],"int32"),r=await this.model.executeAsync(e);await Promise.all(r.map(e=>e.data())),r.map(e=>e.dispose()),e.dispose()}async infer(e,t,r){const a=n.tidy(()=>(e instanceof n.Tensor||(e=n.browser.fromPixels(e)),n.expandDims(e))),s=a.shape[1],o=a.shape[2],i=await this.model.executeAsync(a),u=i[0].dataSync(),c=i[1].dataSync();a.dispose(),n.dispose(i);const[l,p]=this.calculateMaxScores(u,i[0].shape[1],i[0].shape[2]),h=n.getBackend();"webgl"===n.getBackend()&&n.setBackend("cpu");const f=n.tidy(()=>{const e=n.tensor2d(c,[i[1].shape[1],i[1].shape[3]]);return n.image.nonMaxSuppression(e,l,t,r,r)}),m=f.dataSync();return f.dispose(),h!==n.getBackend()&&n.setBackend(h),this.buildDetectedObjects(o,s,c,l,m,p)}buildDetectedObjects(e,t,n,a,s,o){const i=s.length,u=[];for(let c=0;c<i;c++){const i=[];for(let e=0;e<4;e++)i[e]=n[4*s[c]+e];const l=i[0]*t,p=i[1]*e,h=i[2]*t,f=i[3]*e;i[0]=p,i[1]=l,i[2]=f-p,i[3]=h-l,u.push({bbox:i,class:r[o[s[c]]+1].displayName,score:a[s[c]]})}return u}calculateMaxScores(e,t,n){const r=[],a=[];for(let s=0;s<t;s++){let t=Number.MIN_VALUE,o=-1;for(let r=0;r<n;r++)e[s*n+r]>t&&(t=e[s*n+r],o=r);r[s]=t,a[s]=o}return[r,a]}async detect(e,t=20,n=.5){return this.infer(e,t,n)}dispose(){null!=this.model&&this.model.dispose()}}e.ObjectDetection=d,e.load=async function(e={}){if(null==n)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this model.");const t=e.base||"lite_mobilenet_v2",r=e.modelUrl;if(-1===["mobilenet_v1","mobilenet_v2","lite_mobilenet_v2"].indexOf(t))throw new Error(`ObjectDetection constructed with invalid base model ${t}. Valid names are 'mobilenet_v1', 'mobilenet_v2' and 'lite_mobilenet_v2'.`);const a=new d(t,r);return await a.load(),a},e.version="2.2.2",Object.defineProperty(e,"__esModule",{value:!0})}(t,n(286),n(0))},function(e,t,n){},function(e,t,n){"use strict";n.r(t),n.d(t,"version_webgl",(function(){return be})),n.d(t,"MathBackendWebGL",(function(){return backend_webgl_MathBackendWebGL})),n.d(t,"setWebGLContext",(function(){return setWebGLContext})),n.d(t,"GPGPUContext",(function(){return gpgpu_context_GPGPUContext})),n.d(t,"gpgpu_util",(function(){return a})),n.d(t,"webgl_util",(function(){return r})),n.d(t,"forceHalfFloat",(function(){return forceHalfFloat})),n.d(t,"webgl",(function(){return ge}));var r={};n.r(r),n.d(r,"callAndCheck",(function(){return callAndCheck})),n.d(r,"canBeRepresented",(function(){return canBeRepresented})),n.d(r,"getWebGLErrorMessage",(function(){return getWebGLErrorMessage})),n.d(r,"getExtensionOrThrow",(function(){return getExtensionOrThrow})),n.d(r,"createVertexShader",(function(){return createVertexShader})),n.d(r,"createFragmentShader",(function(){return createFragmentShader})),n.d(r,"createProgram",(function(){return createProgram})),n.d(r,"linkProgram",(function(){return linkProgram})),n.d(r,"validateProgram",(function(){return validateProgram})),n.d(r,"createStaticVertexBuffer",(function(){return createStaticVertexBuffer})),n.d(r,"createStaticIndexBuffer",(function(){return createStaticIndexBuffer})),n.d(r,"getNumChannels",(function(){return getNumChannels})),n.d(r,"createTexture",(function(){return createTexture})),n.d(r,"validateTextureSize",(function(){return validateTextureSize})),n.d(r,"createFramebuffer",(function(){return createFramebuffer})),n.d(r,"bindVertexBufferToProgramAttribute",(function(){return bindVertexBufferToProgramAttribute})),n.d(r,"bindTextureUnit",(function(){return bindTextureUnit})),n.d(r,"unbindTextureUnit",(function(){return unbindTextureUnit})),n.d(r,"getProgramUniformLocationOrThrow",(function(){return getProgramUniformLocationOrThrow})),n.d(r,"getProgramUniformLocation",(function(){return getProgramUniformLocation})),n.d(r,"bindTextureToProgramUniformSampler",(function(){return bindTextureToProgramUniformSampler})),n.d(r,"bindCanvasToFramebuffer",(function(){return bindCanvasToFramebuffer})),n.d(r,"bindColorTextureToFramebuffer",(function(){return bindColorTextureToFramebuffer})),n.d(r,"unbindColorTextureFromFramebuffer",(function(){return unbindColorTextureFromFramebuffer})),n.d(r,"validateFramebuffer",(function(){return validateFramebuffer})),n.d(r,"getFramebufferErrorMessage",(function(){return getFramebufferErrorMessage})),n.d(r,"getBatchDim",(function(){return getBatchDim})),n.d(r,"getRowsCols",(function(){return getRowsCols})),n.d(r,"getShapeAs3D",(function(){return getShapeAs3D})),n.d(r,"getTextureShapeFromLogicalShape",(function(){return getTextureShapeFromLogicalShape})),n.d(r,"isReshapeFree",(function(){return isReshapeFree})),n.d(r,"getWebGLMaxTextureSize",(function(){return getWebGLMaxTextureSize})),n.d(r,"resetMaxTextureSize",(function(){return resetMaxTextureSize})),n.d(r,"resetMaxTexturesInShader",(function(){return resetMaxTexturesInShader})),n.d(r,"getMaxTexturesInShader",(function(){return getMaxTexturesInShader})),n.d(r,"getWebGLDisjointQueryTimerVersion",(function(){return getWebGLDisjointQueryTimerVersion})),n.d(r,"hasExtension",(function(){return hasExtension})),n.d(r,"isWebGLVersionEnabled",(function(){return isWebGLVersionEnabled})),n.d(r,"isCapableOfRenderingToFloatTexture",(function(){return isCapableOfRenderingToFloatTexture})),n.d(r,"isDownloadFloatTextureEnabled",(function(){return isDownloadFloatTextureEnabled})),n.d(r,"isWebGLFenceEnabled",(function(){return isWebGLFenceEnabled})),n.d(r,"assertNotComplex",(function(){return assertNotComplex}));var a={};n.r(a),n.d(a,"createVertexShader",(function(){return gpgpu_util_createVertexShader})),n.d(a,"createVertexBuffer",(function(){return createVertexBuffer})),n.d(a,"createIndexBuffer",(function(){return createIndexBuffer})),n.d(a,"getInternalFormatForFloat32MatrixTexture",(function(){return getInternalFormatForFloat32MatrixTexture})),n.d(a,"createFloat32MatrixTexture",(function(){return createFloat32MatrixTexture})),n.d(a,"getInternalFormatForFloat16MatrixTexture",(function(){return getInternalFormatForFloat16MatrixTexture})),n.d(a,"createFloat16MatrixTexture",(function(){return createFloat16MatrixTexture})),n.d(a,"getInternalFormatForUnsignedBytesMatrixTexture",(function(){return getInternalFormatForUnsignedBytesMatrixTexture})),n.d(a,"createUnsignedBytesMatrixTexture",(function(){return createUnsignedBytesMatrixTexture})),n.d(a,"getInternalFormatForPackedMatrixTexture",(function(){return getInternalFormatForPackedMatrixTexture})),n.d(a,"createPackedMatrixTexture",(function(){return createPackedMatrixTexture})),n.d(a,"getInternalFormatForFloat16PackedMatrixTexture",(function(){return getInternalFormatForFloat16PackedMatrixTexture})),n.d(a,"createFloat16PackedMatrixTexture",(function(){return createFloat16PackedMatrixTexture})),n.d(a,"bindVertexProgramAttributeStreams",(function(){return bindVertexProgramAttributeStreams})),n.d(a,"uploadDenseMatrixToTexture",(function(){return uploadDenseMatrixToTexture})),n.d(a,"uploadPixelDataToTexture",(function(){return uploadPixelDataToTexture})),n.d(a,"createBufferFromOutputTexture",(function(){return createBufferFromOutputTexture})),n.d(a,"downloadFloat32MatrixFromBuffer",(function(){return downloadFloat32MatrixFromBuffer})),n.d(a,"downloadByteEncodedFloatMatrixFromOutputTexture",(function(){return downloadByteEncodedFloatMatrixFromOutputTexture})),n.d(a,"downloadPackedMatrixFromBuffer",(function(){return downloadPackedMatrixFromBuffer})),n.d(a,"downloadMatrixFromPackedOutputTexture",(function(){return downloadMatrixFromPackedOutputTexture}));var s=n(0);const o={},i={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function setWebGLContext(e,t){o[e]=t}function getWebGLContext(e,t){if(!(e in o)||null!=t){const n=function getWebGLRenderingContext(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function createCanvas(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;if(n.addEventListener("webglcontextlost",t=>{t.preventDefault(),delete o[e]},!1),1===e)return n.getContext("webgl",i)||n.getContext("experimental-webgl",i);return n.getContext("webgl2",i)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;o[e]=n}const n=o[e];return null==n||n.isContextLost()?(delete o[e],getWebGLContext(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),o[e])}var u,c,l;function getUnpackedMatrixTextureShapeWidthHeight(e,t){return[t,e]}function getDenseTexShape(e){const t=s.util.sizeFromShape(e),n=Math.ceil(t/4);return s.util.sizeToSquarishShape(n)}function getPackedMatrixTextureShapeWidthHeight(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function getTextureConfig(e,t){const n=e;let r,a,o,i,u,c,l,p,h,f;return 2===Object(s.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,a=n.R16F,o=n.RGBA16F,i=n.RGBA32F,u=n.RED,l=4,p=1,h=n.HALF_FLOAT,f=n.FLOAT,c=n.RGBA8):(r=e.RGBA,a=e.RGBA,o=e.RGBA,i=n.RGBA,u=e.RGBA,l=4,p=4,h=null!=t?t.HALF_FLOAT_OES:null,f=e.FLOAT,c=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:c,downloadUnpackNumChannels:l,defaultNumChannels:p,textureTypeHalfFloat:h,textureTypeFloat:f}}function callAndCheck(e,t){const n=t();return Object(s.env)().getBool("DEBUG")&&function checkWebGLError(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+getWebGLErrorMessage(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(u||(u={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(c||(c={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(l||(l={}));function canBeRepresented(e){return!!(Object(s.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function getWebGLErrorMessage(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+t}}function getExtensionOrThrow(e,t){return throwIfNull(e,()=>e.getExtension(t),'Extension "'+t+'" not supported on this browser.')}function createVertexShader(e,t){const n=throwIfNull(e,()=>e.createShader(e.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(callAndCheck(e,()=>e.shaderSource(n,t)),callAndCheck(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}function createFragmentShader(e,t){const n=throwIfNull(e,()=>e.createShader(e.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(callAndCheck(e,()=>e.shaderSource(n,t)),callAndCheck(e,()=>e.compileShader(n)),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw function logShaderSourceAndInfoLog(e,t){const n=p.exec(t);if(null==n)return console.log("Couldn't parse line number in error: "+t),void console.log(e);const r=+n[1],a=e.split("\n"),o=a.length.toString().length+2,i=a.map((e,t)=>s.util.rightPad((t+1).toString(),o)+e);let u=0;for(let e=0;e<i.length;e++)u=Math.max(i[e].length,u);const c=i.slice(0,r-1),l=i.slice(r-1,r),h=i.slice(r);console.log(c.join("\n")),console.log(t.split("\n")[0]),console.log("%c "+s.util.rightPad(l[0],u),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}const p=/ERROR: [0-9]+:([0-9]+):/g;function createProgram(e){return throwIfNull(e,()=>e.createProgram(),"Unable to create WebGLProgram.")}function linkProgram(e,t){if(callAndCheck(e,()=>e.linkProgram(t)),!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}function validateProgram(e,t){if(callAndCheck(e,()=>e.validateProgram(t)),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function createStaticVertexBuffer(e,t){const n=throwIfNull(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n)),callAndCheck(e,()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW)),n}function createStaticIndexBuffer(e,t){const n=throwIfNull(e,()=>e.createBuffer(),"Unable to create WebGLBuffer");return callAndCheck(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n)),callAndCheck(e,()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW)),n}function getNumChannels(){return 2===Object(s.env)().getNumber("WEBGL_VERSION")?1:4}function createTexture(e){return throwIfNull(e,()=>e.createTexture(),"Unable to create WebGLTexture.")}function validateTextureSize(e,t){const n=Object(s.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0){throw new Error("Requested texture size "+`[${e}x${t}]`+" is invalid.")}if(e>n||t>n){throw new Error("Requested texture size "+`[${e}x${t}]`+" greater than WebGL maximum on this browser / GPU "+`[${n}x${n}]`+".")}}function createFramebuffer(e){return throwIfNull(e,()=>e.createFramebuffer(),"Unable to create WebGLFramebuffer.")}function bindVertexBufferToProgramAttribute(e,t,n,r,a,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,r)),callAndCheck(e,()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,s,o)),callAndCheck(e,()=>e.enableVertexAttribArray(i)),!0)}function bindTextureUnit(e,t,n){validateTextureUnit(e,n),callAndCheck(e,()=>e.activeTexture(e.TEXTURE0+n)),callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,t))}function unbindTextureUnit(e,t){validateTextureUnit(e,t),callAndCheck(e,()=>e.activeTexture(e.TEXTURE0+t)),callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function getProgramUniformLocationOrThrow(e,t,n){return throwIfNull(e,()=>e.getUniformLocation(t,n),'uniform "'+n+'" not present in program.')}function getProgramUniformLocation(e,t,n){return e.getUniformLocation(t,n)}function bindTextureToProgramUniformSampler(e,t,n,r){callAndCheck(e,()=>bindTextureUnit(e,t,r)),callAndCheck(e,()=>e.uniform1i(n,r))}function bindCanvasToFramebuffer(e){callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),callAndCheck(e,()=>e.viewport(0,0,e.canvas.width,e.canvas.height)),callAndCheck(e,()=>e.scissor(0,0,e.canvas.width,e.canvas.height))}function bindColorTextureToFramebuffer(e,t,n){callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,n)),callAndCheck(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0))}function unbindColorTextureFromFramebuffer(e,t){callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,t)),callAndCheck(e,()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0))}function validateFramebuffer(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+getFramebufferErrorMessage(e,t))}function getFramebufferErrorMessage(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+t}}function throwIfNull(e,t,n){const r=callAndCheck(e,()=>t());if(null==r)throw new Error(n);return r}function validateTextureUnit(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function getBatchDim(e,t=2){return s.util.sizeFromShape(e.slice(0,e.length-t))}function getRowsCols(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function getShapeAs3D(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[getBatchDim(e),...getRowsCols(e)]),t}function getTextureShapeFromLogicalShape(e,t=!1){let n=Object(s.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map((t,n)=>n>=e.length-2?s.util.nearestLargerEven(e[n]):e[n])).length&&(e=[2,e[0]])),2!==e.length){const t=s.util.squeezeShape(e);e=t.newShape}let r=s.util.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=getBatchDim(e);let n=2,a=2;return e.length&&([n,a]=getRowsCols(e)),r=t*(n/2)*(a/2),s.util.sizeToSquarishShape(r).map(e=>2*e)}return s.util.sizeToSquarishShape(r)}function isEven(e){return e%2==0}function isReshapeFree(e,t){if(e=e.slice(-2),t=t.slice(-2),s.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(isEven(n)&&isEven(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&isEven(e[0])&&isEven(t[0])}let h,f;function getWebGLMaxTextureSize(e){if(null==h){const t=getWebGLContext(e);h=t.getParameter(t.MAX_TEXTURE_SIZE)}return h}function resetMaxTextureSize(){h=null}function resetMaxTexturesInShader(){f=null}function getMaxTexturesInShader(e){if(null==f){const t=getWebGLContext(e);f=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,f)}function getWebGLDisjointQueryTimerVersion(e){if(0===e)return 0;let t;const n=getWebGLContext(e);return t=hasExtension(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:hasExtension(n,"EXT_disjoint_timer_query")?1:0,t}function hasExtension(e,t){return null!=e.getExtension(t)}function isWebGLVersionEnabled(e){try{if(null!=getWebGLContext(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function isCapableOfRenderingToFloatTexture(e){if(0===e)return!1;const t=getWebGLContext(e);if(1===e){if(!hasExtension(t,"OES_texture_float"))return!1}else if(!hasExtension(t,"EXT_color_buffer_float"))return!1;return createFloatTextureAndBindToFramebuffer(t)}function isDownloadFloatTextureEnabled(e){if(0===e)return!1;const t=getWebGLContext(e);if(1!==e){if(hasExtension(t,"EXT_color_buffer_float"))return createFloatTextureAndBindToFramebuffer(t);const e="EXT_color_buffer_half_float";if(hasExtension(t,e)){const n=t.getExtension(e);return function createHalfFloatTextureAndBindToFramebuffer(e,t){const n=getTextureConfig(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const s=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(a),s}(t,n)}return!1}if(!hasExtension(t,"OES_texture_float"))return!1;if(!hasExtension(t,"WEBGL_color_buffer_float"))return!1;return createFloatTextureAndBindToFramebuffer(t)}function createFloatTextureAndBindToFramebuffer(e){const t=getTextureConfig(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function isWebGLFenceEnabled(e){if(2!==e)return!1;return null!=getWebGLContext(e).fenceSync}function assertNotComplex(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&s.util.assert("complex64"!==e.dtype,()=>t+" does not support complex64 tensors in the WebGL backend.")})}const m=Object(s.env)();function getGlslDifferences(){let e,t,n,r,a,o,i,u,c,l;return 2===Object(s.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",a="texture",o="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",c="",l="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",a="texture2D",o="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",c="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",l="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:a,output:o,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:c,defineRound:l}}function getLogicalCoordinatesFromFlatIndex(e,t,n="index"){const r=s.util.computeStrides(t);return r.map((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`).join("")}function getOutputLogicalCoordinatesFromFlatIndexByUniform(e,t,n="index"){const r=s.util.computeStrides(t);return r.map((t,a)=>`${`int ${e[a]} = ${n} / outShapeStrides[${a}]`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`).join("")}function getLogicalCoordinatesFromFlatIndexByUniform(e,t,n="index"){const r=function symbolicallyComputeStrides(e,t){const n=e.length,r=e.map(e=>`${t}[${e}]`),a=new Array(n-1);a[n-2]=r[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${r[e+1]})`;return a}(e.map((e,t)=>t),t);return r.map((t,a)=>`${`int ${e[a]} = ${n} / ${r[a]}`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${r[a]}`:`index -= ${e[a]} * ${r[a]}`};`).join("")}function getFlatIndexFrom3D(e){const t=s.util.computeStrides(e).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}m.registerFlag("HAS_WEBGL",()=>m.getNumber("WEBGL_VERSION")>0),m.registerFlag("WEBGL_VERSION",()=>isWebGLVersionEnabled(2)?2:isWebGLVersionEnabled(1)?1:0),m.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),m.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===m.get("WEBGL_VERSION")),m.registerFlag("WEBGL_CPU_FORWARD",()=>!0),m.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),m.registerFlag("WEBGL_PACK",()=>m.getBool("HAS_WEBGL")),m.registerFlag("WEBGL_PACK_NORMALIZATION",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_CLIP",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_PACK_REDUCE",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_LAZILY_UNPACK",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_CONV_IM2COL",()=>m.getBool("WEBGL_PACK")),m.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>getWebGLMaxTextureSize(m.getNumber("WEBGL_VERSION"))),m.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>getMaxTexturesInShader(m.getNumber("WEBGL_VERSION"))),m.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const e=m.getNumber("WEBGL_VERSION");return 0===e?0:getWebGLDisjointQueryTimerVersion(e)}),m.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>m.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!s.device_util.isMobile()),m.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>isCapableOfRenderingToFloatTexture(m.getNumber("WEBGL_VERSION"))),m.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!m.getBool("WEBGL_FORCE_F16_TEXTURES")&&m.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),m.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>isDownloadFloatTextureEnabled(m.getNumber("WEBGL_VERSION"))),m.registerFlag("WEBGL_FENCE_API_ENABLED",()=>isWebGLFenceEnabled(m.getNumber("WEBGL_VERSION"))),m.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>m.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),m.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)}),m.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>s.device_util.isMobile()?1:-1,e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)}),m.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),m.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),m.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),m.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);const b="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:g}=s.backend_util;function makeShader(e,t,n){const r=[];if(e.forEach(e=>{const t=s.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=getUniformInfoFromShape(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}}),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach(e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)});const a=r.join("\n"),o=e.map(e=>function getInputSamplingSnippet(e,t,n=!1,r){let a="";a+=n?getPackedSamplerFromInInfo(e,r):getSamplerFromInInfo(e,r);const o=e.shapeInfo.logicalShape,i=t.logicalShape;o.length<=i.length&&(a+=n?function getPackedSamplerAtOutputCoords(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",o=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,u=g(e.shapeInfo.logicalShape,t.logicalShape),c=getCoordsDataType(i),l=i-o;let p;const h=["x","y","z","w","u","v"];p=0===o?"":i<2&&u.length>=1?"coords = 0;":u.map(e=>`coords.${h[e+l]} = 0;`).join("\n");let f="";f=i<2&&o>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+h[t+l]).join(", ");let m="return outputValue;";const b=1===s.util.sizeFromShape(e.shapeInfo.logicalShape),y=1===s.util.sizeFromShape(t.logicalShape);if(1!==o||b||y){if(b&&!y)m=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=o-2,t=o-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?m="return vec4(outputValue.x);":u.indexOf(e)>-1?m="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(m="return vec4(outputValue.xx, outputValue.zz);")}}else m="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${c} coords = getOutputCoords();\n      ${p}\n      vec4 outputValue = get${r}(${f});\n      ${m}\n    }\n  `}(e,t):function getSamplerAtOutputCoords(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),a="get"+r+"AtOutCoords",o=t.texShape,i=e.shapeInfo.texShape,u=e.shapeInfo.logicalShape.length,c=t.logicalShape.length;if(!e.shapeInfo.isUniform&&u===c&&null==e.shapeInfo.flatOffset&&s.util.arraysEqual(i,o))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const l=getCoordsDataType(c),p=g(e.shapeInfo.logicalShape,t.logicalShape),h=c-u;let f;const m=["x","y","z","w","u","v"];f=0===u?"":c<2&&p.length>=1?"coords = 0;":p.map(e=>`coords.${m[e+h]} = 0;`).join("\n");let b="";b=c<2&&u>0?"coords":e.shapeInfo.logicalShape.map((e,t)=>"coords."+m[t+h]).join(", ");return`\n    float ${a}() {\n      ${l} coords = getOutputCoords();\n      ${f}\n      return get${r}(${b});\n    }\n  `}(e,t));return a}(e,t,n.packedInputs,n.enableShapeUniforms)).join("\n"),i=t.texShape,u=getGlslDifferences(),c=function getFloatTextureSampleSnippet(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let l,p,h=function getShaderPrefix(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${y}\n    ${x}\n    ${v}\n  `}(u);t.isPacked?(l=function getPackedOutputSamplingSnippet(e,t,n){switch(e.length){case 0:return getOutputScalarCoords();case 1:return function getOutputPacked1DCoords(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function getOutputPacked2DCoords(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(s.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function getOutputPacked3DCoords(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),s=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function getOutputPackedNDCoords(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),s=a*Math.ceil(e[e.length-2]/2);let o=s,i="",u="b, r, c";for(let t=2;t<e.length-1;t++)o*=e[e.length-t-1],i=`\n      int b${t} = index / ${o};\n      index -= b${t} * ${o};\n    `+i,u=`b${t}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),p=function getFloatTextureSetRGBASnippet(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(l=function getOutputSamplingSnippet(e,t,n){switch(e.length){case 0:return getOutputScalarCoords();case 1:return function getOutput1DCoords(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function getOutput2DCoords(e,t,n){if(s.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function getOutput3DCoords(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=getLogicalCoordinatesFromFlatIndex(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function getOutput4DCoords(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function getOutput5DCoords(e,t){const n=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function getOutput6DCoords(e,t){const n=getLogicalCoordinatesFromFlatIndex(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(e.length+"-D output sampling is not yet supported")}}(t.logicalShape,i,n.enableShapeUniforms),p=function getFloatTextureSetRSnippet(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),n.packedInputs&&(h+=O);return[h,c,p,a,l,o,n.userCode].join("\n")}function getSamplerFromInInfo(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function getSamplerScalar(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[a,s]=e.shapeInfo.texShape;if(1===a&&1===s)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=getFlatOffsetUniformName(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function getSampler1D(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${getUniformSampler(e)}\n      }\n    `;const a=e.shapeInfo.texShape,s=a[0],o=a[1];if(1===o&&1===s)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=getFlatOffsetUniformName(n);if(1===o)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(1===s)return t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(t)return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;return`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function getSampler2D(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),o=e.shapeInfo.texShape;if(null!=o&&s.util.arraysEqual(n,o)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=o[0],n=o[1];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${n}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:i,keptDims:u}=s.util.squeezeShape(n),c=i;if(c.length<n.length){const n=squeezeInputInfo(e,c),r=["row","col"];return`\n      ${getSamplerFromInInfo(n,t)}\n      float ${a}(int row, int col) {\n        return ${a}(${getSqueezedParams(r,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${getUniformSampler(e)}\n      }\n    `;const l=o[0],p=o[1],h=getFlatOffsetUniformName(r);if(1===p)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${l}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(1===l)return t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${p}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `;if(t)return`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `;return`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${l}, ${p}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}(e,t);case 3:return function getSampler3D(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n[1]*n[2],i=n[2],{newShape:u,keptDims:c}=s.util.squeezeShape(n),l=u;if(l.length<n.length){const n=squeezeInputInfo(e,l),r=["row","col","depth"];return`\n        ${getSamplerFromInInfo(n,t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${getSqueezedParams(r,c)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${i}, 1)));\n        ${getUniformSampler(e)}\n      }\n    `;const p=e.shapeInfo.texShape,h=p[0],f=p[1],m=e.shapeInfo.flatOffset;if(f===o&&null==m)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${f}.0, ${h}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(f===i&&null==m)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${f}.0, ${h}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const b=getFlatOffsetUniformName(r);if(t)return`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${o} + col * ${i} + depth + ${b};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `;return`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${i} + depth + ${b};\n        vec2 uv = uvFromFlat(${h}, ${f}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}(e,t);case 4:return function getSampler4D(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n[3],i=n[2]*o,u=n[1]*i,{newShape:c,keptDims:l}=s.util.squeezeShape(n);if(c.length<n.length){const n=squeezeInputInfo(e,c),r=["row","col","depth","depth2"];return`\n      ${getSamplerFromInInfo(n,t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${getSqueezedParams(r,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${i}, ${o}, 1)));\n        ${getUniformSampler(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],m=h[1],b=`int stride2 = ${r}Shape[3];`,g=`int stride1 = ${r}Shape[2] * stride2;`,y=`int stride0 = ${r}Shape[1] * stride1;`;if(m===u&&null==p)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${b}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(m===o&&null==p)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const x=getFlatOffsetUniformName(r);if(t)return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${b}\n      ${g}\n      ${y}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${x});\n      return sampleTexture(${r}, uv);\n    }\n  `;return`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${f}, ${m}, index + ${x});\n      return sampleTexture(${r}, uv);\n    }\n  `}(e,t);case 5:return function getSampler5D(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],o=t[3]*a,i=t[2]*o,u=t[1]*i,{newShape:c,keptDims:l}=s.util.squeezeShape(t);if(c.length<t.length){const t=squeezeInputInfo(e,c),n=["row","col","depth","depth2","depth3"];return`\n      ${getSamplerFromInInfo(t)}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${getSqueezedParams(n,l)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${i}, ${o}, ${a})) +\n          depth3;\n        ${getUniformSampler(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],m=h[1];if(m===u&&null==p)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${o}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===a&&null==p)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const b=getFlatOffsetUniformName(n);return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} + depth * ${o} +\n          depth2 * ${a} + depth3 + ${b};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function getSampler6D(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:o}=s.util.squeezeShape(t);if(a.length<t.length){const t=squeezeInputInfo(e,a),n=["row","col","depth","depth2","depth3","depth4"];return`\n      ${getSamplerFromInInfo(t)}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${getSqueezedParams(n,o)});\n      }\n    `}const i=t[5],u=t[4]*i,c=t[3]*u,l=t[2]*c,p=t[1]*l;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${p}, ${l}, ${c}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${getUniformSampler(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,f=e.shapeInfo.texShape,m=f[0],b=f[1];if(b===p&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${l}, ${c}, ${u}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${b}.0, ${m}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(b===i&&null==h)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${b}.0, ${m}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;const g=getFlatOffsetUniformName(n);return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${p} + col * ${l} + depth * ${c} +\n          depth2 * ${u} + depth3 * ${i} + depth4 + ${g};\n      vec2 uv = uvFromFlat(${m}, ${b}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(n.length+"-D input sampling is not yet supported")}}function getPackedSamplerFromInInfo(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function getPackedSamplerScalar(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=getGlslDifferences();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function getPackedSampler1D(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=getGlslDifferences();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function getPackedSampler2D(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),o=e.shapeInfo.texShape,i=o[0],u=o[1],c=getGlslDifferences();if(null!=o&&s.util.arraysEqual(n,o))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${c.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${i}.0);\n\n        return ${c.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${c.texture2D}(${r}, uv);\n    }\n  `;const l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],p=Math.ceil(n[1]/2);return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${p}, ${l[0]}, ${l[1]}, row, col);\n      return ${c.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function getPackedSampler3D(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){const r=n.slice(1),s=[1,2],o=squeezeInputInfo(e,r),i=["b","row","col"];return`\n        ${getPackedSamplerFromInInfo(o,t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${getSqueezedParams(i,s)});\n        }\n      `}const i=getGlslDifferences();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const u=o[0],c=o[1],l=Math.ceil(n[2]/2),p=l*Math.ceil(n[1]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${c}, ${p}, ${l}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function getPackedSamplerND(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=getGlslDifferences();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const s=e.shapeInfo.logicalShape,o=s.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],c=u[0],l=u[1],p=Math.ceil(s[o-1]/2);let h=p*Math.ceil(s[o-2]/2),f="int b, int row, int col",m=`b * ${h} + (row / 2) * ${p} + (col / 2)`;for(let e=2;e<o-1;e++)f=`int b${e}, `+f,h*=s[o-e-1],m=`b${e} * ${h} + `+m;return`\n    vec4 ${r}(${f}) {\n      int index = ${m};\n      int texR = index / ${l};\n      int texC = index - texR * ${l};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${l}, ${c});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const y="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",x="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",v="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",O="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function getOutputScalarCoords(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function getFlatOffsetUniformName(e){return"offset"+e}function getUniformSampler(e){const t=e.name,n=s.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function getCoordsDataType(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function getUniformInfoFromShape(e,t,n){const{newShape:r,keptDims:a}=s.util.squeezeShape(t),o=t.length,i=e&&3===o&&1===t[0],u=i?t.slice(1):r,c=!e&&o>1&&!s.util.arraysEqual(t,n)&&r.length<o||i;return{useSqueezeShape:c,uniformShape:c?u:t,keptDims:a}}function squeezeInputInfo(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function getSqueezedParams(e,t){return t.map(t=>e[t]).join(", ")}function validateBinaryAndProgram(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach((e,n)=>{const r=e.logicalShape,a=t[n],o=a.shape;if(!s.util.arraysEqual(r,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${o} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,u=a.isUniform?null:a.texData.texShape;if(!s.util.arraysEqual(i,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`)})}function useShapeUniforms(e){return Object(s.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class decode_matrix_gpu_DecodeMatrixProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=u.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class decode_matrix_packed_gpu_DecodeMatrixPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=u.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?getOutputLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],e):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class encode_float_gpu_EncodeFloatProgram{constructor(e){this.variableNames=["A"],this.outTexUsage=c.DOWNLOAD;const t=getGlslDifferences();this.outputShape=e,this.userCode=`\n      ${b}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class encode_float_packed_gpu_EncodeFloatPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=c.DOWNLOAD;const t=getGlslDifferences();this.outputShape=e,this.userCode=`\n      ${b}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class encode_matrix_gpu_EncodeMatrixProgram{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":getFlatIndexFrom3D(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class encode_matrix_packed_gpu_EncodeMatrixPackedProgram{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=getGlslDifferences();this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let r="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const s=2*t+a;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":""+e[2]}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":""+e[1]}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${s}] = values[0];\n            } else if (offset == 1) {\n              result[${s}] = values[1];\n            } else if (offset == 2) {\n              result[${s}] = values[2];\n            } else {\n              result[${s}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":getFlatIndexFrom3D(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${a};\n        }\n    `}}function gpgpu_util_createVertexShader(e){const t=getGlslDifferences();return createVertexShader(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function createVertexBuffer(e){return createStaticVertexBuffer(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function createIndexBuffer(e){return createStaticIndexBuffer(e,new Uint16Array([0,1,2,2,1,3]))}function createAndConfigureTexture(e,t,n,r,a,o){validateTextureSize(t,n);const i=createTexture(e),u=e.TEXTURE_2D;return callAndCheck(e,()=>e.bindTexture(u,i)),callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE)),callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE)),callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST)),callAndCheck(e,()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST)),1===Object(s.env)().getNumber("WEBGL_VERSION")?callAndCheck(e,()=>e.texImage2D(u,0,r,t,n,0,a,o,null)):callAndCheck(e,()=>e.texStorage2D(u,1,r,t,n)),callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null)),{texture:i,texShape:[n,t]}}function getInternalFormatForFloat32MatrixTexture(e){return e.internalFormatFloat}function createFloat32MatrixTexture(e,t,n,r){const[a,s]=getUnpackedMatrixTextureShapeWidthHeight(t,n);return createAndConfigureTexture(e,a,s,getInternalFormatForFloat32MatrixTexture(r),r.textureFormatFloat,e.FLOAT)}function getInternalFormatForFloat16MatrixTexture(e){return e.internalFormatHalfFloat}function createFloat16MatrixTexture(e,t,n,r){const[a,s]=getUnpackedMatrixTextureShapeWidthHeight(t,n);return createAndConfigureTexture(e,a,s,getInternalFormatForFloat16MatrixTexture(r),r.textureFormatFloat,r.textureTypeHalfFloat)}function getInternalFormatForUnsignedBytesMatrixTexture(e){return e.downloadTextureFormat}function createUnsignedBytesMatrixTexture(e,t,n,r){const[a,s]=getUnpackedMatrixTextureShapeWidthHeight(t,n);return createAndConfigureTexture(e,a,s,getInternalFormatForUnsignedBytesMatrixTexture(r),e.RGBA,e.UNSIGNED_BYTE)}function getInternalFormatForPackedMatrixTexture(e){return e.internalFormatPackedFloat}function createPackedMatrixTexture(e,t,n,r){const[a,s]=getPackedMatrixTextureShapeWidthHeight(t,n);return createAndConfigureTexture(e,a,s,getInternalFormatForPackedMatrixTexture(r),e.RGBA,e.FLOAT)}function getInternalFormatForFloat16PackedMatrixTexture(e){return e.internalFormatPackedHalfFloat}function createFloat16PackedMatrixTexture(e,t,n,r){const[a,s]=getPackedMatrixTextureShapeWidthHeight(t,n);return createAndConfigureTexture(e,a,s,getInternalFormatForFloat16PackedMatrixTexture(r),e.RGBA,r.textureTypeHalfFloat)}function bindVertexProgramAttributeStreams(e,t,n){callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,n));return bindVertexBufferToProgramAttribute(e,t,"clipSpacePos",n,3,20,0)&&bindVertexBufferToProgramAttribute(e,t,"uv",n,2,20,12)}function uploadDenseMatrixToTexture(e,t,n,r,a,o){let i,u,c;callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,t)),a instanceof Uint8Array?(i=new Uint8Array(n*r*4),u=e.UNSIGNED_BYTE,c=e.RGBA):(i=new Float32Array(n*r*4),u=e.FLOAT,c=o.internalFormatPackedFloat),i.set(a),2===Object(s.env)().getNumber("WEBGL_VERSION")?callAndCheck(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,u,i)):callAndCheck(e,()=>e.texImage2D(e.TEXTURE_2D,0,c,n,r,0,e.RGBA,u,i)),callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function uploadPixelDataToTexture(e,t,n){callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,t)),n.data instanceof Uint8Array?2===Object(s.env)().getNumber("WEBGL_VERSION")?callAndCheck(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data)):callAndCheck(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data)):2===Object(s.env)().getNumber("WEBGL_VERSION")?callAndCheck(e,()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n)):callAndCheck(e,()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n)),callAndCheck(e,()=>e.bindTexture(e.TEXTURE_2D,null))}function createBufferFromOutputTexture(e,t,n,r){const a=e.createBuffer();callAndCheck(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a));const s=16*t*n;return callAndCheck(e,()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ)),callAndCheck(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0)),callAndCheck(e,()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null)),a}function downloadFloat32MatrixFromBuffer(e,t,n){const r=e,a=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,a),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),a}function downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n,r){const[a,s]=getUnpackedMatrixTextureShapeWidthHeight(t,n),o=new Uint8Array(function getUnpackedArraySizeFromMatrixSize(e,t){return e*t}(t*n,4));return callAndCheck(e,()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,o)),new Float32Array(o.buffer)}function downloadPackedMatrixFromBuffer(e,t,n,r,a,s,o,i){const u=e,c=new Float32Array(function getPackedRGBAArraySizeFromMatrixShape(e,t){const[n,r]=getPackedMatrixTextureShapeWidthHeight(e,t);return n*r*4}(s,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function downloadMatrixFromPackedOutputTexture(e,t,n){const r=new Float32Array(t*n*4);return callAndCheck(e,()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r)),r}class gpgpu_context_GPGPUContext{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=Object(s.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,setWebGLContext(t,e)):this.gl=getWebGLContext(t);let n="WEBGL_color_buffer_float";if(1===Object(s.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=getExtensionOrThrow(this.gl,e),hasExtension(this.gl,t))this.textureHalfFloatExtension=getExtensionOrThrow(this.gl,t);else if(Object(s.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),hasExtension(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=getExtensionOrThrow(this.gl,"EXT_color_buffer_half_float");else if(Object(s.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",hasExtension(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!hasExtension(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=createVertexBuffer(this.gl),this.indexBuffer=createIndexBuffer(this.gl),this.framebuffer=createFramebuffer(this.gl),this.textureConfig=getTextureConfig(this.gl,this.textureHalfFloatExtension)}get debug(){return Object(s.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;callAndCheck(e,()=>e.finish()),callAndCheck(e,()=>e.bindFramebuffer(e.FRAMEBUFFER,null)),callAndCheck(e,()=>e.deleteFramebuffer(this.framebuffer)),callAndCheck(e,()=>e.bindBuffer(e.ARRAY_BUFFER,null)),callAndCheck(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)),callAndCheck(e,()=>e.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),createFloat32MatrixTexture(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),createFloat16MatrixTexture(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),createUnsignedBytesMatrixTexture(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),uploadPixelDataToTexture(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),uploadDenseMatrixToTexture(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),createFloat16PackedMatrixTexture(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),createPackedMatrixTexture(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(unbindColorTextureFromFramebuffer(this.gl,this.framebuffer),this.outputTexture=null),callAndCheck(this.gl,()=>this.gl.deleteTexture(e))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,()=>downloadByteEncodedFloatMatrixFromOutputTexture(this.gl,t,n,this.textureConfig))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return downloadPackedMatrixFromBuffer(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return downloadFloat32MatrixFromBuffer(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=createBufferFromOutputTexture(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(Object(s.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(a,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=a}else Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,()=>downloadMatrixFromPackedOutputTexture(this.gl,t,n))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=gpgpu_util_createVertexShader(t));const n=createProgram(t);return callAndCheck(t,()=>t.attachShader(n,this.vertexShader)),callAndCheck(t,()=>t.attachShader(n,e)),linkProgram(t,n),this.debug&&validateProgram(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=bindVertexProgramAttributeStreams(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&callAndCheck(this.gl,()=>this.gl.deleteProgram(e))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&validateProgram(this.gl,this.program),callAndCheck(this.gl,()=>this.gl.useProgram(e))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?getProgramUniformLocationOrThrow(this.gl,e,t):getProgramUniformLocation(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.getAttribLocation(e,t))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),bindTextureToProgramUniformSampler(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,a]=getPackedMatrixTextureShapeWidthHeight(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&validateProgram(this.gl,this.program),validateFramebuffer(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),callAndCheck(e,()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=getExtensionOrThrow(this.gl,2===Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await s.util.repeatedTry(()=>this.disposed||this.isQueryAvailable(e,Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),this.getQueryTime(e,Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise(t=>{this.addItemToPoll(()=>e.isFencePassed(),()=>t())})}pollItems(){const e=function linearSearchLastTrue(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||s.util.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),bindColorTextureToFramebuffer(this.gl,e,this.framebuffer),this.debug&&validateFramebuffer(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(bindColorTextureToFramebuffer(this.gl,this.outputTexture,this.framebuffer),this.debug&&validateFramebuffer(this.gl)):unbindColorTextureFromFramebuffer(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;bindColorTextureToFramebuffer(r,e,this.framebuffer),this.debug&&validateFramebuffer(r),this.outputTexture=e,callAndCheck(r,()=>r.viewport(0,0,t,n)),callAndCheck(r,()=>r.scissor(0,0,t,n))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),callAndCheck(this.gl,()=>this.gl.scissor(e,t,n,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}var k=n(150);const{addImpl:w,bincountImpl:I,bincountReduceImpl:S,ceilImpl:T,concatImpl:N,equalImpl:_,expImpl:C,expm1Impl:j,floorImpl:E,gatherNdImpl:A,gatherV2Impl:$,greaterImpl:R,greaterEqualImpl:F,lessImpl:D,lessEqualImpl:M,linSpaceImpl:P,logImpl:B,maxImpl:L,maximumImpl:z,minimumImpl:U,multiplyImpl:V,negImpl:W,notEqualImpl:G,prodImpl:H,rangeImpl:q,rsqrtImpl:K,sigmoidImpl:X,simpleAbsImpl:Y,sliceImpl:Q,sparseFillEmptyRowsImpl:Z,sparseReshapeImpl:J,sparseSegmentReductionImpl:ee,sqrtImpl:te,stridedSliceImpl:ne,stringNGramsImpl:re,stringSplitImpl:ae,stringToHashBucketFastImpl:se,subImpl:oe,tileImpl:ie,topKImpl:ue,transposeImpl:ce,uniqueImpl:le}=k;function getVecChannels(e,t){return["x","y","z","w","u","v"].slice(0,t).map(t=>`${e}.${t}`)}function getChannels(e,t){return 1===t?[e]:getVecChannels(e,t)}class pack_gpu_PackProgram{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=getChannels("rc",this.rank),t=getCoordsDataType(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let a=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=e[e.length-1-t]+","+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return"rc > "+(this.enableShapeUniforms?"outShape":this.outputShape[0]);let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class reshape_packed_gpu_ReshapePackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}this.userCode=`\n      ${function getReshapedInputCoords(e,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?getLogicalCoordinatesFromFlatIndexByUniform(["r","c","d"],"inputShape"):getLogicalCoordinatesFromFlatIndex(["r","c","d"],e)}\n      return ivec3(r, c, d);\n    }\n  `}(t,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":getFlatIndexFrom3D(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class texture_manager_TextureManager{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=getPhysicalFromLogicalTextureType(t,n),a=getKeyFromTextureShape(e,r,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const s=computeBytes(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return r===l.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===l.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===l.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===l.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===l.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const a=getPhysicalFromLogicalTextureType(n,r),o=getKeyFromTextureShape(t,a,r);o in this.freeTextures||(this.freeTextures[o]=[]);const i=computeBytes(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=Object(s.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const c=this.usedTextures[o],l=c.indexOf(e);if(l<0)throw new Error("Cannot release a texture that was never provided by this texture manager");c.splice(l,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log("Bytes allocated: "+this._numBytesAllocated),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const e in this.usedTextures)this.usedTextures[e].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function computeBytes(e,t,n,r,a){const s=function internalFormatForPhysicalTexType(e,t){switch(e){case l.PACKED_2X2_FLOAT32:return getInternalFormatForPackedMatrixTexture(t);case l.PACKED_2X2_FLOAT16:return getInternalFormatForFloat16PackedMatrixTexture(t);case l.UNPACKED_FLOAT32:return getInternalFormatForFloat32MatrixTexture(t);case l.UNPACKED_FLOAT16:return getInternalFormatForFloat16MatrixTexture(t);case l.PACKED_4X1_UNSIGNED_BYTE:return getInternalFormatForUnsignedBytesMatrixTexture(t);default:throw new Error("Unknown physical texture type "+e)}}(t,r);let o;if(a){const[t,n]=getPackedMatrixTextureShapeWidthHeight(e[0],e[1]);o=t*n}else{const[t,n]=getUnpackedMatrixTextureShapeWidthHeight(e[0],e[1]);o=t*n}return o*function numBytesForInternalFormat(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error("Unknown internal format "+t)}(n,s)}function getPhysicalFromLogicalTextureType(e,t){if(e===c.UPLOAD)return l.PACKED_2X2_FLOAT32;if(e===c.RENDER||null==e)return function getPhysicalTextureForRendering(e){return Object(s.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?l.PACKED_2X2_FLOAT32:l.UNPACKED_FLOAT32:e?l.PACKED_2X2_FLOAT16:l.UNPACKED_FLOAT16}(t);if(e===c.DOWNLOAD||e===c.PIXELS)return l.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+e)}function getKeyFromTextureShape(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class unaryop_gpu_UnaryOpProgram{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const de="return abs(x);";const pe="return x;";class unaryop_packed_gpu_UnaryOpPackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class unpack_gpu_UnpackProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const t=e.length,n=getChannels("rc",t),r=getCoordsDataType(t),a=function getSourceCoords(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const he=s.kernel_impls.whereImpl,fe={};const me=Object(s.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class backend_webgl_MathBackendWebGL extends s.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!Object(s.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof gpgpu_context_GPGPUContext)t=e;else{const n=getWebGLContext(Object(s.env)().getNumber("WEBGL_VERSION"),e);t=new gpgpu_context_GPGPUContext(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=getWebGLContext(Object(s.env)().getNumber("WEBGL_VERSION"));t=new gpgpu_context_GPGPUContext(e),this.binaryCache=function getBinaryCache(e){return e in fe||(fe[e]={}),fe[e]}(Object(s.env)().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new texture_manager_TextureManager(this.gpgpu),this.numMBBeforeWarning=function numMBBeforeWarning(){return null==Object(s.env)().global.screen?1024:Object(s.env)().global.screen.height*Object(s.env)().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new s.DataStorage(this,Object(s.engine)())}nextDataId(){return backend_webgl_MathBackendWebGL.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((Object(s.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||Object(s.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:c.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,a){if(Object(s.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:c.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:a,slice:o,shape:i,isPacked:u}=t;if(null!=o){let t;t=u?new unaryop_packed_gpu_UnaryOpPackedProgram(i,pe):new unaryop_gpu_UnaryOpProgram(i,pe);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const c=null!=this.activeTimers;let l,p;if(c&&(l=s.util.now()),"complex64"===r){const e=this.readSync(a.real.dataId),t=this.readSync(a.imag.dataId);p=s.backend_util.mergeRealAndImagArrays(e,t)}else p=this.getValuesFromTexture(e);return c&&(this.downloadWaitMs+=s.util.now()-l),this.convertAndCacheOnCPU(e,p)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise(e=>t.push(e))}const t=this.texData.get(e),{values:n,shape:r,slice:a,dtype:o,complexTensorInfos:i,isPacked:u}=t;if(null!=a){let t;t=u?new unaryop_packed_gpu_UnaryOpPackedProgram(r,pe):new unaryop_gpu_UnaryOpProgram(r,pe);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:o}],o),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(Object(s.env)().getBool("DEBUG")&&!Object(s.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===Object(s.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let c,l,p=null;if("complex64"!==o&&Object(s.env)().get("WEBGL_BUFFER_SUPPORTED")){c=this.decode(e);const t=this.texData.get(c.dataId);p=this.gpgpu.createBufferFromTexture(t.texture.texture,...getDenseTexShape(r))}if(this.pendingRead.set(e,[]),"complex64"!==o&&await this.gpgpu.createAndWaitForFence(),"complex64"===o){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];l=s.backend_util.mergeRealAndImagArrays(t,n)}else if(null==p)l=this.getValuesFromTexture(e);else{const e=s.util.sizeFromShape(r);l=this.gpgpu.downloadFloat32MatrixFromBuffer(p,e)}if(null!=c&&this.disposeIntermediateTensorInfo(c),null!=p){const e=this.gpgpu.gl;callAndCheck(e,()=>e.deleteBuffer(p))}const h=this.convertAndCacheOnCPU(e,l),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach(e=>e(h)),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&Object(s.engine)().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:r,shape:a,slice:o,dtype:i,isPacked:u,texture:c}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=o){let n;n=u?new unaryop_packed_gpu_UnaryOpPackedProgram(a,pe):new unaryop_gpu_UnaryOpProgram(a,pe);const r=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:i}],i),s=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),s}if(null==c)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const l=this.decode(e,t.customTexShape),p=Object(s.engine)().makeTensorFromDataId(l.dataId,l.shape,l.dtype),h=this.texData.get(l.dataId);return Object.assign({tensorRef:p},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>s.util.decodeString(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Object(s.buffer)(e.shape,e.dtype,n)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!canBeRepresented(n)){if(Object(s.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),a=s.util.sizeFromShape(t);if(Object(s.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),s=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...getDenseTexShape(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),s}const o=Object(s.env)().getBool("WEBGL_PACK")&&!0===r,i=o?getShapeAs3D(t):t,u=o?new encode_float_packed_gpu_EncodeFloatPackedProgram(i):new encode_float_gpu_EncodeFloatProgram(i),c=this.runWebGLProgram(u,[{shape:i,dtype:n,dataId:e}],"float32"),l=this.texData.get(c.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(l.texture.texture,l.texShape[0],l.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),p}timerAvailable(){return Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=s.util.flatten(this.activeTimers.map(e=>e.query)).filter(e=>null!=e),o=s.util.flatten(this.activeTimers.map(e=>e.name)).filter(e=>null!=e);this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=s.util.sum(e),i.getExtraProfileInfo=()=>e.map((e,t)=>({name:o[t],ms:e})).map(e=>`${e.name}: ${e.ms}`).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:s.util.now(),endMs:null}}endTimer(e){return Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=s.util.now(),e)}async getQueryTime(e){if(Object(s.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));const c=this.texData.get(e);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=me){return Object(s.env)().getBool("WEBGL_CPU_FORWARD")&&e.every(e=>null==this.texData.get(e.dataId).texture&&s.util.sizeFromShape(e.shape)<t)}getGPGPUContext(){return this.gpgpu}where(e){s.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return he(e.shape,t)}packedUnaryOp(e,t,n){const r=new unaryop_packed_gpu_UnaryOpPackedProgram(e.shape,t),a=this.compileAndRun(r,[e],n);return Object(s.engine)().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=Y(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(Object(s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,de,e.dtype);const t=new unaryop_gpu_UnaryOpProgram(e.shape,de),n=this.compileAndRun(t,[e]);return Object(s.engine)().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&s.util.isString(n[0])){const a=n.map(e=>s.util.encodeString(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){const{dataId:r}=this.makeTensorInfo(e,t,n);return Object(s.engine)().makeTensorFromDataId(r,e,t,this)}unpackTensor(e){const t=new unpack_gpu_UnpackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new pack_gpu_PackProgram(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[getBatchDim(e.shape),...getRowsCols(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[getBatchDim(t),...getRowsCols(t)],s=new reshape_packed_gpu_ReshapePackedProgram(a,n),o=[n],i=this.runWebGLProgram(s,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:a,dtype:o}=n;if(null!=t){const e=s.util.sizeFromShape(a),n=t[0]*t[1]*4;s.util.assert(e<=n,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const i=getShapeAs3D(a);let u;u=r?new decode_matrix_packed_gpu_DecodeMatrixPackedProgram(i):new decode_matrix_gpu_DecodeMatrixProgram(i);const c=[null!=t?t:getDenseTexShape(i)];return{dtype:o,shape:a,dataId:this.runWebGLProgram(u,[{shape:i,dtype:o,dataId:e}],o,c,!0,t).dataId}}runWebGLProgram(e,t,n,r,a=!1,o){const i=this.makeTensorInfo(e.outputShape,n),c=this.texData.get(i.dataId);if(e.packedOutput&&(c.isPacked=!0),e.outPackingScheme===u.DENSE){const t=null!=o?o:getDenseTexShape(e.outputShape);c.texShape=t.map(e=>2*e)}if(null!=e.outTexUsage&&(c.usage=e.outTexUsage),0===s.util.sizeFromShape(i.shape))return c.values=s.util.getTypedArrayFromDType(i.dtype,0),i;const l=[],p=t.map(t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&s.util.sizeFromShape(t.shape)<=Object(s.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!isReshapeFree(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),l.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}});this.uploadToGPU(i.dataId);const h={shape:i.shape,texData:c,isUniform:!1},f=function makeShaderKey(e,t,n){let r="";t.concat(n).forEach(t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const o=t.texData.texShape,{useSqueezeShape:i,uniformShape:u,keptDims:c}=getUniformInfoFromShape(e.packedInputs,t.shape,o);let l="",p="",h="";if(1===u.length&&e.packedInputs){const e=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];l=`${e[0]>1}_${e[1]>1}`}else if(2!==u.length||e.packedInputs){if(u.length>2&&!e.packedInputs){const e=s.util.computeStrides(u);h=`${e[0]===o[1]}_${e[e.length-1]===o[1]}`}}else p=`${u[0]>1}_${u[1]>1}`;const f=t.shape.length,m=2===u.length&&s.util.arraysEqual(t.shape,o),b=1===s.util.sizeFromShape(t.shape),g=s.backend_util.getBroadcastDims(t.shape,n.shape),y=!e.packedInputs&&f===n.shape.length&&s.util.arraysEqual(o,n.texData.texShape),x=e.packedInputs||u.length>2?"":`${o[0]>1}_${o[1]>1}`;r+=`${f}_${y}_${i?c:""}_${u.length}_${b}_${g}_${m}_${l}_${p}_${h}_${x}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${a}`}});const a=e.userCode;let o=e.constructor.name;return o+="_"+r+"_"+a+Object(s.env)().getNumber("WEBGL_VERSION"),o}(e,p,h),m=this.getAndSaveBinary(f,()=>function compileProgram(e,t,n,r){const a=n.map((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}}),o=a.map(e=>e.shapeInfo),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=makeShader(a,i,t),c=createFragmentShader(e.gl,u),l=e.createProgram(c);let p=null;const h=e.getUniformLocation(l,"NAN",!1);1===Object(s.env)().getNumber("WEBGL_VERSION")&&(p=e.getUniformLocation(l,"INFINITY",!1));const f={},m={},b={};for(let n=0;n<t.variableNames.length;n++){const r=t.variableNames[n];f[r]=e.getUniformLocation(l,r,!1),f["offset"+r]=e.getUniformLocation(l,"offset"+r,!1),t.enableShapeUniforms&&(m[r+"Shape"]=e.getUniformLocation(l,r+"Shape",!1),b[r+"TexShape"]=e.getUniformLocation(l,r+"TexShape",!1))}let g,y,x;t.enableShapeUniforms&&(g=e.getUniformLocation(l,"outShape",!1),x=e.getUniformLocation(l,"outShapeStrides",!1),y=e.getUniformLocation(l,"outTexShape",!1));const v=[];return t.customUniforms&&t.customUniforms.forEach((t,n)=>{v[n]=e.getUniformLocation(l,t.name,!1)}),{program:t,fragmentShader:c,source:u,webGLProgram:l,uniformLocations:f,customUniformLocations:v,inShapeInfos:o,outShapeInfo:i,infLoc:p,nanLoc:h,inShapesLocations:m,inTexShapesLocations:b,outShapeLocation:g,outShapeStridesLocation:x,outTexShapeLocation:y}}(this.gpgpu,e,p,h)),b=null!=this.activeTimers;let g;b&&(g=this.startTimer()),function runProgram(e,t,n,r,a){t.program.enableShapeUniforms||(validateBinaryAndProgram(t.inShapeInfos,n),validateBinaryAndProgram([t.outShapeInfo],[r]));const o=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(o.texture,i[0],i[1]):e.setOutputMatrixTexture(o.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===Object(s.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach((n,r)=>{const a=t.program.variableNames[r],o=t.uniformLocations[a],i=t.uniformLocations["offset"+a],u=t.inShapesLocations[a+"Shape"],c=t.inTexShapesLocations[a+"TexShape"];if(u){const{uniformShape:r}=getUniformInfoFromShape(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(u,new Int32Array(r));break;case 2:e.gl.uniform2iv(u,new Int32Array(r));break;case 3:e.gl.uniform3iv(u,new Int32Array(r));break;case 4:e.gl.uniform4iv(u,new Int32Array(r))}}if(c&&e.gl.uniform2i(c,n.texData.texShape[0],n.texData.texShape[1]),null!=o)if(n.isUniform)if(s.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(o,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(o,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,o,r)});const u=t.outShapeLocation;if(u)switch(r.shape.length){case 1:e.gl.uniform1iv(u,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(u,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(u,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(u,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=s.util.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach((n,r)=>{const s=t.customUniformLocations[r],o=a[r];if("float"===n.type)e.gl.uniform1fv(s,o);else if("vec2"===n.type)e.gl.uniform2fv(s,o);else if("vec3"===n.type)e.gl.uniform3fv(s,o);else if("vec4"===n.type)e.gl.uniform4fv(s,o);else if("int"===n.type)e.gl.uniform1iv(s,o);else if("ivec2"===n.type)e.gl.uniform2iv(s,o);else if("ivec3"===n.type)e.gl.uniform3iv(s,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(s,o)}}),e.executeProgram()}(this.gpgpu,m,p,h,r),l.forEach(e=>this.disposeIntermediateTensorInfo(e)),b&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const y=Object(s.env)().get("WEBGL_FLUSH_THRESHOLD");if(y>0){const e=s.util.now();e-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!Object(s.env)().getBool("WEBGL_LAZILY_UNPACK")&&c.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,r,a=!1){n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!Object(s.env)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach(e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})}this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Object(s.tidy)(()=>{if(!Object(s.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=Object(s.env)().getBool("DEBUG");Object(s.env)().set("DEBUG",!1);const t=this.abs(Object(s.scalar)(1e-8)).dataSync()[0];if(Object(s.env)().set("DEBUG",e),t>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:a,texture:o,usage:i,isPacked:u}=t;if(null!=o)return;const l=null!=this.activeTimers;let p;l&&(p=s.util.now());let h=t.texShape;if(null==h&&(h=getTextureShapeFromLogicalShape(n,u),t.texShape=h),null!=a){const e=getShapeAs3D(n);let o,i=h[1],f=h[0];const m=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!u&&m||([i,f]=getPackedMatrixTextureShapeWidthHeight(h[0],h[1])),o=u?new encode_matrix_packed_gpu_EncodeMatrixPackedProgram(e,m):new encode_matrix_gpu_EncodeMatrixProgram(e,m);const b=m?[f,i]:h,g=this.makeTensorInfo(b,r),y=this.texData.get(g.dataId);y.usage=m?c.PIXELS:c.UPLOAD,y.texShape=b,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),i,f,a);const x=[[f,i]],v=!0,O=this.runWebGLProgram(o,[g],r,x,v),k=this.texData.get(O.dataId);t.texture=k.texture,t.texShape=k.texShape,t.isPacked=k.isPacked,t.usage=k.usage,this.disposeIntermediateTensorInfo(g),this.texData.delete(O.dataId),t.values=null,l&&(this.uploadWaitMs+=s.util.now()-p)}else{const e=this.acquireTexture(h,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function float32ToTypedArray(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error("Unknown dtype "+t)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*s.util.bytesPerElement(t)}}backend_webgl_MathBackendWebGL.nextDataId=0;const be="3.14.0";function forceHalfFloat(){Object(s.env)().set("WEBGL_FORCE_F16_TEXTURES",!0)}s.device_util.isBrowser()&&Object(s.registerBackend)("webgl",()=>new backend_webgl_MathBackendWebGL,2);const ge={forceHalfFloat:forceHalfFloat};class binaryop_gpu_BinaryOpProgram{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=useShapeUniforms(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class binaryop_packed_gpu_BinaryOpPackedProgram{constructor(e,t,n,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n);const a=this.outputShape.length;this.enableShapeUniforms=useShapeUniforms(a);let o="";if(r)if(0===a||1===s.util.sizeFromShape(this.outputShape))o="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(o=`\n          ${getCoordsDataType(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?o+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":o+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=getChannels("coords",a);this.enableShapeUniforms?o+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:o+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${o}\n\n        setOutput(result);\n      }\n    `}}function identity(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const ye={kernelName:s.Identity,backendName:"webgl",kernelFunc:identity};function Complex_complex(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(s.dataId),i=identity({inputs:{x:r},backend:n}),u=identity({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:u},s}const xe={kernelName:s.Complex,backendName:"webgl",kernelFunc:Complex_complex},ve="return (a < 0.) ? b * a : a;",Oe="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const ke={kernelName:s.LeakyRelu,backendName:"webgl",kernelFunc:function leakyRelu(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:o}=r,i=n.makeTensorInfo([],"float32",s.util.createScalarValue(o,"float32")),u=Object(s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new binaryop_packed_gpu_BinaryOpPackedProgram(Oe,a.shape,i.shape):new binaryop_gpu_BinaryOpProgram(ve,a.shape,i.shape),c=n.runWebGLProgram(u,[a,i],"float32");return n.disposeIntermediateTensorInfo(i),c}},we="return (a < 0.) ? b * a : a;",Ie="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const Se={kernelName:s.Prelu,backendName:"webgl",kernelFunc:function prelu(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t,o=Object(s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new binaryop_packed_gpu_BinaryOpPackedProgram(Ie,r.shape,a.shape):new binaryop_gpu_BinaryOpProgram(we,r.shape,a.shape);return n.runWebGLProgram(o,[r,a],"float32")}};function unaryKernelFunc({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:r}){return({inputs:a,backend:o})=>{const{x:i}=a,u=o,c=r||i.dtype;if(u.shouldExecuteOnCPU([i])&&null!=n){const e=u.texData.get(i.dataId),t=n(e.values,c);return u.makeTensorInfo(i.shape,c,t)}let l;return l=Object(s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new unaryop_packed_gpu_UnaryOpPackedProgram(i.shape,t):new unaryop_gpu_UnaryOpProgram(i.shape,e),u.runWebGLProgram(l,[i],c)}}function binaryKernelFunc({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:a,dtype:o}){return({inputs:i,backend:u})=>{const{a:c,b:l}=i,p=u;if(r&&"complex64"===c.dtype){const t=p.texData.get(c.dataId),n=p.texData.get(l.dataId),[r,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map(t=>{const[n,r]=t,a={dataId:n.dataId,dtype:n.dtype,shape:c.shape},o={dataId:r.dataId,dtype:r.dtype,shape:l.shape},i=new binaryop_gpu_BinaryOpProgram(e,c.shape,l.shape);return p.runWebGLProgram(i,[a,o],Object(s.upcastType)(n.dtype,r.dtype))}),o=Complex_complex({inputs:{real:r,imag:a},backend:p});return p.disposeIntermediateTensorInfo(r),p.disposeIntermediateTensorInfo(a),o}const h=o||Object(s.upcastType)(c.dtype,l.dtype);if(("string"===c.dtype||"string"===l.dtype||p.shouldExecuteOnCPU([c,l]))&&null!=a){const e=p.texData.get(c.dataId).values,t=p.texData.get(l.dataId).values,n="string"===c.dtype?s.backend_util.fromUint8ToStringArray(e):e,r="string"===c.dtype?s.backend_util.fromUint8ToStringArray(t):t,[o,i]=a(c.shape,l.shape,n,r,h),u=p.makeTensorInfo(i,h);return p.texData.get(u.dataId).values=o,u}let f;return f=Object(s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new binaryop_packed_gpu_BinaryOpPackedProgram(t,c.shape,l.shape,n):new binaryop_gpu_BinaryOpProgram(e,c.shape,l.shape),p.runWebGLProgram(f,[c,l],h)}}function mapActivationToShaderProgram(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?Ie:we;if("leakyrelu"===e)return t?Oe:ve;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class mulmat_packed_gpu_MatMulPackedProgram{constructor(e,t,n,r=!1,a=!1,s=!1,o=null,i=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const c=r?e[1]:e[2],l=Math.ceil(c/2),p=r?"i * 2, rc.y":"rc.y, i * 2",h=a?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],m=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let b="",g="";o&&(b=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let x="rc.x",v="rc.x";e[0]<t[0]?x=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(v=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${b}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${l}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${l}; i++) {\n          int batchA = ${x};\n          int batchB = ${v};\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${h});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${m[0]});\n          result += (${f[1]} * ${m[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const Te="return areal * breal - aimag * bimag;",Ne="return areal * bimag + aimag * breal;";class binaryop_complex_gpu_BinaryOpComplexProgram{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=s.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const _e="return a * b;";function multiply(e){const{inputs:t,backend:n}=e,{a:r,b:a}=t,o=s.backend_util.upcastType(r.dtype,a.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),s=new binaryop_complex_gpu_BinaryOpComplexProgram(Te,r.shape,a.shape),o=new binaryop_complex_gpu_BinaryOpComplexProgram(Ne,r.shape,a.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],u=n.runWebGLProgram(s,i,"float32"),c=n.runWebGLProgram(o,i,"float32"),l=Complex_complex({inputs:{real:u,imag:c},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),l}if(n.shouldExecuteOnCPU([r,a])){const e=n.texData.get(r.dataId),t=n.texData.get(a.dataId),[s,i]=V(r.shape,a.shape,e.values,t.values,o),u=n.makeTensorInfo(i,o);return n.texData.get(u.dataId).values=s,u}let i;return i=Object(s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new binaryop_packed_gpu_BinaryOpPackedProgram(_e,r.shape,a.shape):new binaryop_gpu_BinaryOpProgram(_e,r.shape,a.shape),n.runWebGLProgram(i,[r,a],o)}const Ce={kernelName:s.Multiply,backendName:"webgl",kernelFunc:multiply};function reshape(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:o}=r,i=n,u=s.util.sizeFromShape(a.shape),c=s.util.inferFromImplicitShape(o,u),l=s.util.sizeFromShape(c);s.util.assert(u===l,()=>`The new shape (${c}) has ${l} elements and the old shape (${a.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`);const p=i.texData.get(a.dataId);return!p.isPacked||isReshapeFree(a.shape,c)||null!==p.texture&&isReshapeFree(p.shape,c)?(i.incRef(a.dataId),{dataId:a.dataId,shape:c,dtype:a.dtype}):function packedReshape(e,t,n){const r=[getBatchDim(e.shape),...getRowsCols(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[getBatchDim(t),...getRowsCols(t)],o=new reshape_packed_gpu_ReshapePackedProgram(s,r),i=[r],u=n.runWebGLProgram(o,[a],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(a,c,i)}const je={kernelName:s.Reshape,backendName:"webgl",kernelFunc:reshape};class mean_gpu_MeanProgram{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:o}=e;this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4;let c="sumValue += dot(values, ones);";if(null!=t){const e=1/t;c=`sumValue += dot(values * ${s.util.isInt(e)?e.toPrecision(2):e}, ones);`}let l="";a%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ReduceProgram{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const c=4*Math.floor(n/4),l=n%4;let p=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,h="vec4";"all"===t?(o="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===t&&(o="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");let f="";a%n>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===l}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===l}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===l}) {\n          ${h} values = ${h}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${u});\n      }\n    `}}function reduce(e,t,n,r){const a=function getReductionStages(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=s.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let o=e;for(let s=0;s<a.length;s++){const{inSize:i,windowSize:u,outSize:c}=a[s];let l,p;l="mean"===n?0===s?new mean_gpu_MeanProgram({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:c},i):new mean_gpu_MeanProgram({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:c}):new ReduceProgram({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:c},n),p=o,o=r.runWebGLProgram(l,[o],t),p.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(p)}return o}class transpose_gpu_TransposeProgram{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];this.outputShape=n,this.rank=n.length;const r=getCoordsDataType(this.rank),a=function getSwitchedCoords(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let t=0;t<e.length;t++)r[e[t]]=n[t];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class transpose_packed_gpu_TransposePackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[t[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=getCoordsDataType(this.rank),a=getVecChannels("rc",this.rank),s=new Array(this.rank);for(let e=0;e<t.length;e++)s[t[e]]=a[e];const o=`vec2(${s.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function transposeImpl(e,t,n){const r=Object(s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new transpose_packed_gpu_TransposePackedProgram(e.shape,t):new transpose_gpu_TransposeProgram(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function sum(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r;return function sumImpl(e,t,n,r){const a=t,o=e.shape.length,i=s.util.parseAxisParam(a,e.shape);let u=i;const c=s.backend_util.getAxesPermutation(u,o),l=null!=c;let p=e;l&&(p=transposeImpl(e,c,r),u=s.backend_util.getInnerMostAxes(u.length,o)),s.backend_util.assertAxesAreInnerMostDims("sum",u,o);const[h,f]=s.backend_util.computeOutAndReduceShapes(p.shape,u);let m=h;n&&(m=s.backend_util.expandShapeToKeepDim(h,i));const b=s.util.sizeFromShape(f),g=reshape({inputs:{x:p},attrs:{shape:[s.util.sizeFromShape(e.shape)/b,b]},backend:r}),y=reduce(g,Object(s.sumOutType)(e.dtype),"sum",r),x=reshape({inputs:{x:y},attrs:{shape:m},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),l&&r.disposeIntermediateTensorInfo(p),x}(a,o,i,n)}const Ee={kernelName:s.Sum,backendName:"webgl",kernelFunc:sum};function transpose(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{perm:s}=r,o=n,i=a.shape.length,u=new Array(i);for(let e=0;e<u.length;e++)u[e]=a.shape[s[e]];let c;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=ce(e,a.shape,a.dtype,s,u);c=o.makeTensorInfo(u,a.dtype);o.texData.get(c.dataId).values=t}else c=transposeImpl(a,s,o);return c}const Ae={kernelName:s.Transpose,backendName:"webgl",kernelFunc:transpose};function batchMatMulImpl({a:e,b:t,transposeA:n,transposeB:r,backend:a,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:c=null}){const l=e.shape.length,p=t.shape.length,h=n?e.shape[l-2]:e.shape[l-1],f=r?t.shape[p-1]:t.shape[p-2],m=n?e.shape[l-1]:e.shape[l-2],b=r?t.shape[p-2]:t.shape[p-1],g=e.shape.slice(0,-2),y=t.shape.slice(0,-2),x=s.util.sizeFromShape(g),v=s.util.sizeFromShape(y),O=s.broadcast_util.assertAndGetBroadcastShape(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([m,b]);s.util.assert(h===f,()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${r} must match.`);const k=n?[x,h,m]:[x,m,h],w=r?[v,b,f]:[v,f,b],I=reshape({inputs:{x:e},backend:a,attrs:{shape:k}}),S=reshape({inputs:{x:t},backend:a,attrs:{shape:w}}),T=[I,S],N=Math.max(x,v),_=n?I.shape[1]:I.shape[2],C=null!=o,j=null!=i,E="leakyrelu"===c,A=null!=c?mapActivationToShaderProgram(c,!0):null;let $;if((1===m||1===b)&&_>1e3&&!1===(C||j||E||null!=A)){let e=I,t=S;n&&(e=transpose({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),T.push(e)),r&&(t=transpose({inputs:{x:S},backend:a,attrs:{perm:[0,2,1]}}),T.push(t));const s=1===b;let o=e;1!==b&&(o=reshape({inputs:{x:e},backend:a,attrs:{shape:[N,_,1]}}),T.push(o));const i=1===b?2:1;let u=t;s&&(u=reshape({inputs:{x:t},backend:a,attrs:{shape:[N,1,_]}}),T.push(u));const c=multiply({inputs:{a:o,b:u},backend:a});$=sum({inputs:{x:c},backend:a,attrs:{axis:i,keepDims:!0}}),T.push(c)}else{const c=Object(s.upcastType)(e.dtype,t.dtype),l=new mulmat_packed_gpu_MatMulPackedProgram(k,w,[N,m,b],n,r,C,A,j,E),p=[I,S];if(null!=o&&p.push(o),j&&p.push(i),E){const e=a.makeTensorInfo([],"float32",s.util.createScalarValue(u,"float32"));p.push(e),T.push(e)}$=a.runWebGLProgram(l,p,c)}const R=reshape({inputs:{x:$},backend:a,attrs:{shape:O}});T.push($);for(const e of T)a.disposeIntermediateTensorInfo(e);return R}const $e={kernelName:s._FusedMatMul,backendName:"webgl",kernelFunc:function _fusedMatMul(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:p}=r;return batchMatMulImpl({a:a,b:s,transposeA:u,transposeB:c,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:p,activation:l})}};const Re={kernelName:s.Abs,backendName:"webgl",kernelFunc:function abs(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=Y(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let a;return a=Object(s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new unaryop_packed_gpu_UnaryOpPackedProgram(r.shape,"return abs(x);"):new unaryop_gpu_UnaryOpProgram(r.shape,"return abs(x);"),n.runWebGLProgram(a,[r],r.dtype)}},Fe=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),De={kernelName:s.Acos,backendName:"webgl",kernelFunc:Fe},Me=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Pe={kernelName:s.Acosh,backendName:"webgl",kernelFunc:Me},Be="return a + b;",Le=binaryKernelFunc({opSnippet:Be,packedOpSnippet:Be,supportsComplex:!0,cpuKernelImpl:w}),ze={kernelName:s.Add,backendName:"webgl",kernelFunc:Le};class AddNProgram{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`float v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class AddNPackedProgram{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map((e,t)=>"T"+t);const n=[];this.variableNames.forEach(e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)});const r=this.variableNames.map(e=>"v"+e).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const Ue={kernelName:s.AddN,backendName:"webgl",kernelFunc:function addN(e){const{inputs:t,backend:n}=e,r=t;if(1===r.length)return identity({inputs:{x:r[0]},backend:n});if(r.length>Object(s.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const e=Math.floor(r.length/2),t=addN({inputs:r.slice(0,e),backend:n}),a=addN({inputs:r.slice(e),backend:n});return addN({inputs:[t,a],backend:n})}const a=r.map(e=>e.dtype).reduce((e,t)=>Object(s.upcastType)(e,t)),o=r.map(e=>e.shape),i=Object(s.env)().getBool("WEBGL_PACK")?new AddNPackedProgram(r[0].shape,o):new AddNProgram(r[0].shape,o);return n.runWebGLProgram(i,r,a)}};const Ve={kernelName:s.All,backendName:"webgl",kernelFunc:function All_all(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,c=s.util.parseAxisParam(o,a.shape);let l=c;const p=s.backend_util.getAxesPermutation(l,u);let h=a;null!=p&&(h=transpose({inputs:{x:a},backend:n,attrs:{perm:p}}),l=s.backend_util.getInnerMostAxes(l.length,u)),s.backend_util.assertAxesAreInnerMostDims("all",l,u);const[f,m]=s.backend_util.computeOutAndReduceShapes(h.shape,l),b=reshape({inputs:{x:h},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(m)]}}),g=reduce(b,b.dtype,"all",n);let y;if(i){y=reshape({inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(f,c)}})}else y=reshape({inputs:{x:g},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(h),y}};const We={kernelName:s.Any,backendName:"webgl",kernelFunc:function any(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,c=s.util.parseAxisParam(o,a.shape);let l=c;const p=s.backend_util.getAxesPermutation(l,u);let h=a;null!=p&&(h=transpose({inputs:{x:a},backend:n,attrs:{perm:p}}),l=s.backend_util.getInnerMostAxes(l.length,u)),s.backend_util.assertAxesAreInnerMostDims("any",l,u);const[f,m]=s.backend_util.computeOutAndReduceShapes(h.shape,l),b=reshape({inputs:{x:h},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(m)]}}),g=reduce(b,b.dtype,"any",n);let y;if(i){y=reshape({inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(f,c)}})}else y=reshape({inputs:{x:g},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(h),y}};class ArgMinMaxProgram{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class argminmax_packed_gpu_ArgMinMaxPackedProgram{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,s.util.assert(e.length>2,()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`);const a=e[e.length-1],o=Math.ceil(a/t);this.outputShape=e.slice(0,-1),o>1&&this.outputShape.push(o),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,u=i.length,c=getCoordsDataType(u),l=getChannels("coords",u);let p,h;if(1===o){h=u+1;const e=getCoordsDataType(h);p=`\n        ${e} sourceLocR = ${e}(${l.join()}, 0);\n        ++${l[u-1]};\n        ${e} sourceLocG = ${e}(${l.join()}, 0);\n        ++${l[u-2]};\n        ${e} sourceLocA = ${e}(${l.join()}, 0);\n        --${l[u-1]};\n        ${e} sourceLocB = ${e}(${l.join()}, 0);\n        --${l[u-2]};`}else h=u,p=`\n        ${c} sourceLocR = coords;\n        ++${l[u-1]};\n        ${c} sourceLocG = coords;\n        ++${l[u-2]};\n        ${c} sourceLocA = coords;\n        --${l[u-1]};\n        ${c} sourceLocB = coords;\n        --${l[u-2]};`;const f=["x","y","z","w","u","v"].slice(0,h),m="."+f[h-1],b=f.map(e=>"int "+e),g=getChannels("sourceLocR",h-1).concat("inIdx.r"),y=getChannels("sourceLocG",h-1).concat("inIdx.g"),x=getChannels("sourceLocB",h-1).concat("inIdx.b"),v=getChannels("sourceLocA",h-1).concat("inIdx.a"),O="max"===n?"greaterThan":"lessThan",k=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${v.join()})));`,w=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${v.join()}) : 0.)`,I=r?"":`\n      float getBestIndicesAChannel(${b.join()}) {\n        return getChannel(getBestIndicesA(${f.join()}),\n                                          vec2(${f.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${b.join()}) {\n        return getChannel(getA(${f.join()}),\n                               vec2(${f.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${c} coords = getOutputCoords();\n        bool hasNextCol = ${l[u-1]} < ${i[u-1]-1};\n        bool hasNextRow = ${l[u-2]} < ${i[u-2]-1};\n        ${p}\n        ivec4 srcIdx = ivec4(sourceLocR${m}, sourceLocG${m},\n          sourceLocB${m}, sourceLocA${m}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${w};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${k}\n          vec4 candidate = ${w};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${O}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function argMinMaxReduce(e,t,n,r){const a=[n];if(s.backend_util.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),a,t.shape.length),!Object(s.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],o=e.texData.get(t.dataId);let i=t;null!==o&&o.isPacked&&(i=e.unpackTensor(t),n.push(i));const[u,c]=s.backend_util.computeOutAndReduceShapes(i.shape,a),l=s.util.sizeFromShape(c),p=reshape({inputs:{x:i},backend:e,attrs:{shape:[-1,l]}});n.push(p);const h=function argReduce(e,t,n,r=null){let a=t.shape[0],o=t.shape[1];null!=r&&(a=r.shape[0],o=r.shape[1]);const i=s.backend_util.computeOptimalWindowSize(o),u={windowSize:i,inSize:o,batchSize:a,outSize:Math.ceil(o/i)},c=new ArgMinMaxProgram(u,n,null==r),l=[t];null!=r&&l.push(r);const p=e.runWebGLProgram(c,l,"int32");if(1===p.shape[1])return p;const h=argReduce(e,t,n,p);return e.disposeIntermediateTensorInfo(p),h}(e,p,r);n.push(h);const f=reshape({inputs:{x:h},backend:e,attrs:{shape:u}});return n.forEach(t=>e.disposeIntermediateTensorInfo(t)),f}return function argReducePacked(e,t,n,r=null){const a=null!=r?r.shape:t.shape,o=a[a.length-1],i=s.backend_util.computeOptimalWindowSize(o),u=new argminmax_packed_gpu_ArgMinMaxPackedProgram(a,i,n,null==r),c=null==r?[t]:[t,r],l=e.runWebGLProgram(u,c,"int32");if(l.shape.length===t.shape.length){const r=argReducePacked(e,t,n,l);return e.disposeIntermediateTensorInfo(l),r}return l}(e,t,r)}const Ge={kernelName:s.ArgMax,backendName:"webgl",kernelFunc:function argMax(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o}=r;let i=s.util.parseAxisParam(o,a.shape);const u=s.backend_util.getAxesPermutation(i,a.shape.length);let c=a;const l=[];null!=u&&(c=transpose({inputs:{x:a},backend:n,attrs:{perm:u}}),l.push(c),i=s.backend_util.getInnerMostAxes(i.length,c.shape.length)),s.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],c.shape.length);const p=argMinMaxReduce(n,c,i[0],"max");return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}};const He={kernelName:s.ArgMin,backendName:"webgl",kernelFunc:function argMin(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o}=r;let i=s.util.parseAxisParam(o,a.shape);const u=s.backend_util.getAxesPermutation(i,a.shape.length);let c=a;const l=[];null!=u&&(c=transpose({inputs:{x:a},backend:n,attrs:{perm:u}}),l.push(c),i=s.backend_util.getInnerMostAxes(i.length,c.shape.length)),s.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],c.shape.length);const p=argMinMaxReduce(n,c,i[0],"min");return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}},qe=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Ke={kernelName:s.Asin,backendName:"webgl",kernelFunc:qe},Xe=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),Ye={kernelName:s.Asinh,backendName:"webgl",kernelFunc:Xe},Qe=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),Ze={kernelName:s.Atan,backendName:"webgl",kernelFunc:Qe},Je=binaryKernelFunc({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),et={kernelName:s.Atan2,backendName:"webgl",kernelFunc:Je},tt=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),nt={kernelName:s.Atanh,backendName:"webgl",kernelFunc:tt};class Pool2DProgram{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=e.padInfo.top,f=e.padInfo.left;this.outputShape=e.outShape;const m="avg"===t,b=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(m||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${h}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${l};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?b:g:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / count");const v=4*Math.floor(s/4),O=s%4,k=`\n      if (${m}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${f});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${l};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${v}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${v};\n          if (${1===O}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===O}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===O}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${x});\n      }\n    `}}class Pool3DProgram{constructor(e,t,n,r=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,c=e.dilationDepth,l=e.dilationHeight,p=e.dilationWidth,h=e.effectiveFilterDepth,f=e.effectiveFilterHeight,m=e.effectiveFilterWidth,b=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const x="avg"===t;let v="0.0";if(x||(v="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${b}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${h};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${l}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${m};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${f} * ${m} +\n                      wR * ${m} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let O=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(O="avgValue / count");const k=4*Math.floor(s/4),w=s%4,I=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${b}, ${g}, ${y});\n      const float initializationValue = ${v};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${v});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===w}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${O});\n        }\n      }\n    `}}const rt={kernelName:s.AvgPool,backendName:"webgl",kernelFunc:function avgPool(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;assertNotComplex(a,"avgPool");const{filterSize:o,strides:i,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const l=s.backend_util.computePool2DInfo(a.shape,o,i,1,u,c);if(1===l.filterWidth&&1===l.filterHeight&&s.util.arraysEqual(l.inShape,l.outShape))return identity({inputs:{x:a},backend:n});const p=new Pool2DProgram(l,"avg",!1);return n.runWebGLProgram(p,[a],"float32")}};const at={kernelName:s.AvgPool3D,backendName:"webgl",kernelFunc:function avgPool3D(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:c,dataFormat:l}=r,p=s.backend_util.computePool3DInfo(a.shape,o,i,[1,1,1],u,c,l),h=new Pool3DProgram(p,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}};class AvgPool2DBackpropProgram{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=i-1-e.padInfo.top,l=u-1-e.padInfo.left,p=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${c}, ${l});\n      const float avgMultiplier = float(${p});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class AvgPool3DBackpropProgram{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.effectiveFilterDepth,p=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=l-1-e.padInfo.front,m=p-1-e.padInfo.top,b=h-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${f}, ${m}, ${b});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${h};\n                wC += ${c}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const st={kernelName:s.AvgPool3DGrad,backendName:"webgl",kernelFunc:function avgPool3DGrad(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o}=t,i=o,{filterSize:u,strides:c,pad:l,dimRoundingMode:p}=r,h=s.backend_util.computePool3DInfo(i.shape,u,c,[1,1,1],l,p),f=new AvgPool3DBackpropProgram(h);return n.runWebGLProgram(f,[a],i.dtype)}};const ot={kernelName:s.AvgPoolGrad,backendName:"webgl",kernelFunc:function avgPoolGrad(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o}=t,i=o;assertNotComplex([a,o],"avgPoolGrad");const{filterSize:u,strides:c,pad:l}=r,p=s.backend_util.computePool2DInfo(i.shape,u,c,1,l),h=new AvgPool2DBackpropProgram(p);return n.runWebGLProgram(h,[a],i.dtype)}};const it={kernelName:s.BatchMatMul,backendName:"webgl",kernelFunc:function batchMatMul(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:o,transposeB:i}=r;return batchMatMulImpl({a:a,b:s,transposeA:o,transposeB:i,backend:n})}};class batchnorm_gpu_BatchNormProgram{constructor(e,t,n,r,a,o){this.outputShape=[],this.variableNames=["x","mean","variance"],s.backend_util.assertAndGetBroadcastShape(e,t),s.backend_util.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(s.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="1.0";null!=a&&(s.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${o}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class batchnorm_packed_gpu_BatchNormPackedProgram{constructor(e,t,n,r,a,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],s.backend_util.assertAndGetBroadcastShape(e,t),s.backend_util.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(s.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=a&&(s.backend_util.assertAndGetBroadcastShape(e,a),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${o}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const ut={kernelName:s.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,mean:a,variance:o,offset:i,scale:u}=e;s.util.assert(a.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),s.util.assert(null==i||a.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),s.util.assert(null==u||a.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:c}=n;null==c&&(c=.001);const l=[r,a,o];let p=null;null!=i&&(p=i.shape,l.push(i));let h=null;null!=u&&(h=u.shape,l.push(u));const f=Object(s.env)().getBool("WEBGL_PACK_NORMALIZATION")?new batchnorm_packed_gpu_BatchNormPackedProgram(r.shape,a.shape,o.shape,p,h,c):new batchnorm_gpu_BatchNormProgram(r.shape,a.shape,o.shape,p,h,c);return t.runWebGLProgram(f,l,l[0].dtype)}};class slice_gpu_SliceProgram{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=getCoordsDataType(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function getCoords(e){if(1===e)return"sourceLoc";if(e<=6)return ct.slice(0,e).map(e=>"sourceLoc."+e).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map((e,t)=>`sourceLoc.${ct[t]} = start[${t}] + coords.${ct[t]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const ct=["x","y","z","w","u","v"];class slice_packed_gpu_SlicePackedProgram{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=getCoordsDataType(this.rank),n=getChannels("coords",this.rank),r=getChannels("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map((e,t)=>`start[${t}]`).join()});`:e.map((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function Slice_slice(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:o,size:i}=r,[u,c]=s.slice_util.parseSliceParams(a,o,i);if(s.slice_util.assertParamsValid(a,u,c),0===s.util.sizeFromShape(c))return n.makeTensorInfo(c,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=Q(e.values,u,c,a.shape,a.dtype);return n.makeTensorInfo(c,a.dtype,t)}const{isPacked:l}=n.texData.get(a.dataId),p=s.slice_util.isSliceContinous(a.shape,u,c);if(l||!p){const e=Object(s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new slice_packed_gpu_SlicePackedProgram(c):new slice_gpu_SliceProgram(c),t=[u];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function shallowSlice(e,t,n,r){const a=r.texData.get(e.dataId),o=r.makeTensorInfo(n,e.dtype),i=r.texData.get(o.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let u=s.slice_util.computeFlatOffset(t,s.util.computeStrides(e.shape));a.slice&&(u+=a.slice.flatOffset),i.slice={flatOffset:u,origDataId:a.slice&&a.slice.origDataId||e.dataId};const c=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,c+1),o}(a,u,c,n)}const lt={kernelName:s.Slice,backendName:"webgl",kernelFunc:Slice_slice},dt={kernelName:s.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:o,crops:i}=r;s.util.assert(a.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const u=o.reduce((e,t)=>e*t),c=s.backend_util.getReshaped(a.shape,o,u),l=s.backend_util.getPermuted(c.length,o.length),p=s.backend_util.getReshapedPermuted(a.shape,o,u),h=s.backend_util.getSliceBeginCoords(i,o.length),f=s.backend_util.getSliceSize(p,i,o.length),m=[],b=reshape({inputs:{x:a},backend:n,attrs:{shape:c}}),g=transpose({inputs:{x:b},backend:n,attrs:{perm:l}}),y=reshape({inputs:{x:g},backend:n,attrs:{shape:p}}),x=Slice_slice({inputs:{x:y},backend:n,attrs:{begin:h,size:f}});return m.push(b),m.push(g),m.push(y),m.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}};const pt={kernelName:s.Bincount,backendName:"webgl",kernelFunc:function bincount(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.readSync(a.dataId),u=n.readSync(s.dataId),c=I(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,c)}};const ht={kernelName:s.BroadcastArgs,backendName:"webgl",kernelFunc:function broadcastArgs(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=s.backend_util.assertAndGetBroadcastShape(Array.from(o),Array.from(i));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},ft=binaryKernelFunc({opSnippet:"return float(a != b);",cpuKernelImpl:G,dtype:"bool"}),mt={kernelName:s.NotEqual,backendName:"webgl",kernelFunc:ft};function Real_real(e){const{inputs:t,backend:n}=e,{input:r}=t;return identity({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const bt={kernelName:s.Real,backendName:"webgl",kernelFunc:Real_real};const gt={kernelName:s.Cast,backendName:"webgl",kernelFunc:function cast(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:o}=r;if("complex64"===o){if("complex64"===a.dtype)return identity({inputs:{x:a},backend:n});const e=s.zeros(a.shape),t=cast({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=Complex_complex({inputs:{real:t,imag:e},backend:n});return e.dispose(),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=Real_real({inputs:{input:a},backend:n}),t=cast({inputs:{x:e},backend:n,attrs:{dtype:o}});return n.disposeIntermediateTensorInfo(e),t}if(!s.util.hasEncodingLoss(a.dtype,o)){const e=identity({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o)return function int_int(e,t){const n=new unaryop_gpu_UnaryOpProgram(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(a,n);if("bool"===o){const e=n.makeTensorInfo([],"bool",s.util.getTypedArrayFromDType("bool",1)),t=ft({inputs:{a:a,b:e},backend:n});return n.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${o}`)}},yt="return ceil(x);",xt=unaryKernelFunc({opSnippet:yt,packedOpSnippet:yt,cpuKernelImpl:T}),vt={kernelName:s.Ceil,backendName:"webgl",kernelFunc:xt};class ClipProgram{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class ClipPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Ot={kernelName:s.ClipByValue,backendName:"webgl",kernelFunc:function clipByValue(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{clipValueMin:o,clipValueMax:i}=r;let u;u=Object(s.env)().getBool("WEBGL_PACK_CLIP")?new ClipPackedProgram(a.shape):new ClipProgram(a.shape);const c=[[o],[i]];return n.runWebGLProgram(u,[a],a.dtype,c)}};class ComplexAbsProgram{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function makeComplexComponentTensorInfo(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const kt={kernelName:s.ComplexAbs,backendName:"webgl",kernelFunc:function complexAbs(e){const{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new ComplexAbsProgram(r.shape),o=[makeComplexComponentTensorInfo(r,a.complexTensorInfos.real),makeComplexComponentTensorInfo(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,o,o[0].dtype)}};class concat_gpu_ConcatProgram{constructor(e){this.outputShape=[],this.outputShape=s.backend_util.computeOutShape(e,1),this.variableNames=e.map((e,t)=>"T"+t);const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const r=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${r}));`)}const r=t.length,a=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class concat_packed_gpu_ConcatPackedProgram{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=s.backend_util.computeOutShape(e,t);const n=this.outputShape,r=n.length,a=getCoordsDataType(r),o=getChannels("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map((e,t)=>"T"+t);const u=new Array(e.length-1);u[0]=e[0][t];for(let n=1;n<u.length;n++)u[n]=u[n-1]+e[n][t];const c=i[t],l=i.slice(-2),p=i.join();let h=`if (${c} < ${u[0]}) {\n        return getChannel(\n            getT0(${p}), vec2(${l.join()}));\n        }`;for(let e=1;e<u.length;e++){const t=u[e-1];h+=`\n        if (${c} < ${u[e]}  && ${c} >= ${u[e-1]}) {\n          return getChannel(\n            getT${e}(${shiftedChannels(i,c,t)}),\n            vec2(${shiftedChannels(l,c,t)}));\n        }`}const f=u.length,m=u[u.length-1];h+=`\n        return getChannel(\n          getT${f}(${shiftedChannels(i,c,m)}),\n          vec2(${shiftedChannels(l,c,m)}));`,this.userCode=`\n      float getValue(${i.map(e=>"int "+e)}) {\n        ${h}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${o}), 0., 0., 0.);\n\n        ${o[r-1]} = ${o[r-1]} + 1;\n        if (${o[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${o});\n        }\n\n        ${o[r-2]} = ${o[r-2]} + 1;\n        if (${o[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${o});\n        }\n\n        ${o[r-1]} = ${o[r-1]} - 1;\n        if (${o[r-2]} < ${n[r-2]} &&\n            ${o[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${o});\n        }\n        setOutput(result);\n      }\n    `}}function shiftedChannels(e,t,n){const r=e.indexOf(t);return e.map((e,t)=>t===r?`${e} - ${n}`:e).join()}function Imag_imag(e){const{inputs:t,backend:n}=e,{input:r}=t;return identity({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const wt={kernelName:s.Imag,backendName:"webgl",kernelFunc:Imag_imag};function concatImpl(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map(e=>Real_real({inputs:{input:e},backend:n})),a=e.map(e=>Imag_imag({inputs:{input:e},backend:n})),s=concatImpl(r,t,n),o=concatImpl(a,t,n),i=Complex_complex({inputs:{real:s,imag:o},backend:n});return r.forEach(e=>n.disposeIntermediateTensorInfo(e)),a.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}let a=n.shouldExecuteOnCPU(e);if("string"===r&&(a=!0),a){const a=e.map(e=>{const r=s.util.sizeFromShape(e.shape.slice(t));return reshape({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})}),o=a.map(e=>({vals:n.readSync(e.dataId),shape:e.shape})),i=s.backend_util.computeOutShape(a.map(e=>e.shape),1),u=1===a[0].shape[0],c=N(o,i,r,u),l=s.backend_util.computeOutShape(e.map(e=>e.shape),t),p=n.makeTensorInfo(l,r,c);return a.forEach(e=>n.disposeIntermediateTensorInfo(e)),p}if(e.length>Object(s.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const r=Math.floor(e.length/2),a=concatImpl(e.slice(0,r),t,n),s=concatImpl(e.slice(r),t,n),o=concatImpl([a,s],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}if(Object(s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new concat_packed_gpu_ConcatPackedProgram(e.map(e=>e.shape),t);return n.runWebGLProgram(a,e,r)}const{tensors2D:o,outShape:i}=function computeTensors2D(e,t,n){const r=s.backend_util.computeOutShape(e.map(e=>e.shape),t);return{tensors2D:e.map(e=>reshape({inputs:{x:e},attrs:{shape:[-1,s.util.sizeFromShape(e.shape.slice(t))]},backend:n})),outShape:r}}(e,t,n),u=new concat_gpu_ConcatProgram(o.map(e=>e.shape)),c=n.runWebGLProgram(u,o,r);o.forEach(e=>n.disposeIntermediateTensorInfo(e));const l=reshape({inputs:{x:c},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(c),l}function concat(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,o=s.util.parseAxisParam(a,t[0].shape)[0],i=s.backend_util.computeOutShape(t.map(e=>e.shape),o);if(0===s.util.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter(e=>s.util.sizeFromShape(e.shape)>0);if(1===u.length)return identity({inputs:{x:u[0]},backend:n});const c=u.map(e=>e.shape);return s.backend_util.assertParamsConsistent(c,o),concatImpl(u,o,n)}const It={kernelName:s.Concat,backendName:"webgl",kernelFunc:concat};class Conv2DProgram{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,c=e.dilationHeight,l=e.dilationWidth,p=e.filterHeight,h=e.filterWidth,f=4*Math.floor(e.inChannels/4),m=e.inChannels%4,b="channelsLast"===e.dataFormat,g=b?1:2,y=b?2:3,x=b?3:1;let v="",O="";n&&(v=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,O="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${h}; wC++) {\n            int xC = xCCorner + wC * ${l};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${b}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===m}) {\n\n              if (${b}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===m}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${b}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===m}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${b}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${O}\n        setOutput(result);\n      }\n    `}}class Conv3DProgram{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,c=e.dilationWidth,l=e.filterDepth,p=e.filterHeight,h=e.filterWidth,f=4*Math.floor(e.inChannels/4),m=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${s}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${l}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===m}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class im2col_packed_gpu_Im2ColPackedProgram{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const{dataFormat:n}=t,r=getGlslDifferences(),a="channelsLast"===n,s=a?0:1,o=a?1:2,i=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let u="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)u+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${s}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function conv2dByMatMul({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const c=e.shape,l=r.texData.get(e.dataId),p=n.inChannels,h=c[0]*c[1]*c[2],f=n.outChannels,m="channelsLast"===n.dataFormat;let b;const g=[];if(!((1===h||1===f)&&p>1e3)&&l.isPacked&&m&&null!=l.texture&&c[2]%2!=0&&s.util.arraysEqual(l.shape.slice(-3),c.slice(-3))){const p=c[0]*c[1]*(c[2]+1),h={dataId:e.dataId,shape:[1,p,n.inChannels],dtype:e.dtype},f=l.shape;l.shape=l.shape.slice(),l.shape[l.shape.length-2]++,s.util.assert(isReshapeFree(l.shape,h.shape),()=>`packed reshape ${l.shape} to ${h.shape} isn't free`);const m=reshape({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});g.push(m);const y=batchMatMulImpl({a:h,b:m,backend:r,transposeA:!1,transposeB:!1,bias:a,activation:u,preluActivationWeights:o,leakyreluAlpha:i}),x=r.texData.get(y.dataId);s.util.assert(x.isPacked,()=>"batchMatMul result is expected to be packed"),l.shape=f,x.shape=n.outShape,b=identity({inputs:{x:y},backend:r}),b.shape=n.outShape,g.push(y)}else{const s=reshape({inputs:{x:e},backend:r,attrs:{shape:[1,m?c[0]*c[1]*c[2]:c[0]*c[2]*c[3],n.inChannels]}}),l=reshape({inputs:{x:t},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=batchMatMulImpl({a:s,b:l,transposeA:!1,transposeB:!1,backend:r,bias:a,activation:u,preluActivationWeights:o,leakyreluAlpha:i});b=reshape({inputs:{x:p},backend:r,attrs:{shape:n.outShape}}),g.push(s),g.push(l),g.push(p)}for(const e of g)r.disposeIntermediateTensorInfo(e);return b}function conv2dWithIm2Row({x:e,filter:t,convInfo:n,backend:r,bias:a=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:u=null}){const{filterWidth:c,filterHeight:l,inChannels:p,outWidth:h,outHeight:f,dataFormat:m}=n,b="channelsLast"===m,g=c*l*p,y=f*h,x=[g,y],v=[],O=reshape({inputs:{x:e},backend:r,attrs:{shape:e.shape.slice(1)}}),k=reshape({inputs:{x:t},backend:r,attrs:{shape:[1,g,s.util.sizeFromShape(t.shape)/g]}});v.push(O),v.push(k);const w=new im2col_packed_gpu_Im2ColPackedProgram(x,n),I=[O.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],S=r.runWebGLProgram(w,[O],"float32",I),T=reshape({inputs:{x:S},backend:r,attrs:{shape:[1,x[0],x[1]]}});v.push(S),v.push(T);const N=null!=a,_=null!=o,C="leakyrelu"===u,j=u?mapActivationToShaderProgram(u,!0):null,E=new mulmat_packed_gpu_MatMulPackedProgram(T.shape,k.shape,[1,y,n.outChannels],!0,!1,N,j,_,C),A=[T,k];if(a&&A.push(a),_&&A.push(o),C){const e=r.makeTensorInfo([],"float32",s.util.createScalarValue(i,"float32"));A.push(e),v.push(e)}const $=r.runWebGLProgram(E,A,"float32"),R=reshape({inputs:{x:$},backend:r,attrs:{shape:b?[1,f,h,n.outChannels]:[1,n.outChannels,f,h]}});v.push($);for(const e of v)r.disposeIntermediateTensorInfo(e);return R}const St={kernelName:s.Conv2D,backendName:"webgl",kernelFunc:function conv2d(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dataFormat:c,dilations:l,dimRoundingMode:p}=r,h=s.backend_util.convertConv2DDataFormat(c),f=s.backend_util.computeConv2DInfo(a.shape,o.shape,i,l,u,p,!1,h);let m;if(1!==f.filterHeight||1!==f.filterWidth||1!==f.dilationHeight||1!==f.dilationWidth||1!==f.strideHeight||1!==f.strideWidth||"SAME"!==f.padInfo.type&&"VALID"!==f.padInfo.type)if(Object(s.env)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])m=conv2dWithIm2Row({x:a,filter:o,convInfo:f,backend:n});else{const e=new Conv2DProgram(f);m=n.runWebGLProgram(e,[a,o],"float32")}else m=conv2dByMatMul({x:a,filter:o,convInfo:f,backend:n});const b=reshape({inputs:{x:m},backend:n,attrs:{shape:f.outShape}});return n.disposeIntermediateTensorInfo(m),b}};class Conv2DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Conv2DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=s?1:2,c=s?2:3,l=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${l}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Conv3DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Conv3DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,c=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${c});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Tt={kernelName:s.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function conv2DBackpropFilter(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:o}=t,{strides:i,pad:u,dataFormat:c,dimRoundingMode:l,filterShape:p}=r,h=s.backend_util.convertConv2DDataFormat(c),f=s.backend_util.computeConv2DInfo(a.shape,p,i,1,u,l,!1,h),m=new Conv2DDerFilterProgram(f);return n.runWebGLProgram(m,[a,o],"float32")}};const Nt={kernelName:s.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function conv2DBackpropInput(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:o}=t,{inputShape:i,strides:u,pad:c,dataFormat:l,dimRoundingMode:p}=r,h=s.backend_util.convertConv2DDataFormat(l),f=s.backend_util.computeConv2DInfo(i,o.shape,u,1,c,p,!1,h),m=new Conv2DDerInputProgram(f);return n.runWebGLProgram(m,[a,o],"float32")}};const _t={kernelName:s.Conv3D,backendName:"webgl",kernelFunc:function conv3D(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dilations:c}=r,l=s.backend_util.computeConv3DInfo(a.shape,o.shape,i,c,u),p=new Conv3DProgram(l);return n.runWebGLProgram(p,[a,o],"float32")}};const Ct={kernelName:s.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function conv3DBackpropFilterV2(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:o}=t,{strides:i,pad:u,filterShape:c}=r,l=s.backend_util.computeConv3DInfo(a.shape,c,i,1,u),p=new Conv3DDerFilterProgram(l);return n.runWebGLProgram(p,[a,o],"float32")}};const jt={kernelName:s.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function conv3DBackpropInput(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:o}=t,{pad:i,strides:u,inputShape:c}=r,l=s.backend_util.computeConv3DInfo(c,o.shape,u,1,i),p=new Conv3DDerInputProgram(l);return n.runWebGLProgram(p,[a,o],"float32")}},Et=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),At={kernelName:s.Cos,backendName:"webgl",kernelFunc:Et},$t=unaryKernelFunc({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Rt={kernelName:s.Cosh,backendName:"webgl",kernelFunc:$t};class CropAndResizeProgram{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,u]=e,[c]=t,[l,p]=n;this.outputShape=[c,l,p,u];const h="bilinear"===r?1:0,[f,m]=[o-1+".0",i-1+".0"],[b,g,y]=l>1?[""+(o-1)/(l-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0","0.5 * (y1+y2) * "+f],[x,v,O]=p>1?[""+(i-1)/(p-1),"(x2-x1) * width_ratio",`x1*${m} + float(x)*(width_scale)`]:["0.0","0.0","0.5 * (x1+x2) * "+m];this.userCode=`\n      const float height_ratio = float(${b});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${v};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${O};\n        if( in_x < 0.0 || in_x > ${m} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${h} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Ft={kernelName:s.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:c}=r,l=new CropAndResizeProgram(a.shape,s.shape,i,u,c);return n.runWebGLProgram(l,[a,s,o],"float32")}};class cumsum_gpu_CumSumProgram{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=e;const r=e.length,a=t?"0.0":`getX(${cumsum_gpu_getCoords(r,"coords")})`,s=e[e.length-1];let o="",i="";t?(o=n?"end != "+(s-1):"end != 0",i=n?"end + 1":"end - 1"):(o=n?"end + pow2 < "+s:"end >= pow2",i=n?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${getCoordsDataType(r)} coords = getOutputCoords();\n        int end = ${getFinalCoord(r,"coords")};\n        float val = ${a};\n        int pow2 = int(pow(2.0, index));\n        if (${o}) {\n          int idx = ${i};\n          ${getFinalCoord(r,"coords")} = idx;\n          val += getX(${cumsum_gpu_getCoords(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function cumsum_gpu_getCoords(e,t){if(1===e)return""+t;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${e} is not yet supported`)}function getFinalCoord(e,t){if(1===e)return""+t;if(2===e)return t+".y";if(3===e)return t+".z";if(4===e)return t+".w";throw Error(`Cumulative sum for rank ${e} is not yet supported`)}const Dt={kernelName:s.Cumsum,backendName:"webgl",kernelFunc:function cumsum(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,exclusive:i,reverse:u}=r,c=a.shape.length,l=s.backend_util.getAxesPermutation([o],c);let p=a;null!=l&&(p=transpose({inputs:{x:a},backend:n,attrs:{perm:l}}));const h=s.backend_util.getInnerMostAxes(1,c)[0];if(h!==c-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${a.shape.length-1} but got axis=`+o);const f=p.shape[h];let m=identity({inputs:{x:p},backend:n});for(let e=0;e<=Math.ceil(Math.log2(f))-1;e++){const t=new cumsum_gpu_CumSumProgram(p.shape,!1,u),r=[[e]],a=m;m=n.runWebGLProgram(t,[m],m.dtype,r),n.disposeIntermediateTensorInfo(a)}if(i){const e=new cumsum_gpu_CumSumProgram(p.shape,i,u),t=m;m=n.runWebGLProgram(e,[m],m.dtype),n.disposeIntermediateTensorInfo(t)}if(null!=l){const e=transpose({inputs:{x:m},backend:n,attrs:{perm:s.backend_util.getUndoAxesPermutation(l)}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(p),e}return m}};const Mt={kernelName:s.DenseBincount,backendName:"webgl",kernelFunc:function denseBincount(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(s.dataId),r=I(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=S(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+a.shape.length+".")}};class DepthToSpaceProgram{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Pt={kernelName:s.DepthToSpace,backendName:"webgl",kernelFunc:function depthToSpace(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:o}=r,i=a.shape[0],u=("NHWC"===o?a.shape[1]:a.shape[2])*s,c=("NHWC"===o?a.shape[2]:a.shape[3])*s,l=("NHWC"===o?a.shape[3]:a.shape[1])/(s*s),p=new DepthToSpaceProgram("NHWC"===o?[i,u,c,l]:[i,l,u,c],s,o);return n.runWebGLProgram(p,[a],a.dtype)}};class conv_gpu_depthwise_DepthwiseConv2DProgram{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const s=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let u="",c="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,c="result = activation(result);");const l=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${s}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${l}\n        ${c}\n        setOutput(result);\n      }\n    `}}class conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram{constructor(e,t=!1,n=null,r=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=useShapeUniforms(this.outputShape.length);const o=e.outChannels/e.inChannels,i=e.padInfo.left,u=e.strideWidth,c=e.dilationWidth,l=e.filterHeight,p=e.filterWidth,h=p;let f="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<p;e++)f+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;f+=`\n    for (int r = 0; r < ${l}; r++) {\n      `;for(let e=0;e<p;e++)f+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;f+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(f+=`\n          xC = xCCorner + ${t*c};\n          `,1===u){if(t<p&&(i%2==1?(f+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,f+=1===c&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):f+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<p)){const e=i%2==0?s.util.nearestLargerEven(c):c;c%2==0&&i%2==1||c%2!=0&&i%2!=1?(f+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,c>1&&(f+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),f+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):f+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<p&&(i%2==1?(f+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<p&&(f+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(f+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<p&&(f+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<p&&(f+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<p&&(f+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}f+="\n    }\n  ",f+="\n      }\n    ";let m="",b="";n&&(m=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,b="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${m}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${f}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${b}\n        setOutput(result);\n      }\n    `}}const Bt={kernelName:s.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function depthwiseConv2dNative(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dilations:c,dimRoundingMode:l}=r;let p=c;null==p&&(p=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const h=s.backend_util.computeConv2DInfo(a.shape,o.shape,i,p,u,l,!0);let f;f=Object(s.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram(h):new conv_gpu_depthwise_DepthwiseConv2DProgram(h);const m=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(f,[a,o],"float32",m)}};class DepthwiseConv2DDerFilterProgram{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class DepthwiseConv2DDerInputProgram{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Lt={kernelName:s.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function depthwiseConv2dNativeBackpropFilter(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:o}=t,{strides:i,dilations:u,pad:c,dimRoundingMode:l,filterShape:p}=r,h=s.backend_util.computeConv2DInfo(a.shape,p,i,u,c,l,!0),f=new DepthwiseConv2DDerFilterProgram(h);return n.runWebGLProgram(f,[a,o],"float32")}};const zt={kernelName:s.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function depthwiseConv2dNativeBackpropInput(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:o}=t,{strides:i,dilations:u,pad:c,dimRoundingMode:l,inputShape:p}=r,h=s.backend_util.computeConv2DInfo(p,o.shape,i,u,c,l,!0),f=new DepthwiseConv2DDerInputProgram(h);return n.runWebGLProgram(f,[a,o],"float32")}};class DiagProgram{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Ut={kernelName:s.Diag,backendName:"webgl",kernelFunc:function diag(e){const{inputs:t,backend:n}=e,{x:r}=t,a=[...r.shape,...r.shape],o=s.util.sizeFromShape(r.shape),i=reshape({inputs:{x:r},backend:n,attrs:{shape:[o]}}),u=new DiagProgram(o),c=n.runWebGLProgram(u,[i],i.dtype),l=reshape({inputs:{x:c},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(c),l}};class Dilation2DProgram{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:c}=e,{top:l,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${s});\n      const ivec2 pads = ivec2(${l}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const Vt={kernelName:s.Dilation2D,backendName:"webgl",kernelFunc:function dilation2D(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o}=t,{strides:i,pad:u,dilations:c}=r,l=s.backend_util.computeDilation2DInfo(a.shape,o.shape,i,u,"NHWC",c);let p;const h=new Dilation2DProgram(l);p=n.runWebGLProgram(h,[a,o],"float32");const f=reshape({inputs:{x:p},backend:n,attrs:{shape:l.outShape}});return n.disposeIntermediateTensorInfo(p),f}};const Wt={kernelName:s.Einsum,backendName:"webgl",kernelFunc:function einsum(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,o=t,{allDims:i,summedDims:u,idDims:c}=s.backend_util.decodeEinsumEquation(a,o.length);s.backend_util.checkEinsumDimSizes(i.length,c,o);const{path:l,steps:p}=s.backend_util.getEinsumComputePath(u,c),h=p.length;let f=null,m=i.length;const b=[];for(let e=0;e<h;++e){for(const t of p[e]){const{permutationIndices:e,expandDims:r}=s.backend_util.getEinsumPermutation(m,c[t]);let a;s.backend_util.isIdentityPermutation(e)?a=o[t]:(a=transpose({inputs:{x:o[t]},backend:n,attrs:{perm:e}}),b.push(a));const i=a.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);s.util.arraysEqual(a.shape,i)||(a=reshape({inputs:{x:a},backend:n,attrs:{shape:i}}),b.push(a)),null===f?f=a:(f=multiply({inputs:{a:a,b:f},backend:n}),b.push(f))}e<h-1&&(l[e]>=0&&(f=sum({inputs:{x:f},backend:n,attrs:{axis:l[e]-(i.length-m),keepDims:!1}}),b.push(f)),m--)}for(const e of b)e!==f&&n.disposeIntermediateTensorInfo(e);return f}},Gt=unaryKernelFunc({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),Ht={kernelName:s.Elu,backendName:"webgl",kernelFunc:Gt},qt={kernelName:s.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:a}=t,o=Object(s.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new binaryop_packed_gpu_BinaryOpPackedProgram("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,a.shape):new binaryop_gpu_BinaryOpProgram("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,a.shape);return n.runWebGLProgram(o,[r,a],r.dtype)}},Kt=binaryKernelFunc({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:_}),Xt={kernelName:s.Equal,backendName:"webgl",kernelFunc:Kt},Yt=unaryKernelFunc({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${s.backend_util.ERF_P};\n  float a1 = ${s.backend_util.ERF_A1};\n  float a2 = ${s.backend_util.ERF_A2};\n  float a3 = ${s.backend_util.ERF_A3};\n  float a4 = ${s.backend_util.ERF_A4};\n  float a5 = ${s.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),Qt={kernelName:s.Erf,backendName:"webgl",kernelFunc:Yt},Zt=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:C,dtype:"float32"}),Jt={kernelName:s.Exp,backendName:"webgl",kernelFunc:Zt};function expandDims(e){const{inputs:t,attrs:n,backend:r}=e,{dim:a}=n,{input:o}=t,i=o.shape.length,u=o.shape.slice();let c=a;return a<0&&(s.util.assert(-(i+1)<=a,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),c=i+a+1),u.splice(c,0,1),reshape({inputs:{x:o},backend:r,attrs:{shape:u}})}const en={kernelName:s.ExpandDims,backendName:"webgl",kernelFunc:expandDims},tn="return exp(x) - 1.0;",nn=unaryKernelFunc({opSnippet:tn,packedOpSnippet:tn,cpuKernelImpl:j}),rn={kernelName:s.Expm1,backendName:"webgl",kernelFunc:nn};class FFTProgram{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const a=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,s=n?r+".0":"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function fftImpl(e,t,n){const r=n.texData.get(e.dataId),a=s.util.sizeFromShape(e.shape),o=e.shape[e.shape.length-1],i=reshape({inputs:{x:e},backend:n,attrs:{shape:[a/o,o]}}),u=i.shape,c=new FFTProgram("real",u,t),l=new FFTProgram("imag",u,t),p=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],h=n.runWebGLProgram(c,p,"float32"),f=n.runWebGLProgram(l,p,"float32"),m=Complex_complex({inputs:{real:h,imag:f},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f);const b=reshape({inputs:{x:m},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(m),b}const an={kernelName:s.FFT,backendName:"webgl",kernelFunc:function fft(e){const{inputs:t,backend:n}=e,{input:r}=t;return fftImpl(r,!1,n)}};class FillProgram{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function fill(e){const{backend:t,attrs:n}=e,{shape:r,value:a}=n;let{dtype:o}=n;if(o=o||s.util.inferDtype(a),"string"===o){const e=s.util.getArrayFromDType(o,s.util.sizeFromShape(r));return e.fill(a),t.makeTensorInfo(r,o,e)}{const e=new FillProgram(r,a),n=[[a]];return t.runWebGLProgram(e,[],o,n)}}const sn={kernelName:s.Fill,backendName:"webgl",kernelFunc:fill};class FlipLeftRightProgram{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const on={kernelName:s.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,r=t,a=new FlipLeftRightProgram(n.shape);return r.runWebGLProgram(a,[n],n.dtype)}},un="return floor(x);",cn=unaryKernelFunc({opSnippet:un,packedOpSnippet:un,cpuKernelImpl:E}),ln={kernelName:s.Floor,backendName:"webgl",kernelFunc:cn},dn=binaryKernelFunc({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),pn={kernelName:s.FloorDiv,backendName:"webgl",kernelFunc:dn};class from_pixels_gpu_FromPixelsProgram{constructor(e){this.variableNames=["A"];const t=getGlslDifferences(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class from_pixels_packed_gpu_FromPixelsPackedProgram{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=getGlslDifferences(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const hn={kernelName:s.FromPixels,backendName:"webgl",kernelFunc:function fromPixels(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:a}=t;const{numChannels:o}=r,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,p]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],h=[p,l],f=[p,l,o];(u||i)&&(null==fn&&(fn=document.createElement("canvas").getContext("2d")),fn.canvas.width=l,fn.canvas.height=p,fn.drawImage(a,0,0,l,p),a=fn.canvas);const m=n.makeTensorInfo(h,"int32");n.texData.get(m.dataId).usage=c.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(m.dataId),a);const b=Object(s.env)().getBool("WEBGL_PACK")?new from_pixels_packed_gpu_FromPixelsPackedProgram(f):new from_pixels_gpu_FromPixelsProgram(f),g=n.runWebGLProgram(b,[m],"int32");return n.disposeData(m.dataId),g}};let fn;const mn={kernelName:s.FusedConv2D,backendName:"webgl",kernelFunc:function fusedConv2d(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o,bias:i,preluActivationWeights:u}=t,{strides:c,pad:l,dataFormat:p,dilations:h,dimRoundingMode:f,activation:m,leakyreluAlpha:b}=r,g=s.backend_util.convertConv2DDataFormat(p),y=s.backend_util.computeConv2DInfo(a.shape,o.shape,c,h,l,f,!1,g);let x;const v=[];if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if(Object(s.env)().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])x=conv2dWithIm2Row({x:a,filter:o,convInfo:y,backend:n,bias:i,activation:m,preluActivationWeights:u,leakyreluAlpha:b});else{const e=null!=i,t=null!=u,r="leakyrelu"===m,c=m?mapActivationToShaderProgram(m,!1):null,l=new Conv2DProgram(y,e,c,t,r),p=[a,o];if(i&&p.push(i),u&&p.push(u),r){const e=n.makeTensorInfo([],"float32",s.util.createScalarValue(b,"float32"));p.push(e),v.push(e)}x=n.runWebGLProgram(l,p,"float32")}else x=conv2dByMatMul({x:a,filter:o,convInfo:y,backend:n,bias:i,activation:m,preluActivationWeights:u,leakyreluAlpha:b});const O=reshape({inputs:{x:x},backend:n,attrs:{shape:y.outShape}});return v.push(x),v.forEach(e=>n.disposeIntermediateTensorInfo(e)),O}};const bn={kernelName:s.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function fusedDepthwiseConv2D(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:o,bias:i,preluActivationWeights:u}=t,{strides:c,pad:l,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r,b=[];let g=p;null==g&&(g=[1,1]),s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(c,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${c} and dilations '${g}'`);const y=s.backend_util.computeConv2DInfo(a.shape,o.shape,c,g,l,h,!0),x=Object(s.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels==1,v=f?mapActivationToShaderProgram(f,x):null,O=[a,o],k=null!=i,w=null!=u,I="leakyrelu"===f;if(k&&O.push(i),w&&O.push(u),I){const e=n.makeTensorInfo([],"float32",s.util.createScalarValue(m,"float32"));O.push(e),b.push(e)}let S;S=x?new conv_packed_gpu_depthwise_DepthwiseConvPacked2DProgram(y,k,v,w,I):new conv_gpu_depthwise_DepthwiseConv2DProgram(y,k,v,w,I);const T=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],N=n.runWebGLProgram(S,O,"float32",T);return b.forEach(e=>n.disposeIntermediateTensorInfo(e)),N}};class gather_nd_gpu_GatherNDProgram{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const r=getCoordsDataType(t.length),a=getCoordsDataType(n.length),s=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${s};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const gn={kernelName:s.GatherNd,backendName:"webgl",kernelFunc:function gatherNd(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,o=a.shape,i=o[o.length-1],u=s.util.sizeFromShape(r.shape),[c,l,p,h]=s.backend_util.prepareAndValidate(r,a),f=reshape({inputs:{x:a},backend:n,attrs:{shape:[l,i]}}),m=reshape({inputs:{x:r},backend:n,attrs:{shape:[s.util.sizeFromShape(r.shape)/p,p]}});if(n.shouldExecuteOnCPU([r,a])||"string"===r.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(r),s=A(e,t,r.dtype,l,i,p,h,r.shape,u);return n.makeTensorInfo(c,r.dtype,s.values)}const b=new gather_nd_gpu_GatherNDProgram(i,h,[l,p]),g=n.runWebGLProgram(b,[m,f],m.dtype),y=reshape({inputs:{x:g},backend:n,attrs:{shape:c}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),y}};class gather_gpu_GatherProgram{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=getCoordsDataType(this.rank),r=function gather_gpu_getSourceCoords(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let t=0;t<e.length;t++)2===t?r.push("index"):r.push(""+n[t]);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function gatherV2(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:o}=t,{axis:i,batchDims:u}=r,c=s.util.parseAxisParam(i,a.shape)[0];if(Object(s.env)().get("DEBUG")){const e=n.readSync(o.dataId),t=a.shape[c];for(let n=0;n<e.length;++n){const r=e[n];s.util.assert(r<=t-1&&r>=0,()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`)}}const l=s.backend_util.segment_util.collectGatherOpShapeInfo(a,o,c,u),p=s.util.sizeFromShape(o.shape),h=[],f=reshape({inputs:{x:a},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),m=reshape({inputs:{x:o},backend:n,attrs:{shape:[l.batchSize,p/l.batchSize]}});h.push(f),h.push(m);const b=[l.batchSize,l.outerSize,p/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([a,o])||"string"===a.dtype){const e=n.bufferSync(m),t=n.bufferSync(f),r=$(t,e,b);return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const g=new gather_gpu_GatherProgram(f.shape,b),y=n.runWebGLProgram(g,[f,m],f.dtype);h.push(y);const x=reshape({inputs:{x:y},backend:n,attrs:{shape:l.outputShape}});return h.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}const yn={kernelName:s.GatherV2,backendName:"webgl",kernelFunc:gatherV2},xn=binaryKernelFunc({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:R,dtype:"bool"}),vn={kernelName:s.Greater,backendName:"webgl",kernelFunc:xn},On=binaryKernelFunc({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:F}),kn={kernelName:s.GreaterEqual,backendName:"webgl",kernelFunc:On};const wn={kernelName:s.IFFT,backendName:"webgl",kernelFunc:function ifft(e){const{inputs:t,backend:n}=e,{input:r}=t;return fftImpl(r,!0,n)}},In=unaryKernelFunc({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Sn={kernelName:s.IsFinite,backendName:"webgl",kernelFunc:In},Tn=unaryKernelFunc({opSnippet:"return float(isinf(x));",dtype:"bool"}),Nn={kernelName:s.IsInf,backendName:"webgl",kernelFunc:Tn},_n=unaryKernelFunc({opSnippet:"return float(isnan(x));",dtype:"bool"}),Cn={kernelName:s.IsNan,backendName:"webgl",kernelFunc:_n},jn=binaryKernelFunc({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:D,dtype:"bool"}),En={kernelName:s.Less,backendName:"webgl",kernelFunc:jn},An=binaryKernelFunc({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:M,dtype:"bool"}),$n={kernelName:s.LessEqual,backendName:"webgl",kernelFunc:An};const Rn={kernelName:s.LinSpace,backendName:"webgl",kernelFunc:function linSpace(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=P(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},Fn=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:B}),Dn={kernelName:s.Log,backendName:"webgl",kernelFunc:Fn},Mn=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),Pn={kernelName:s.Log1p,backendName:"webgl",kernelFunc:Mn},Bn=binaryKernelFunc({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),Ln={kernelName:s.LogicalAnd,backendName:"webgl",kernelFunc:Bn},zn=unaryKernelFunc({opSnippet:"return float(!(x >= 1.0));"}),Un={kernelName:s.LogicalNot,backendName:"webgl",kernelFunc:zn},Vn=binaryKernelFunc({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),Wn={kernelName:s.LogicalOr,backendName:"webgl",kernelFunc:Vn};class LRNProgram{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[];const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class LRNPackedProgram{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const Gn={kernelName:s.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:o,bias:i,alpha:u,beta:c}=r,l=Object(s.env)().getBool("WEBGL_PACK_NORMALIZATION")?new LRNPackedProgram(a.shape,o,i,u,c):new LRNProgram(a.shape,o,i,u,c);return n.runWebGLProgram(l,[a],a.dtype)}};class LRNGradProgram{constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const Hn={kernelName:s.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:c,beta:l}=r,p=new LRNGradProgram(a.shape,i,u,c,l);return n.runWebGLProgram(p,[a,s,o],a.dtype)}};function max(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:o,keepDims:i}=r,u=a.shape.length,c=s.util.parseAxisParam(o,a.shape);let l=c;const p=s.backend_util.getAxesPermutation(l,u),h=null!=p,f=n.shouldExecuteOnCPU([a]);let m=a;if(h){if(f){const e=n.texData.get(m.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=a.shape[p[e]];const r=ce(e,a.shape,a.dtype,p,t);m=n.makeTensorInfo(t,a.dtype);n.texData.get(m.dataId).values=r}else m=transposeImpl(a,p,n);l=s.backend_util.getInnerMostAxes(l.length,u)}s.backend_util.assertAxesAreInnerMostDims("max",l,u);const[b,g]=s.backend_util.computeOutAndReduceShapes(m.shape,l);let y,x=b;if(i&&(x=s.backend_util.expandShapeToKeepDim(b,c)),f){const e=n.texData.get(m.dataId).values,t=L(e,s.util.sizeFromShape(g),x,a.dtype);y=n.makeTensorInfo(x,a.dtype);n.texData.get(y.dataId).values=t}else y=function maxImpl(e,t,n,r){const a=s.util.sizeFromShape(t),o=reshape({inputs:{x:e},attrs:{shape:[s.util.sizeFromShape(e.shape)/a,a]},backend:r}),i=reduce(o,e.dtype,"max",r),u=reshape({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),u}(m,g,x,n);return h&&n.disposeIntermediateTensorInfo(m),y}const qn={kernelName:s.Max,backendName:"webgl",kernelFunc:max},Kn=binaryKernelFunc({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:z}),Xn={kernelName:s.Maximum,backendName:"webgl",kernelFunc:Kn};const Yn={kernelName:s.MaxPool,backendName:"webgl",kernelFunc:function maxPool(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;assertNotComplex(a,"maxPool");const{filterSize:o,strides:i,pad:u,dimRoundingMode:c}=r;s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const l=s.backend_util.computePool2DInfo(a.shape,o,i,1,u,c);if(1===l.filterWidth&&1===l.filterHeight&&s.util.arraysEqual(l.inShape,l.outShape))return identity({inputs:{x:a},backend:n});const p=new Pool2DProgram(l,"max",!1);return n.runWebGLProgram(p,[a],a.dtype)}};const Qn={kernelName:s.MaxPool3D,backendName:"webgl",kernelFunc:function maxPool3d(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:o,strides:i,pad:u,dataFormat:c,dimRoundingMode:l}=r,p=s.backend_util.computePool3DInfo(a.shape,o,i,[1,1,1],u,l,c),h=new Pool3DProgram(p,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}};class MaxPool2DBackpropProgram{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=s-1-e.padInfo.left,u=a*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MaxPool3DBackpropProgram{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,c=e.effectiveFilterWidth,l=i-1-e.padInfo.front,p=u-1-e.padInfo.top,h=c-1-e.padInfo.left,f=i*u*c-1;this.userCode=`\n      const ivec3 pads = ivec3(${l}, ${p}, ${h});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${f} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Zn={kernelName:s.MaxPool3DGrad,backendName:"webgl",kernelFunc:function maxPool3DGrad(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o}=t,i=o,{filterSize:u,strides:c,pad:l,dimRoundingMode:p}=r,h=s.backend_util.computePool3DInfo(i.shape,u,c,[1,1,1],l,p),f=new Pool3DProgram(h,"max",!0),m=n.runWebGLProgram(f,[i],i.dtype),b=new MaxPool3DBackpropProgram(h),g=n.runWebGLProgram(b,[a,m],i.dtype);return n.disposeIntermediateTensorInfo(m),g}};const Jn={kernelName:s.MaxPoolGrad,backendName:"webgl",kernelFunc:function maxPoolGrad(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:o,output:i}=t,u=o;assertNotComplex([o,i],"maxPoolGrad");const{filterSize:c,strides:l,pad:p,dimRoundingMode:h}=r,f=s.backend_util.computePool2DInfo(u.shape,c,l,1,p,h),m=new Pool2DProgram(f,"max",!0),b=n.runWebGLProgram(m,[u],u.dtype),g=new MaxPool2DBackpropProgram(f),y=n.runWebGLProgram(g,[a,b],u.dtype);return n.disposeIntermediateTensorInfo(b),y}};const er={kernelName:s.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:o,pad:i,includeBatchInIndex:u}=t,c=n;s.util.assert(4===r.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`);const l=[1,1];s.util.assert(s.backend_util.eitherStridesOrDilationsAreOne(o,l),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${l}'`);const p=s.backend_util.computePool2DInfo(r.shape,a,o,l,i),[h,f]=function maxPoolWithArgmaxImpl(e,t,n,r){let a=new Pool2DProgram(n,"max",!1);const s=r.runWebGLProgram(a,[e],"float32");return a=new Pool2DProgram(n,"max",!0,!0,t),[s,r.runWebGLProgram(a,[e],"float32")]}(r,u,p,c);return[h,f]}};const tr={kernelName:s.Mean,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{keepDims:a,axis:o}=t,i=n,u=r.shape.length,c=s.util.parseAxisParam(o,r.shape);let l=c;const p=s.backend_util.getAxesPermutation(l,u),h=null!=p,f=i.shouldExecuteOnCPU([r]),m=[];let b=r;if(h){if(f){const e=i.texData.get(b.dataId).values,t=new Array(u);for(let e=0;e<t.length;e++)t[e]=r.shape[p[e]];const n=ce(e,r.shape,r.dtype,p,t);b=i.makeTensorInfo(t,r.dtype);i.texData.get(b.dataId).values=n}else b=transposeImpl(r,p,i);m.push(b),l=s.backend_util.getInnerMostAxes(l.length,u)}s.backend_util.assertAxesAreInnerMostDims("sum",l,u);const[g,y]=s.backend_util.computeOutAndReduceShapes(b.shape,l);let x=g;a&&(x=s.backend_util.expandShapeToKeepDim(g,c));const v=function meanImpl(e,t,n,r){const a=s.util.sizeFromShape(t),o=reshape({inputs:{x:e},attrs:{shape:[s.util.sizeFromShape(e.shape)/a,a]},backend:r}),i=reduce(o,"float32","mean",r),u=reshape({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),u}(b,y,x,i);for(const e of m)i.disposeIntermediateTensorInfo(e);return v}};const nr={kernelName:s.Min,backendName:"webgl",kernelFunc:function min(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,c=s.util.parseAxisParam(o,a.shape);let l=c;const p=s.backend_util.getAxesPermutation(l,u);let h=a;null!=p&&(h=transpose({inputs:{x:a},backend:n,attrs:{perm:p}}),l=s.backend_util.getInnerMostAxes(l.length,a.shape.length)),s.backend_util.assertAxesAreInnerMostDims("min",l,u);const[f,m]=s.backend_util.computeOutAndReduceShapes(h.shape,l),b=reshape({inputs:{x:h},backend:n,attrs:{shape:[-1,s.util.sizeFromShape(m)]}}),g=reduce(b,b.dtype,"min",n);let y;if(i){y=reshape({inputs:{x:g},backend:n,attrs:{shape:s.backend_util.expandShapeToKeepDim(f,c)}})}else y=reshape({inputs:{x:g},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),null!=p&&n.disposeIntermediateTensorInfo(h),y}},rr=binaryKernelFunc({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:U}),ar={kernelName:s.Minimum,backendName:"webgl",kernelFunc:rr};class mirror_pad_gpu_MirrorPadProgram{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,a=getCoordsDataType(r),s=t.map(e=>e[0]).join(","),o=t.map((t,n)=>t[0]+e[n]).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class mirror_pad_packed_gpu_MirrorPadPackedProgram{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,a=getCoordsDataType(r),s=t.map(e=>e[0]).join(","),o=t.map((t,n)=>t[0]+e[n]).join(","),i=getChannels("rc",r),u=getChannels("source",r),c=`${i[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,p="reflect"===n?0:1;let h="";if(1===r){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;h=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${l});\n        ${i[r-1]} += 1;\n        if(${c}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${l});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;h=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${l});\n        ${i[r-1]} += 1;\n        if(${c}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${l});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${l});\n          ${i[r-1]} += 1;\n          if(${c}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${l});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const sr={kernelName:s.MirrorPad,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r}=e,{paddings:a,mode:o}=n,i=Object(s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new mirror_pad_packed_gpu_MirrorPadPackedProgram(r.shape,a,o):new mirror_pad_gpu_MirrorPadProgram(r.shape,a,o);return t.runWebGLProgram(i,[r],r.dtype)}},ir=binaryKernelFunc({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),ur={kernelName:s.Mod,backendName:"webgl",kernelFunc:ir};class MultinomialProgram{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const cr=binaryKernelFunc({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),lr={kernelName:s.RealDiv,backendName:"webgl",kernelFunc:cr},dr="return a - b;",pr=binaryKernelFunc({opSnippet:dr,packedOpSnippet:dr,supportsComplex:!0,cpuKernelImpl:oe}),hr={kernelName:s.Sub,backendName:"webgl",kernelFunc:pr};function softmax(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:o}=r,i=s.util.parseAxisParam([o],a.shape),u=max({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),c=s.backend_util.expandShapeToKeepDim(u.shape,i),l=reshape({inputs:{x:u},backend:n,attrs:{shape:c}}),p=pr({inputs:{a:a,b:l},backend:n}),h=Zt({inputs:{x:p},backend:n}),f=sum({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),m=reshape({inputs:{x:f},backend:n,attrs:{shape:c}}),b=cr({inputs:{a:h,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),b}const fr={kernelName:s.Softmax,backendName:"webgl",kernelFunc:softmax};const mr={kernelName:s.Multinomial,backendName:"webgl",kernelFunc:function multinomial(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r,u=i?a:softmax({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),c=u.shape[0],l=u.shape[1],p=new MultinomialProgram(c,l,s),h=[[o]],f=n.runWebGLProgram(p,[u],"int32",h);return i||n.disposeIntermediateTensorInfo(u),f}};const br={kernelName:s.Neg,backendName:"webgl",kernelFunc:function neg(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,a]=W(e.values,r.shape,r.dtype);return n.makeTensorInfo(a,r.dtype,t)}let a;return a=Object(s.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new unaryop_packed_gpu_UnaryOpPackedProgram(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new unaryop_gpu_UnaryOpProgram(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(a,[r],r.dtype)}},gr=s.kernel_impls.nonMaxSuppressionV3Impl;const yr={kernelName:s.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function nonMaxSuppressionV3(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:c}=r,l=n.readSync(a.dataId),p=n.readSync(o.dataId),{selectedIndices:h}=gr(l,p,i,u,c);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},xr=s.kernel_impls.nonMaxSuppressionV4Impl;const vr={kernelName:s.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function nonMaxSuppressionV4(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:c,padToMaxOutputSize:l}=r,p=n.readSync(a.dataId),h=n.readSync(o.dataId),{selectedIndices:f,validOutputs:m}=xr(p,h,i,u,c,l);return[n.makeTensorInfo([f.length],"int32",new Int32Array(f)),n.makeTensorInfo([],"int32",new Int32Array([m]))]}},Or=s.kernel_impls.nonMaxSuppressionV5Impl;const kr={kernelName:s.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function nonMaxSuppressionV5(e){s.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:c,softNmsSigma:l}=r,p=n.readSync(a.dataId),h=n.readSync(o.dataId),f=i,m=u,b=c,g=l,{selectedIndices:y,selectedScores:x}=Or(p,h,f,m,b,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class OneHotProgram{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const wr={kernelName:s.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{depth:o,onValue:i,offValue:u}=r,c=s.util.sizeFromShape(a.shape),l=new OneHotProgram(c,o,i,u),p=reshape({inputs:{x:a},backend:n,attrs:{shape:[c]}}),h=n.runWebGLProgram(l,[p],a.dtype);n.disposeIntermediateTensorInfo(p);const f=reshape({inputs:{x:h},backend:n,attrs:{shape:[...a.shape,o]}});return n.disposeIntermediateTensorInfo(h),f}};function zerosLike(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=Real_real({inputs:{input:r},backend:n}),t=zerosLike({inputs:{x:e},backend:n}),a=Imag_imag({inputs:{input:r},backend:n}),s=zerosLike({inputs:{x:a},backend:n}),o=Complex_complex({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return fill({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const Ir={kernelName:s.ZerosLike,backendName:"webgl",kernelFunc:zerosLike};const Sr={kernelName:s.OnesLike,backendName:"webgl",kernelFunc:function onesLike(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===r.dtype){const e=Real_real({inputs:{input:r},backend:n}),t=onesLike({inputs:{x:e},backend:n}),a=Imag_imag({inputs:{input:r},backend:n}),s=zerosLike({inputs:{x:a},backend:n}),o=Complex_complex({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return fill({attrs:{shape:r.shape,dtype:r.dtype,value:1},backend:n})}};const Tr={kernelName:s.Pack,backendName:"webgl",kernelFunc:function pack(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return expandDims({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const o=t[0].shape,i=t[0].dtype;t.forEach(e=>{s.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),s.util.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],c=concat({inputs:t.map(e=>{const t=expandDims({inputs:{input:e},backend:n,attrs:{dim:a}});return u.push(t),t}),backend:n,attrs:{axis:a}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}};class pad_gpu_PadProgram{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,a=getCoordsDataType(r),s=t.map(e=>e[0]).join(","),o=t.map((t,n)=>t[0]+e[n]).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class pad_packed_gpu_PadPackedProgram{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map((t,n)=>t[0]+e[n]+t[1]);const r=e.length,a=getCoordsDataType(r),s=t.map(e=>e[0]).join(","),o=t.map((t,n)=>t[0]+e[n]).join(","),i=getChannels("rc",r),u=getChannels("source",r),c=`${i[r-1]} < ${this.outputShape[r-1]}`,l=1===r?"source":`vec2(${u.slice(-2).join()})`,p=[a+" rc = outputLoc;",`${i[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${c}) {`],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let e=0,t=1===r?2:4;e<t;e++)f+=`\n        ${p[e]}\n        if (${h}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${u.join()}), ${l});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const padV2=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:o,constantValue:i}=r;if(0===s.util.sizeFromShape(a.shape)){return fill({backend:n,attrs:{shape:o.map((e,t)=>e[0]+a.shape[t]+e[1]),value:i,dtype:a.dtype}})}const u=Object(s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new pad_packed_gpu_PadPackedProgram(a.shape,o,i):new pad_gpu_PadProgram(a.shape,o,i),c=[[i]];return n.runWebGLProgram(u,[a],a.dtype,c)},Nr={kernelName:s.PadV2,backendName:"webgl",kernelFunc:padV2},_r=binaryKernelFunc({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Cr={kernelName:s.Pow,backendName:"webgl",kernelFunc:_r};const jr={kernelName:s.Prod,backendName:"webgl",kernelFunc:function Prod_prod(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:o,keepDims:i}=r,u=a.shape.length,c=[],l=s.util.parseAxisParam(o,a.shape);let p=l;const h=s.backend_util.getAxesPermutation(p,u);let f,m=a;if(null!=h&&(m=transpose({inputs:{x:a},backend:n,attrs:{perm:h}}),p=s.backend_util.getInnerMostAxes(p.length,u),c.push(m)),s.backend_util.assertAxesAreInnerMostDims("prod",p,u),n.shouldExecuteOnCPU([m])){const e=n.texData.get(m.dataId).values,{outVals:t,outShape:r,outDtype:a}=H(m.shape,m.dtype,e,p);f=n.makeTensorInfo(r,a,t)}else{const[e,t]=s.backend_util.computeOutAndReduceShapes(m.shape,p),r=s.util.sizeFromShape(t),o=reshape({inputs:{x:m},backend:n,attrs:{shape:[-1,r]}}),i=reduce(o,Object(s.sumOutType)(a.dtype),"prod",n);f=reshape({inputs:{x:i},backend:n,attrs:{shape:e}}),c.push(o),c.push(i)}if(i){c.push(f);const e=s.backend_util.expandShapeToKeepDim(f.shape,l);f=reshape({inputs:{x:f},backend:n,attrs:{shape:e}})}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},range=e=>{const{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:o}=n,i=q(r,a,s,o);return t.makeTensorInfo([i.length],o,i)},Er={kernelName:s.Range,backendName:"webgl",kernelFunc:range},Ar=unaryKernelFunc({opSnippet:"return 1.0 / x;"}),$r={kernelName:s.Reciprocal,backendName:"webgl",kernelFunc:Ar},Rr=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Fr={kernelName:s.Relu,backendName:"webgl",kernelFunc:Rr},Dr=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),Mr={kernelName:s.Relu6,backendName:"webgl",kernelFunc:Dr};class ResizeBilinearProgram{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const c=[r&&t>1?o-1:o,r&&n>1?i-1:i],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class ResizeBilinearPackedProgram{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const c=[r&&t>1?o-1:o,r&&n>1?i-1:i],l=[r&&t>1?t-1:t,r&&n>1?n-1:n];let p;p=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]},\n          ${c[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Pr={kernelName:s.ResizeBilinear,backendName:"webgl",kernelFunc:function resizeBilinear(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:o,halfPixelCenters:i,size:u}=r,[c,l]=u,p=Object(s.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeBilinearPackedProgram(a.shape,c,l,o,i):new ResizeBilinearProgram(a.shape,c,l,o,i);return n.runWebGLProgram(p,[a],"float32")}};class ResizeBilinearBackpropProgram{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],c=i[0]/u[0],l=i[1]/u[1],p=1/c,h=1/l,f=2*Math.ceil(p)+2,m=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${m});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Br={kernelName:s.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function resizeBilinearGrad(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new ResizeBilinearBackpropProgram(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class ResizeNearestNeighborProgram{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const c=[r&&t>1?o-1:o,r&&n>1?i-1:i],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class ResizeNearestNeighborPackedProgram{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const c=[r&&t>1?o-1:o,r&&n>1?i-1:i],l=[r&&t>1?t-1:t,r&&n>1?n-1:n],p=r?"0.5":"0.0";let h;h=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/l[0]},\n          ${c[1]/l[1]},\n          ${c[1]/l[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${p})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const Lr={kernelName:s.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function resizeNearestNeighbor(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:o,halfPixelCenters:i,size:u}=r,[c,l]=u,p=Object(s.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ResizeNearestNeighborPackedProgram(a.shape,c,l,o,i):new ResizeNearestNeighborProgram(a.shape,c,l,o,i);return n.runWebGLProgram(p,[a],a.dtype)}};class ResizeNearestNeigborBackpropProgram{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],c=i[0]/u[0],l=i[1]/u[1],p=1/c,h=1/l,f=2*Math.ceil(p)+2,m=2*Math.ceil(h)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${l});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${h});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${m});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const zr={kernelName:s.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function resizeNearestNeighborGrad(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new ResizeNearestNeigborBackpropProgram(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class reverse_gpu_ReverseProgram{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r)).join(","),a=getCoordsDataType(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class reverse_packed_gpu_ReversePackedProgram{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=getChannels("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=getCoordsDataType(n);function getChannel(n){const r=e.map((r,a)=>function getInCoord(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:""+r[n]}(a,n));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function getR(e){return getChannel(e)}(r.slice())};\n          if(${a}){\n            result.g = ${function getG(e){return e[n-1]="("+e[n-1]+" + 1)",getChannel(e)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function getB(e){return e[n-2]="("+e[n-2]+" + 1)",getChannel(e)}(r.slice())};\n            if(${a}) {\n              result.a = ${function getA(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",getChannel(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const Ur={kernelName:s.Reverse,backendName:"webgl",kernelFunc:function Reverse_reverse(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:o}=r,i=a.shape.length,u=s.util.parseAxisParam(o,a.shape);if(0===i)return identity({inputs:{x:a},backend:n});const c=Object(s.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new reverse_packed_gpu_ReversePackedProgram(a.shape,u):new reverse_gpu_ReverseProgram(a.shape,u);return n.runWebGLProgram(c,[a],a.dtype)}};class RotateProgram{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Vr={kernelName:s.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:o,center:i}=t,u=n,c=new RotateProgram(r.shape,o),[l,p]=s.backend_util.getImageCenter(i,r.shape[1],r.shape[2]),h=[[l,p,Math.sin(a),Math.cos(a)]];return u.runWebGLProgram(c,[r],r.dtype,h)}},Wr=unaryKernelFunc({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Gr={kernelName:s.Round,backendName:"webgl",kernelFunc:Wr},Hr=unaryKernelFunc({opSnippet:"return inversesqrt(x);",cpuKernelImpl:K}),qr={kernelName:s.Rsqrt,backendName:"webgl",kernelFunc:Hr};class scatter_gpu_ScatterProgram{constructor(e,t,n,r,a,s,o=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const i=getCoordsDataType(a.length),u=getCoordsDataType(s.length);let c="";1===n?c="i":2===n&&(c="i, j");const l=`getIndices(${c})`;let p="";1===r?p="i":2===r&&(p="i, coords[1]");const h=`getUpdates(${p})`,f=t>1?"strides[j]":"strides";this.userCode=`\n        ${i} strides = ${i}(${a});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${l});\n              flattenedIndex += index * ${f};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${h};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const Kr={kernelName:s.ScatterNd,backendName:"webgl",kernelFunc:function scatterNd(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:o}=t,{shape:i}=r,{sliceRank:u,numUpdates:c,sliceSize:l,strides:p,outputSize:h}=s.backend_util.calculateShapes(o,a,i),f=[h/l,l];if(0===h)return n.makeTensorInfo(i,a.dtype);const m=reshape({inputs:{x:a},backend:n,attrs:{shape:[c,u]}}),b=reshape({inputs:{x:o},backend:n,attrs:{shape:[c,l]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new scatter_gpu_ScatterProgram(c,u,m.shape.length,b.shape.length,p,f),x=n.runWebGLProgram(y,[b,m,g],b.dtype),v=reshape({inputs:{x:x},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(g),v}};class select_gpu_SelectProgram{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],o=[];for(let r=0;r<t.length;r++)o.push(""+n[r]),r<e&&s.push(""+n[r]);r=s.join(),a=o.join()}const s=getCoordsDataType(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const Xr={kernelName:s.Select,backendName:"webgl",kernelFunc:function Select_select(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:o}=t,i=new select_gpu_SelectProgram(r.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[r,a,o],Object(s.upcastType)(a.dtype,o.dtype))}},Yr=unaryKernelFunc({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${s.backend_util.SELU_SCALEALPHA};\n  float scale = ${s.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Qr={kernelName:s.Selu,backendName:"webgl",kernelFunc:Yr},Zr=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:X}),Jr={kernelName:s.Sigmoid,backendName:"webgl",kernelFunc:Zr},ea=unaryKernelFunc({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),ta={kernelName:s.Sign,backendName:"webgl",kernelFunc:ea},na=unaryKernelFunc({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),ra={kernelName:s.Sin,backendName:"webgl",kernelFunc:na},aa=unaryKernelFunc({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),sa={kernelName:s.Sinh,backendName:"webgl",kernelFunc:aa},oa=unaryKernelFunc({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),ia={kernelName:s.Softplus,backendName:"webgl",kernelFunc:oa},ua={kernelName:s.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:o,paddings:i}=r;s.util.assert(a.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const u=o.reduce((e,t)=>e*t),c=[[0,0]];c.push(...i);for(let e=1+o.length;e<a.shape.length;++e)c.push([0,0]);const l=[],p=padV2({inputs:{x:a},backend:n,attrs:{paddings:c,constantValue:0}}),h=s.backend_util.getReshaped(p.shape,o,u,!1),f=s.backend_util.getPermuted(h.length,o.length,!1),m=s.backend_util.getReshapedPermuted(p.shape,o,u,!1),b=reshape({inputs:{x:p},backend:n,attrs:{shape:h}}),g=transpose({inputs:{x:b},backend:n,attrs:{perm:f}}),y=reshape({inputs:{x:g},backend:n,attrs:{shape:m}});return l.push(p),l.push(b),l.push(g),l.forEach(e=>n.disposeIntermediateTensorInfo(e)),y}};const ca={kernelName:s.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function sparseFillEmptyRows(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error("Dense shape must be a vector, saw:\n         "+s.shape);if(2!==r.shape.length)throw new Error("Indices must be a matrix, saw:\n         "+r.shape);if(1!==a.shape.length)throw new Error("Values must be a vector, saw:\n         "+a.shape);if(0!==o.shape.length)throw new Error("Default value must be a scalar, saw:\n        "+o.shape);const i=n.readSync(r.dataId),u=n.readSync(a.dataId),c=n.readSync(s.dataId),l=n.readSync(o.dataId)[0],[p,h,f,m,b]=Z(i,r.shape,r.dtype,u,a.dtype,c,l);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],a.dtype,f),n.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(e=>Number(e)))),n.makeTensorInfo([b.length],r.dtype,new Int32Array(b))]}};const la={kernelName:s.SparseReshape,backendName:"webgl",kernelFunc:function sparseReshape(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error("Input indices should be a matrix but received shape "+r.shape);if(1!==a.shape.length)throw new Error("Input shape should be a vector but received shape "+a.shape);if(1!==s.shape.length)throw new Error("Target shape should be a vector but received shape "+s.shape);const o=Array.from(n.readSync(a.dataId)),i=n.readSync(r.dataId),u=Array.from(n.readSync(s.dataId)),[c,l,p]=J(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(l,r.dtype,c),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}};const da={kernelName:s.SparseSegmentMean,backendName:"webgl",kernelFunc:function sparseSegmentMean(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error("Indices should be a vector but received shape\n              "+a.shape);if(1!==s.shape.length)throw new Error("Segment ids should be a vector but received shape\n              "+s.shape);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=n.readSync(s.dataId),[c,l]=ee(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(l,r.dtype,c)}};const pa={kernelName:s.SparseSegmentSum,backendName:"webgl",kernelFunc:function sparseSegmentSum(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error("Indices should be a vector but received shape\n             "+a.shape);if(1!==s.shape.length)throw new Error("Segment ids should be a vector but received shape\n             "+s.shape);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=n.readSync(s.dataId),[c,l]=ee(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(l,r.dtype,c)}};const ha={kernelName:s.SparseToDense,backendName:"webgl",kernelFunc:function sparseToDense(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:o,defaultValue:i}=t,{outputShape:u}=r,{sliceRank:c,numUpdates:l,strides:p,outputSize:h}=s.backend_util.calculateShapes(o,a,u),f=new scatter_gpu_ScatterProgram(l,c,a.shape.length,o.shape.length,p,[h,1],!1),m=n.runWebGLProgram(f,[o,a,i],o.dtype),b=reshape({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(m),b}};const fa={kernelName:s.SplitV,backendName:"webgl",kernelFunc:function splitV(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:o,axis:i}=r,u=s.util.parseAxisParam(i,a.shape)[0],c=s.backend_util.prepareSplitSize(a,o,u),l=a.shape.length,p=new Array(l).fill(0),h=a.shape.slice();return c.map(e=>{const t=[...h];t[u]=e;const r=Slice_slice({inputs:{x:a},backend:n,attrs:{begin:p,size:t}});return p[u]+=e,r})}},ma="return sqrt(x);",ba=unaryKernelFunc({opSnippet:ma,packedOpSnippet:ma,cpuKernelImpl:te}),ga={kernelName:s.Sqrt,backendName:"webgl",kernelFunc:ba},ya=unaryKernelFunc({opSnippet:"return x * x;"}),xa={kernelName:s.Square,backendName:"webgl",kernelFunc:ya},va=binaryKernelFunc({opSnippet:"return (a - b) * (a - b);",packedOpSnippet:"return (a - b) * (a - b);"}),Oa={kernelName:s.SquaredDifference,backendName:"webgl",kernelFunc:va};const ka={kernelName:s.Step,backendName:"webgl",kernelFunc:function Step_step({inputs:e,attrs:t,backend:n}){const{x:r}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,s=new unaryop_gpu_UnaryOpProgram(r.shape,a);return n.runWebGLProgram(s,[r],r.dtype)}};class strided_slice_gpu_StridedSliceProgram{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,a=getCoordsDataType(n.length),s=getCoordsDataType(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`)).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const wa={kernelName:s.StridedSlice,backendName:"webgl",kernelFunc:function stridedSlice(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:o,end:i,strides:u,beginMask:c,endMask:l,ellipsisMask:p,newAxisMask:h,shrinkAxisMask:f}=r,{finalShapeSparse:m,finalShape:b,isIdentity:g,sliceDim0:y,isSimpleSlice:x,begin:v,end:O,strides:k}=s.slice_util.sliceInfo(a.shape,o,i,u,c,l,p,h,f);let w;if(g)w=reshape({inputs:{x:a},backend:n,attrs:{shape:b}});else if(y||x){s.util.assert(a.shape.length>=1,()=>"Input must have rank at least 1, got: "+a.shape.length);const e=s.slice_util.computeOutShape(v,O,k),t=Slice_slice({inputs:{x:a},backend:n,attrs:{begin:v,size:e}});w=reshape({inputs:{x:t},backend:n,attrs:{shape:b}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=Object(s.buffer)(a.shape,a.dtype,e),r=ne(m,t,k,v);w=n.makeTensorInfo(b,a.dtype,r.values)}else{const e=new strided_slice_gpu_StridedSliceProgram(v,k,m);w=n.runWebGLProgram(e,[a],a.dtype)}}const I=reshape({inputs:{x:w},backend:n,attrs:{shape:b}});return n.disposeIntermediateTensorInfo(w),I}};const Ia={kernelName:s.StringNGrams,backendName:"webgl",kernelFunc:function stringNGrams(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:c}=r,{data:l,dataSplits:p}=t,h=n.readSync(l.dataId),f=n.readSync(p.dataId),[m,b]=re(h,f,a,s,o,i,u,c);return[n.makeTensorInfo([m.length],"string",m),n.makeTensorInfo(p.shape,"int32",b)]}};const Sa={kernelName:s.StringSplit,backendName:"webgl",kernelFunc:function stringSplit(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error("Input must be a vector, got shape: "+s.shape);if(0!==o.shape.length)throw new Error("Delimiter must be a scalar, got shape: "+o.shape);const i=n.readSync(s.dataId),u=n.readSync(o.dataId)[0],[c,l,p]=ae(i,u,a),h=l.length;return[n.makeTensorInfo([h,2],"int32",c),n.makeTensorInfo([h],"string",l),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};const Ta={kernelName:s.StringToHashBucketFast,backendName:"webgl",kernelFunc:function stringToHashBucketFast(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(s.dataId),i=se(o,a);return n.makeTensorInfo(s.shape,"int32",i)}},Na=unaryKernelFunc({opSnippet:"return tan(x);"}),_a={kernelName:s.Tan,backendName:"webgl",kernelFunc:Na},Ca=unaryKernelFunc({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),ja={kernelName:s.Tanh,backendName:"webgl",kernelFunc:Ca};class tile_gpu_TileProgram{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let r=0;r<n.length;r++)n[r]=e[r]*t[r];this.outputShape=n,this.rank=n.length;const r=getCoordsDataType(this.rank),a=function tile_gpu_getSourceCoords(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let t=0;t<e.length;t++)r.push(`imod(${n[t]}, ${e[t]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function tile(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:o}=r;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map(e=>s.util.decodeString(e)):e,r=Object(s.buffer)(a.shape,a.dtype,t),i=ie(r,o);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new tile_gpu_TileProgram(a.shape,o);return n.runWebGLProgram(i,[a],a.dtype)}const Ea={kernelName:s.Tile,backendName:"webgl",kernelFunc:tile};class SwapProgram{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class MergeProgram{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function disposeIntermediateTensorInfoOrNull(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function roundUpToPow2(e){let t=1;for(;t<e;)t*=2;return t}const Aa={kernelName:s.TopK,backendName:"webgl",kernelFunc:function topK(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:o,sorted:i}=r,u=Object(s.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),c=Object(s.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),l=a.shape,p=l[l.length-1];if(n.shouldExecuteOnCPU([a])||p<u||o>c){const e=n.readSync(a.dataId),[t,r]=ue(e,l,a.dtype,o,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===o)return l[l.length-1]=0,[n.makeTensorInfo(l,a.dtype,[]),n.makeTensorInfo(l,"int32",[])];if(1===p)return[a,fill({attrs:{shape:l,dtype:"int32",value:0},backend:n})];const h=n.texData.get(a.dataId),f=null!==h&&h.isPacked,m=f?n.unpackTensor(a):a,b=s.util.sizeFromShape(l)/p,g=reshape({inputs:{x:m},attrs:{shape:[b,p]},backend:n});f&&disposeIntermediateTensorInfoOrNull(n,m);const y=roundUpToPow2(o),x=roundUpToPow2(p);let v=null;const getInputs=()=>null===v?[g,g]:[g,v],runSwap=(e,t,r)=>{const a=getInputs(),s=new SwapProgram(r),o=[[p],[null===v?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=v;v=n.runWebGLProgram(s,a,"int32",o),disposeIntermediateTensorInfoOrNull(n,i)};for(let e=1;e<y;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)runSwap(t,n,[b,x])}for(let e=x;e>y;e/=2){const t=getInputs(),r=new MergeProgram([b,e/2]),a=[[p],[null===v?1:0],[y]],s=v;v=n.runWebGLProgram(r,t,"int32",a),disposeIntermediateTensorInfoOrNull(n,s);const o=y/2,i=2*o;for(let e=o;e>=1;e/=2)runSwap(i,e,v.shape)}let O=v;v=Slice_slice({inputs:{x:v},backend:n,attrs:{begin:0,size:[b,o]}}),disposeIntermediateTensorInfoOrNull(n,O);let k=gatherV2({inputs:{x:g,indices:v},backend:n,attrs:{axis:1,batchDims:1}});disposeIntermediateTensorInfoOrNull(n,g);const w=l.slice(0,-1);w.push(o),O=v,v=reshape({inputs:{x:v},attrs:{shape:w},backend:n}),disposeIntermediateTensorInfoOrNull(n,O);const I=k;return k=reshape({inputs:{x:k},attrs:{shape:w},backend:n}),disposeIntermediateTensorInfoOrNull(n,I),[k,v]}};class TransformProgram{constructor(e,t,n,r,a,s){this.variableNames=["Image","Transforms"],this.outputShape=s;const o="nearest"===n?1:2;let i;switch(r){case"constant":i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4;break;default:i=1}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const $a={kernelName:s.Transform,backendName:"webgl",kernelFunc:function transform(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:c}=r,[l,p,h,f]=a.shape,[m,b]=null!=c?c:[p,h],g=new TransformProgram(p,h,o,i,u,[l,m,b,f]);return n.runWebGLProgram(g,[a,s],"float32")}};const Ra={kernelName:s.Unique,backendName:"webgl",kernelFunc:function unique(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;assertNotComplex(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(s.dataId),{outputValues:i,outputShape:u,indices:c}=le(o,a,s.shape,s.dtype);return[r.makeTensorInfo(u,s.dtype,i),r.makeTensorInfo([c.length],"int32",c)]}};const Fa={kernelName:s.Unpack,backendName:"webgl",kernelFunc:function unpack(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a,i=o.shape.length,u=a.shape[s],c=new Array(i-1);let l=0;for(let e=0;e<i;e++)e!==s&&(c[l++]=o.shape[e]);const p=[],h=new Array(i).fill(0),f=o.shape.slice();f[s]=1;const m=new Array(u);for(let e=0;e<m.length;e++){h[s]=e;const t=Slice_slice({inputs:{x:o},backend:n,attrs:{begin:h,size:f}}),r=reshape({inputs:{x:t},backend:n,attrs:{shape:c}});m[e]=r,p.push(t)}return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),m}};class SegmentOpProgram{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,o=s*Math.ceil(a/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ";let l="";a%n>0&&(l=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let p="";a%n>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${l}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${p}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}const Da=[$e,Re,De,Pe,ze,Ue,Ve,We,Ge,He,Ke,Ye,Ze,et,nt,rt,at,st,ot,it,ut,dt,pt,ht,gt,vt,Ot,xe,kt,It,St,Tt,Nt,_t,Ct,jt,At,Rt,Ft,Dt,Mt,Pt,Bt,Lt,zt,Ut,Vt,Wt,Ht,qt,Xt,Qt,Jt,en,rn,an,sn,on,ln,pn,hn,mn,bn,gn,yn,vn,kn,ye,wn,wt,Sn,Nn,Cn,ke,En,$n,Rn,Dn,Pn,Ln,Un,Wn,Gn,Hn,qn,Xn,Yn,Qn,Zn,Jn,er,tr,nr,ar,sr,ur,mr,Ce,br,yr,vr,kr,mt,wr,Sr,Tr,Nr,Cr,Se,jr,Er,bt,lr,$r,Fr,Mr,je,Pr,Br,Lr,zr,Ur,Vr,Gr,qr,Kr,Xr,Qr,Jr,ta,ra,sa,lt,fr,ia,ua,ca,la,da,pa,ha,fa,ga,xa,Oa,ka,wa,Ia,Sa,Ta,hr,Ee,_a,ja,Ea,Aa,$a,Ae,Ra,Fa,{kernelName:s.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function unsortedSegmentSum(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:o}=t,{numSegments:i}=r,u=a.shape.length,c=[];let l=0;const p=s.backend_util.getAxesPermutation([l],u);let h=a;null!=p&&(h=transpose({inputs:{x:a},backend:n,attrs:{perm:p}}),c.push(h),l=s.backend_util.getInnerMostAxes(1,u)[0]);const f=s.backend_util.segment_util.computeOutShape(h.shape,l,i),m=s.util.sizeFromShape([h.shape[l]]),b=reshape({inputs:{x:h},backend:n,attrs:{shape:[-1,m]}});c.push(b);const g=Object(s.sumOutType)(a.dtype),segOpCompute=(e,t,r,a,o)=>{const i=e.shape[0],u=e.shape[1],l=s.backend_util.segment_util.segOpComputeOptimalWindowSize(u,o),p=new SegmentOpProgram({windowSize:l,inSize:u,batchSize:i,numSegments:o},t),h=n.compileAndRun(p,[e,r],a);if(c.push(h),h.shape[1]===o)return h;const f=range({backend:n,attrs:{start:0,stop:o,step:1,dtype:"float32"}}),m=tile({inputs:{x:f},backend:n,attrs:{reps:[u/l]}});c.push(f),c.push(m);return segOpCompute(h,t,m,a,o)},y=reshape({inputs:{x:segOpCompute(b,"unsortedSegmentSum",o,g,i)},backend:n,attrs:{shape:f}});let x=y;if(null!=p){c.push(y);const e=s.backend_util.getUndoAxesPermutation(p);x=transpose({inputs:{x:x},backend:n,attrs:{perm:e}})}return c.forEach(e=>n.disposeIntermediateTensorInfo(e)),x}},Ir];for(const e of Da)Object(s.registerKernel)(e)},function(e,t,n){"use strict";n.r(t),n.d(t,"MathBackendCPU",(function(){return backend_cpu_MathBackendCPU})),n.d(t,"version_cpu",(function(){return i})),n.d(t,"shared",(function(){return o}));var r=n(0),a=n(9);const s=r.kernel_impls.whereImpl;class backend_cpu_MathBackendCPU extends r.KernelBackend{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new r.DataStorage(this,Object(r.engine)())}nextDataId(){return backend_cpu_MathBackendCPU.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,Object(r.env)().get("IS_NODE")&&r.backend_util.warn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const a={id:this.nextDataId()};return this.data.set(a,{values:e,dtype:n,refCount:1}),a}makeTensorInfo(e,t,n){let a;if("string"===t&&null!=n&&n.length>0&&r.util.isString(n[0])){const s=n.map(e=>r.util.encodeString(e));a=this.write(s,e,t)}else a=this.write(n,e,t);return{dataId:a,shape:e,dtype:t}}refCount(e){if(this.data.has(e)){return this.data.get(e).refCount}return 0}incRef(e){this.data.get(e).refCount++}decRef(e){if(this.data.has(e)){this.data.get(e).refCount--}}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);if("complex64"===t){const e=this.readSync(n.real.dataId),t=this.readSync(n.imag.dataId);return r.backend_util.mergeRealAndImagArrays(e,t)}return this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);let n=t;if("string"===e.dtype)try{n=t.map(e=>r.util.decodeString(e))}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Object(r.buffer)(e.shape,e.dtype,n)}makeOutput(e,t,n){const a=this.write(e,t,n);return Object(r.engine)().makeTensorFromDataId(a,t,n,this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=r.util.now();e();return{kernelMs:r.util.now()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Object(a.a)([e],"where");const t=this.readSync(e.dataId);return s(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}backend_cpu_MathBackendCPU.nextDataId=0;var o=n(150);const i="3.14.0";Object(r.registerBackend)("cpu",()=>new backend_cpu_MathBackendCPU,1);var u=n(11);const c=Object(u.a)(r.Elu,e=>e>=0?e:Math.exp(e)-1),l={kernelName:r.Elu,backendName:"cpu",kernelFunc:c};var p=n(36);function leakyRelu(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{alpha:i}=s;Object(a.a)([o],"leakyRelu");const u=r.util.sizeFromShape(o.shape),c=n.data.get(o.dataId).values,l=r.util.getTypedArrayFromDType("float32",u);for(let e=0;e<c.length;e++)l[e]=c[e]<0?i*c[e]:c[e];return n.makeTensorInfo(o.shape,"float32",l)}const h={kernelName:r.LeakyRelu,backendName:"cpu",kernelFunc:leakyRelu};var f=n(18);const m=Object(f.a)((e,t)=>e<0?t*e:e);function prelu(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t;Object(a.a)([r,s],"prelu");const o=n.data.get(r.dataId).values,i=n.data.get(s.dataId).values,[u,c]=m(r.shape,s.shape,o,i,"float32");return n.makeTensorInfo(c,"float32",u)}const b={kernelName:r.Prelu,backendName:"cpu",kernelFunc:prelu},g=Object(u.a)(r.Relu,e=>Math.max(0,e)),y={kernelName:r.Relu,backendName:"cpu",kernelFunc:g},x=Object(u.a)(r.Relu6,e=>Math.min(Math.max(0,e),6)),v={kernelName:r.Relu6,backendName:"cpu",kernelFunc:x};var O=n(105);function applyActivation(e,t,n,r,a){if("linear"===n)return Object(p.a)({inputs:{x:t},backend:e});if("relu"===n)return g({inputs:{x:t},backend:e});if("elu"===n)return c({inputs:{x:t},backend:e});if("relu6"===n)return x({inputs:{x:t},backend:e});if("prelu"===n)return prelu({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return leakyRelu({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Object(O.a)({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}var k=n(51);function reshape(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{shape:o}=a,i=r.util.sizeFromShape(s.shape),u=r.util.inferFromImplicitShape(o,i),c=r.util.sizeFromShape(u);r.util.assert(i===c,()=>`The new shape (${u}) has ${c} elements and the old shape (${s.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),n.incRef(s.dataId);const l=n.data.get(s.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=u,t.shape=u}return{dataId:s.dataId,shape:u,dtype:s.dtype}}const w={kernelName:r.Reshape,backendName:"cpu",kernelFunc:reshape};function batchMatMul(e){const{inputs:t,backend:n,attrs:s}=e,{a:o,b:i}=t,{transposeA:u,transposeB:c}=s;Object(a.a)([o,i],"matMul");const l=o.shape.length,p=i.shape.length,h=u?o.shape[l-2]:o.shape[l-1],f=c?i.shape[p-1]:i.shape[p-2],m=u?o.shape[l-1]:o.shape[l-2],b=c?i.shape[p-2]:i.shape[p-1],g=o.shape.slice(0,-2),y=i.shape.slice(0,-2),x=r.util.sizeFromShape(g),v=r.util.sizeFromShape(y),O=r.broadcast_util.assertAndGetBroadcastShape(o.shape.slice(0,-2),i.shape.slice(0,-2)).concat([m,b]);r.util.assert(h===f,()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${o.shape} and ${i.shape} and transposeA=${u} and transposeB=${c} must match.`);const k=c?[v,b,f]:[v,f,b],w=reshape({inputs:{x:o},backend:n,attrs:{shape:u?[x,h,m]:[x,m,h]}}),I=reshape({inputs:{x:i},backend:n,attrs:{shape:k}}),S=u?w.shape[1]:w.shape[2],T=u?w.shape[2]:w.shape[1],N=c?I.shape[1]:I.shape[2],_=Math.max(x,v),C=n.data.get(w.dataId).values,j=n.data.get(I.dataId).values,E=r.util.computeStrides(w.shape),A=r.util.computeStrides(I.shape),[$,R,F]=u?[E[0],1,E[1]]:[E[0],E[1],1],[D,M,P]=c?[1,A[1],A[0]]:[A[1],1,A[0]],B=T*N,L=Object(r.buffer)([_,T,N],w.dtype),z=L.values,U=n.blockSize;for(let e=0;e<_;e++)for(let t=0;t<T;t+=U)for(let n=0;n<N;n+=U)for(let r=0;r<S;r+=U){const a=Math.min(t+U,T),s=Math.min(n+U,N),o=Math.min(r+U,S);for(let i=t;i<a;i++)for(let t=n;t<s;t++){let n=0;for(let a=r;a<o;a++){const r=Math.min(e,x-1)*$,s=Math.min(e,v-1)*P;n+=C[r+i*R+a*F]*j[a*D+t*M+s]}z[e*B+(i*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(I),n.makeTensorInfo(O,L.dtype,L.values)}const I={kernelName:r.BatchMatMul,backendName:"cpu",kernelFunc:batchMatMul};const S={kernelName:r._FusedMatMul,backendName:"cpu",kernelFunc:function _fusedMatMul(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:c,activation:l,leakyreluAlpha:p}=r;let h,f,m;const b=[];h=batchMatMul({inputs:{a:a,b:s},attrs:{transposeA:u,transposeB:c},backend:n}),o&&(f=Object(k.a)({inputs:{a:h,b:o},backend:n}),b.push(h),h=f),l&&(m=applyActivation(n,h,l,i,p),b.push(h),h=m);for(const e of b)n.disposeIntermediateTensorInfo(e);return h}};var T=n(151);const N=Object(u.a)(r.Acos,e=>Math.acos(e)),_={kernelName:r.Acos,backendName:"cpu",kernelFunc:N},C=Object(u.a)(r.Acosh,e=>Math.acosh(e)),j={kernelName:r.Acosh,backendName:"cpu",kernelFunc:C};const E={kernelName:r.AddN,backendName:"cpu",kernelFunc:function addN(e){const{inputs:t,backend:n}=e,s=t;Object(a.a)(t,"addN");const o=s.map(e=>n.data.get(e.dataId).values),i=Object(r.buffer)(s[0].shape,s[0].dtype),u=i.values;for(let e=0;e<s.length;e++){const t=o[e];for(let e=0;e<u.length;e++)u[e]+=t[e]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var A=n(29);const $={kernelName:r.All,backendName:"cpu",kernelFunc:function All_all(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;Object(a.a)(o,"all");const c=r.util.parseAxisParam(i,o.shape);let l=c;const p=r.backend_util.getAxesPermutation(l,o.shape.length);let h=o;null!=p&&(h=Object(A.a)({inputs:{x:o},backend:n,attrs:{perm:p}}),l=r.backend_util.getInnerMostAxes(l.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("all",l,h.shape.length);const[f,m]=r.backend_util.computeOutAndReduceShapes(h.shape,l),b=r.util.sizeFromShape(m),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(f),h.dtype),y=n.data.get(h.dataId).values;for(let e=0;e<g.length;++e){const t=e*b;let n=y[t];for(let e=0;e<b;++e){const r=y[t+e];n=n&&r}g[e]=n}null!=p&&n.disposeIntermediateTensorInfo(h);const x=n.makeTensorInfo(f,h.dtype,g);if(u){const e=reshape({inputs:{x:x},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(f,c)}});return n.disposeIntermediateTensorInfo(x),e}return x}};const R={kernelName:r.Any,backendName:"cpu",kernelFunc:function any(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;Object(a.a)(o,"any");const c=r.util.parseAxisParam(i,o.shape);let l=c;const p=r.backend_util.getAxesPermutation(l,o.shape.length);let h=o;null!=p&&(h=Object(A.a)({inputs:{x:o},backend:n,attrs:{perm:p}}),l=r.backend_util.getInnerMostAxes(l.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("any",l,h.shape.length);const[f,m]=r.backend_util.computeOutAndReduceShapes(h.shape,l),b=r.util.sizeFromShape(m),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(f),h.dtype),y=n.data.get(h.dataId).values;for(let e=0;e<g.length;++e){const t=e*b;let n=y[t];for(let e=0;e<b;++e){const r=y[t+e];n=n||r}g[e]=n}null!=p&&n.disposeIntermediateTensorInfo(h);const x=n.makeTensorInfo(f,h.dtype,g);if(u){const e=reshape({inputs:{x:x},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(f,c)}});return n.disposeIntermediateTensorInfo(x),e}return x}};const F={kernelName:r.ArgMax,backendName:"cpu",kernelFunc:function argMax(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i}=s;Object(a.a)(o,"argMax");let u=r.util.parseAxisParam(i,o.shape);const c=r.backend_util.getAxesPermutation(u,o.shape.length);let l=o;const p=[];null!=c&&(l=Object(A.a)({inputs:{x:o},backend:n,attrs:{perm:c}}),p.push(l),u=r.backend_util.getInnerMostAxes(u.length,l.shape.length)),u=[u[0]],r.backend_util.assertAxesAreInnerMostDims("argMax",u,l.shape.length);const[h,f]=r.backend_util.computeOutAndReduceShapes(l.shape,u),m=r.util.sizeFromShape(h),b=r.util.makeZerosTypedArray(m,"int32"),g=r.util.sizeFromShape(f),y=n.data.get(l.dataId).values;for(let e=0;e<b.length;++e){const t=e*g;let n=y[t],r=0;for(let e=0;e<g;++e){const a=y[t+e];a>n&&(n=a,r=e)}b[e]=r}return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",b)}};const D={kernelName:r.ArgMin,backendName:"cpu",kernelFunc:function argMin(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i}=s;Object(a.a)(o,"argMin");let u=r.util.parseAxisParam(i,o.shape);const c=r.backend_util.getAxesPermutation(u,o.shape.length);let l=o;const p=[];null!=c&&(l=Object(A.a)({inputs:{x:o},backend:n,attrs:{perm:c}}),p.push(l),u=r.backend_util.getInnerMostAxes(u.length,l.shape.length)),u=[u[0]],r.backend_util.assertAxesAreInnerMostDims("argMin",u,l.shape.length);const[h,f]=r.backend_util.computeOutAndReduceShapes(l.shape,u),m=r.util.sizeFromShape(h),b=r.util.makeZerosTypedArray(m,"int32"),g=r.util.sizeFromShape(f),y=n.data.get(l.dataId).values;for(let e=0;e<b.length;++e){const t=e*g;let n=y[t],r=0;for(let e=0;e<g;++e){const a=y[t+e];a<n&&(n=a,r=e)}b[e]=r}return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(h,"int32",b)}},M=Object(u.a)(r.Asin,e=>Math.asin(e)),P={kernelName:r.Asin,backendName:"cpu",kernelFunc:M},B=Object(u.a)(r.Asinh,e=>Math.asinh(e)),L={kernelName:r.Asinh,backendName:"cpu",kernelFunc:B},z=Object(u.a)(r.Atan,e=>Math.atan(e)),U={kernelName:r.Atan,backendName:"cpu",kernelFunc:z};var V=n(19);const W=Object(f.a)((e,t)=>Math.atan2(e,t)),G=Object(V.a)(r.Atan2,W),H={kernelName:r.Atan2,backendName:"cpu",kernelFunc:G},q=Object(u.a)(r.Atanh,e=>Math.atanh(e)),K={kernelName:r.Atanh,backendName:"cpu",kernelFunc:q};function pool(e,t,n,a,s,o){const i=s.strideHeight,u=s.strideWidth,c=s.dilationHeight,l=s.dilationWidth,p=s.effectiveFilterHeight,h=s.effectiveFilterWidth,f=s.padInfo.top,m=s.padInfo.left,b="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Object(r.buffer)(s.outShape,n),y=g.values,x=s.outShape[1]*s.outShape[2]*s.outShape[3],v=s.outShape[2]*s.outShape[3],O=s.outShape[3];for(let t=0;t<s.batchSize;++t){const n=t*x,r=t*a[0];for(let t=0;t<s.inChannels;++t)for(let g=0;g<s.outHeight;++g){const x=g*i-f,k=Math.max(0,x),w=Math.min(s.inHeight,p+x),I=n+g*v;for(let n=0;n<s.outWidth;++n){const i=n*u-m,p=Math.max(0,i),f=Math.min(s.inWidth,h+i);let g=b,x=0,v=0;for(let n=k;n<w;n+=c){const s=r+n*a[1];for(let n=p;n<f;n+=l){const r=e[s+n*a[2]+t];"max"===o&&r>g?g=r:"avg"===o&&(x+=r,v++)}if(isNaN(g))break}y[I+n*O+t]="avg"===o?x/v:g}}}return g}function maxPoolPositions(e,t,n,a,s=!1,o=!1){const i=Object(r.buffer)(a.outShape,"int32"),u=a.strideHeight,c=a.strideWidth,l=a.dilationHeight,p=a.dilationWidth,h=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.top,b=a.padInfo.left,g=Object(r.buffer)(t,n,e);for(let e=0;e<a.batchSize;++e)for(let t=0;t<a.inChannels;++t)for(let n=0;n<a.outHeight;++n){const r=n*u-m;let y=r;for(;y<0;)y+=l;const x=Math.min(a.inHeight,h+r);for(let u=0;u<a.outWidth;++u){const h=u*c-b;let m=h;for(;m<0;)m+=p;const v=Math.min(a.inWidth,f+h);let O=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<x;n+=l){const i=n-r;for(let r=m;r<v;r+=p){const u=r-h,c=g.get(e,n,r,t);c>O&&(O=c,k=s?o?((e*a.inHeight+n)*a.inWidth+r)*a.inChannels+t:(n*a.inWidth+r)*a.inChannels+t:i*f+u)}}i.set(k,e,n,u,t)}}return i}function pool3d(e,t,n,a,s,o){const i=s.strideDepth,u=s.strideHeight,c=s.strideWidth,l=s.dilationDepth,p=s.dilationHeight,h=s.dilationWidth,f=s.effectiveFilterDepth,m=s.effectiveFilterHeight,b=s.effectiveFilterWidth,g=s.padInfo.front,y=s.padInfo.top,x=s.padInfo.left,v="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,O=Object(r.buffer)(s.outShape,n),k=O.values,w=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],I=s.outShape[2]*s.outShape[3]*s.outShape[4],S=s.outShape[3]*s.outShape[4],T=s.outShape[4];for(let t=0;t<s.batchSize;++t){const n=t*w,r=t*a[0];for(let t=0;t<s.inChannels;++t)for(let O=0;O<s.outDepth;++O){const w=O*i-g;let N=w;for(;N<0;)N+=l;const _=Math.min(s.inDepth,f+w),C=n+O*I;for(let n=0;n<s.outHeight;++n){const i=n*u-y;let f=i;for(;f<0;)f+=p;const g=Math.min(s.inHeight,m+i),O=C+n*S;for(let n=0;n<s.outWidth;++n){const i=n*c-x;let u=i;for(;u<0;)u+=h;const m=Math.min(s.inWidth,b+i),y=O+n*T;let w=v,I=0,S=0;for(let n=N;n<_;n+=l){const s=r+n*a[1];for(let n=f;n<g;n+=p){const r=s+n*a[2];for(let n=u;n<m;n+=h){const s=e[r+n*a[3]+t];if("max"===o&&s>w?w=s:"avg"===o&&(I+=s,S++),isNaN(w))break}if(isNaN(w))break}if(isNaN(w))break}k[y+t]="avg"===o?I/S:w}}}}return O}const X={kernelName:r.AvgPool,backendName:"cpu",kernelFunc:function avgPool(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t;Object(a.a)(o,"avgPool");const{filterSize:i,strides:u,pad:c,dimRoundingMode:l}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`);const h=r.backend_util.computePool2DInfo(o.shape,i,u,1,c,l);let f;if(1===h.filterWidth&&1===h.filterHeight&&r.util.arraysEqual(h.inShape,h.outShape))f=Object(p.a)({inputs:{x:o},backend:n});else{const e=n.data.get(o.dataId).values,t=r.util.computeStrides(o.shape),a=pool(e,o.shape,o.dtype,t,h,"avg");f=n.makeTensorInfo(h.outShape,o.dtype,a.values)}return f}};const Y={kernelName:r.AvgPool3D,backendName:"cpu",kernelFunc:function avgPool3D(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{filterSize:i,strides:u,pad:c,dimRoundingMode:l,dataFormat:p}=s;Object(a.a)(o,"avgPool3d");const h=r.backend_util.computePool3DInfo(o.shape,i,u,1,c,l,p),f=pool3d(n.data.get(o.dataId).values,o.shape,o.dtype,r.util.computeStrides(o.shape),h,"avg");return n.makeTensorInfo(f.shape,"float32",f.values)}};const Q={kernelName:r.AvgPool3DGrad,backendName:"cpu",kernelFunc:function avgPool3DGrad(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,{filterSize:u,strides:c,pad:l,dimRoundingMode:p}=s;Object(a.a)([o,i],"avgPool3DGrad");const h=r.backend_util.computePool3DInfo(i.shape,u,c,1,l,p),f=h.strideDepth,m=h.strideHeight,b=h.strideWidth,g=h.filterDepth,y=h.filterHeight,x=h.filterWidth,v=h.dilationDepth,O=h.dilationHeight,k=h.dilationWidth,w=h.effectiveFilterDepth,I=h.effectiveFilterHeight,S=h.effectiveFilterWidth,T=w-1-h.padInfo.front,N=S-1-h.padInfo.left,_=I-1-h.padInfo.top,C=Object(r.buffer)(i.shape,"float32"),j=1/(g*y*x),E=n.bufferSync(o);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let a=0;a<h.inWidth;++a){const s=n-T,o=r-_,i=a-N;let u=0;for(let n=0;n<w;n+=v){const r=(s+n)/f;if(!(r<0||r>=h.outDepth||Math.floor(r)!==r))for(let n=0;n<I;n+=O){const a=(o+n)/m;if(!(a<0||a>=h.outHeight||Math.floor(a)!==a))for(let n=0;n<S;n+=k){const s=(i+n)/b;if(s<0||s>=h.outWidth||Math.floor(s)!==s)continue;u+=E.get(e,r,a,s,t)}}}C.set(u*j,e,n,r,a,t)}return n.makeTensorInfo(C.shape,C.dtype,C.values)}};const Z={kernelName:r.AvgPoolGrad,backendName:"cpu",kernelFunc:function avgPoolGrad(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,u=i;Object(a.a)([o,i],"avgPoolGrad");const{filterSize:c,strides:l,pad:p}=s,h=r.backend_util.computePool2DInfo(u.shape,c,l,1,p),f=h.strideHeight,m=h.strideWidth,b=h.filterHeight,g=h.filterWidth,y=h.dilationHeight,x=h.dilationWidth,v=h.effectiveFilterHeight,O=h.effectiveFilterWidth,k=O-1-h.padInfo.left,w=v-1-h.padInfo.top,I=Object(r.buffer)(u.shape,"float32"),S=1/(b*g),T=n.data.get(o.dataId).values,N=Object(r.buffer)(o.shape,"float32",T);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inHeight;++n)for(let r=0;r<h.inWidth;++r){const a=n-w,s=r-k;let o=0;for(let n=0;n<v;n+=y){const r=(a+n)/f;if(!(r<0||r>=h.outHeight||Math.floor(r)!==r))for(let n=0;n<O;n+=x){const a=(s+n)/m;if(a<0||a>=h.outWidth||Math.floor(a)!==a)continue;o+=N.get(e,r,a,t)}}I.set(o*S,e,n,r,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}};const J={kernelName:r.FusedBatchNorm,backendName:"cpu",kernelFunc:function batchNorm(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,scale:i,offset:u,mean:c,variance:l}=t;r.util.assert(c.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),r.util.assert(null==u||c.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),r.util.assert(null==i||c.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Object(a.a)([o,c,l,i,u],"batchNorm");let{varianceEpsilon:p}=s;null==p&&(p=.001);const h=n.data.get(o.dataId).values,f=n.data.get(c.dataId).values,m=n.data.get(l.dataId).values,b=i?n.data.get(i.dataId).values:new Float32Array([1]),g=u?n.data.get(u.dataId).values:new Float32Array([0]),y=new Float32Array(h.length),x=g.length,v=b.length,O=m.length,k=f.length;let w=0,I=0,S=0,T=0;for(let e=0;e<h.length;++e)y[e]=g[w++]+(h[e]-f[I++])*b[S++]/Math.sqrt(m[T++]+p),w>=x&&(w=0),I>=k&&(I=0),S>=v&&(S=0),T>=O&&(T=0);return n.makeTensorInfo(o.shape,o.dtype,y)}};var ee=n(44);const te={kernelName:r.BatchToSpaceND,backendName:"cpu",kernelFunc:function batchToSpaceND(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{blockShape:i,crops:u}=s;Object(a.a)([o],"batchToSpaceND");const c=i.reduce((e,t)=>e*t),l=r.backend_util.getReshaped(o.shape,i,c),p=r.backend_util.getPermuted(l.length,i.length),h=r.backend_util.getReshapedPermuted(o.shape,i,c),f=r.backend_util.getSliceBeginCoords(u,i.length),m=r.backend_util.getSliceSize(h,u,i.length),b=reshape({inputs:{x:o},backend:n,attrs:{shape:l}}),g=Object(A.a)({inputs:{x:b},backend:n,attrs:{perm:p}}),y=reshape({inputs:{x:g},backend:n,attrs:{shape:h}}),x=Object(ee.a)({inputs:{x:y},backend:n,attrs:{begin:f,size:m}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),x}};var ne=n(78);const re={kernelName:r.Bincount,backendName:"cpu",kernelFunc:function bincount(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,c=Object(ne.a)(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,c)}};const ae={kernelName:r.BroadcastArgs,backendName:"cpu",kernelFunc:function broadcastArgs(e){const{inputs:t,backend:n}=e,{s0:a,s1:s}=t,o=n.data.get(a.dataId).values,i=n.data.get(s.dataId).values,u=r.backend_util.assertAndGetBroadcastShape(Array.from(o),Array.from(i));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}};var se=n(57),oe=n(152);const ie=Object(u.a)(r.ClipByValue,(e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}),ue={kernelName:r.ClipByValue,backendName:"cpu",kernelFunc:ie};var ce=n(33);const le={kernelName:r.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,a=new Float32Array(r.util.sizeFromShape(t.shape)),s=n.data.get(t.dataId),o=s.complexTensorInfos.real,i=s.complexTensorInfos.imag,u=n.data.get(o.dataId).values,c=n.data.get(i.dataId).values;for(let e=0;e<u.length;e++){const t=u[e],n=c[e];a[e]=Math.hypot(t,n)}return n.makeOutput(a,t.shape,"float32")}};var de=n(153);function Imag_imag(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const pe={kernelName:r.Imag,backendName:"cpu",kernelFunc:Imag_imag};var he=n(49);function concat(e){const{inputs:t,backend:n,attrs:a}=e,{axis:s}=a,o=r.util.parseAxisParam(s,t[0].shape)[0];let i=r.backend_util.computeOutShape(t.map(e=>e.shape),o);if(0===r.util.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter(e=>r.util.sizeFromShape(e.shape)>0);if(1===u.length)return Object(p.a)({inputs:{x:u[0]},backend:n});const c=u.map(e=>e.shape);if(r.backend_util.assertParamsConsistent(c,o),"complex64"===u[0].dtype){const e=u.map(e=>Object(he.a)({inputs:{input:e},backend:n})),t=u.map(e=>Imag_imag({inputs:{input:e},backend:n})),r=concat({inputs:e,backend:n,attrs:{axis:o}}),a=concat({inputs:t,backend:n,attrs:{axis:o}}),s=Object(ce.a)({inputs:{real:r,imag:a},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),s}const l=u.map(e=>{const t=r.util.sizeFromShape(e.shape.slice(o));return reshape({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),h=l.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));i=r.backend_util.computeOutShape(l.map(e=>e.shape),1);const f=1===l[0].shape[0],m=Object(de.a)(h,i,t[0].dtype,f),b=r.backend_util.computeOutShape(u.map(e=>e.shape),o),g=n.makeTensorInfo(b,t[0].dtype,m);return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),g}const fe={kernelName:r.Concat,backendName:"cpu",kernelFunc:concat};function conv2D(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:c,dataFormat:l,dilations:p,dimRoundingMode:h}=s;Object(a.a)([o,i],"conv2d");const f=r.backend_util.convertConv2DDataFormat(l),m=r.backend_util.computeConv2DInfo(o.shape,i.shape,u,p,c,h,!1,f),b=m.filterHeight,g=m.filterWidth,y=m.dilationHeight,x=m.dilationWidth,v=m.padInfo.left,O=m.padInfo.top,k="channelsLast"===m.dataFormat,w=new r.TensorBuffer(m.outShape,o.dtype),I=r.util.computeStrides(o.shape),S=r.util.computeStrides(i.shape),T=I[0],N=k?I[1]:I[2],_=k?I[2]:1,C=k?1:I[1],j=w.strides[0],E=k?w.strides[1]:w.strides[2],A=k?w.strides[2]:1,$=k?1:w.strides[1],R=n.data.get(o.dataId).values,F=n.data.get(i.dataId).values,D=w.values;for(let e=0;e<m.batchSize;++e){const t=e*T,n=e*j;for(let e=0;e<m.outHeight;++e){const r=n+e*E,a=e*m.strideHeight-O;for(let e=0;e<b;++e){const n=a+e*y;if(n<0||n>=m.inHeight)continue;const s=e*S[0],o=t+n*N;for(let e=0;e<m.outWidth;++e){const t=r+e*A,n=e*m.strideWidth-v;for(let e=0;e<g;++e){const r=n+e*x;if(r<0||r>=m.inWidth)continue;const a=o+r*_;let i=s+e*S[1];for(let e=0;e<m.inChannels;++e){const n=R[a+e*C];for(let e=0;e<m.outChannels;++e)D[t+e*$]+=n*F[i+e];i+=m.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const me={kernelName:r.Conv2D,backendName:"cpu",kernelFunc:conv2D};const be={kernelName:r.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function conv2DBackpropFilter(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,pad:c,dataFormat:l,dimRoundingMode:p,filterShape:h}=s;Object(a.a)([o,i],"conv2dBackpropFilter");const f=r.backend_util.convertConv2DDataFormat(l),m=r.backend_util.computeConv2DInfo(o.shape,h,u,1,c,p,!1,f),{strideHeight:b,strideWidth:g,filterHeight:y,filterWidth:x}=m,v="channelsLast"===m.dataFormat,O=new r.TensorBuffer(m.filterShape,"float32"),k=m.padInfo.left,w=m.padInfo.top,I=n.data.get(o.dataId).values,S=n.data.get(i.dataId).values,T=new r.TensorBuffer(o.shape,o.dtype,I),N=new r.TensorBuffer(i.shape,i.dtype,S);for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((w-e)/b)),n=Math.min(m.outHeight,(m.inHeight+w-e)/b);for(let r=0;r<x;++r){const a=Math.max(0,Math.ceil((k-r)/g)),s=Math.min(m.outWidth,(m.inWidth+k-r)/g);for(let o=0;o<m.inChannels;++o)for(let i=0;i<m.outChannels;++i){let u=0;for(let c=0;c<m.batchSize;++c)for(let l=t;l<n;++l){const t=e+l*b-w;for(let e=a;e<s;++e){const n=r+e*g-k;u+=v?T.get(c,t,n,o)*N.get(c,l,e,i):T.get(c,o,t,n)*N.get(c,i,l,e)}}O.set(u,e,r,o,i)}}}return n.makeTensorInfo(O.shape,O.dtype,O.values)}};const ge={kernelName:r.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function conv2DBackpropInput(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{inputShape:u,strides:c,pad:l,dataFormat:p,dimRoundingMode:h}=s;Object(a.a)([o,i],"conv2dBackpropInput");const f=r.util.computeStrides(i.shape),m=r.util.computeStrides(o.shape);let b=r.backend_util.convertConv2DDataFormat(p);const g=r.backend_util.computeConv2DInfo(u,i.shape,c,1,l,h,!1,b),y=new r.TensorBuffer(g.inShape,"float32"),x=y.values,v=n.data.get(o.dataId).values,O=n.data.get(i.dataId).values,[k,w,I]=f,{batchSize:S,filterHeight:T,filterWidth:N,inChannels:_,inHeight:C,inWidth:j,outChannels:E,outHeight:A,outWidth:$,strideHeight:R,strideWidth:F}=g;b=g.dataFormat;const D=T-1-g.padInfo.top,M=N-1-g.padInfo.left,P="channelsLast"===b,B=y.strides[0],L=P?y.strides[1]:y.strides[2],z=P?y.strides[2]:1,U=P?1:y.strides[1],V=m[0],W=P?m[1]:m[2],G=P?m[2]:1,H=P?1:m[1];for(let e=0;e<S;++e)for(let t=0;t<_;++t)for(let n=0;n<C;++n){const r=n-D,a=Math.max(0,Math.ceil(r/R)),s=Math.min(A,(T+r)/R);for(let o=0;o<j;++o){const i=o-M,u=Math.max(0,Math.ceil(i/F)),c=Math.min($,(N+i)/F);let l=0;for(let n=a;n<s;++n){const a=n*R-r;for(let r=u;r<c;++r){const s=V*e+W*n+G*r,o=k*(T-1-a)+w*(N-1-(r*F-i))+I*t;for(let e=0;e<E;++e){l+=v[s+H*e]*O[o+e]}}}x[B*e+L*n+z*o+U*t]=l}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}};const ye={kernelName:r.Conv3D,backendName:"cpu",kernelFunc:function conv3D(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:c,dilations:l}=s;Object(a.a)([o,i],"conv3d");const p=r.backend_util.computeConv3DInfo(o.shape,i.shape,u,l,c),{filterDepth:h,filterHeight:f,filterWidth:m,dilationDepth:b,dilationHeight:g,dilationWidth:y,padInfo:x}=p,v=x.front,O=x.left,k=x.top,w=new r.TensorBuffer(p.outShape,o.dtype),I=n.data.get(o.dataId).values,S=n.data.get(i.dataId).values,T=w.values,N=r.util.computeStrides(o.shape),_=r.util.computeStrides(i.shape);for(let e=0;e<p.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<p.outDepth;++e){const r=n+e*w.strides[1],a=e*p.strideDepth-v;for(let e=0;e<h;++e){const n=a+e*b;if(n<0||n>=p.inDepth)continue;const s=e*_[0],o=t+n*N[1];for(let e=0;e<p.outHeight;++e){const t=r+e*w.strides[2],n=e*p.strideHeight-k;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=p.inHeight)continue;const a=s+e*_[1],i=o+r*N[2];for(let e=0;e<p.outWidth;++e){const n=t+e*p.outChannels,r=e*p.strideWidth-O;for(let e=0;e<m;++e){const t=r+e*y;if(t<0||t>=p.inWidth)continue;const s=a+e*_[2],o=i+t*p.inChannels;let u=s;for(let e=0;e<p.inChannels;++e){const t=I[o+e];for(let e=0;e<p.outChannels;++e)T[n+e]+=t*S[u+e];u+=p.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}};const xe={kernelName:r.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function conv3DBackpropFilterV2(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,pad:c,filterShape:l}=s;Object(a.a)([o,i],"conv3dBackpropFilterV2");const p=r.util.computeStrides(o.shape),h=r.util.computeStrides(i.shape),f=r.backend_util.computeConv3DInfo(o.shape,l,u,1,c),m=f.strideDepth,b=f.strideHeight,g=f.strideWidth,y=f.filterDepth,x=f.filterHeight,v=f.filterWidth,O=new r.TensorBuffer(f.filterShape,"float32"),k=O.values,[w,I,S,T]=O.strides,N=n.data.get(i.dataId).values,[_,C,j,E]=h,A=n.data.get(o.dataId).values,[$,R,F,D]=p,M=f.padInfo.front,P=f.padInfo.left,B=f.padInfo.top;for(let e=0;e<y;++e){const t=Math.max(0,Math.ceil((M-e)/m)),n=Math.min(f.outDepth,(f.inDepth+M-e)/m),r=e*w;for(let a=0;a<x;++a){const s=Math.max(0,Math.ceil((B-a)/b)),o=Math.min(f.outHeight,(f.inHeight+B-a)/b),i=a*I+r;for(let r=0;r<v;++r){const u=Math.max(0,Math.ceil((P-r)/g)),c=Math.min(f.outWidth,(f.inWidth+P-r)/g),l=r*S+i;for(let i=0;i<f.inChannels;++i){const p=i*T+l;for(let l=0;l<f.outChannels;++l){let h=0;for(let p=0;p<f.batchSize;++p){const f=p*$,y=p*_;for(let p=t;p<n;++p){const t=(e+p*m-M)*R+f,n=p*C+y;for(let e=s;e<o;++e){const s=(a+e*b-B)*F+t,o=e*j+n;for(let e=u;e<c;++e){const t=e*E+o;h+=A[(r+e*g-P)*D+s+i]*N[t+l]}}}}k[p+l]=h}}}}}return n.makeTensorInfo(O.shape,O.dtype,O.values)}};const ve={kernelName:r.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function conv3DBackpropInputV2(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{pad:u,strides:c,inputShape:l}=s;Object(a.a)([o],"conv3dBackpropInputV2");const p=r.util.computeStrides(o.shape),h=r.util.computeStrides(i.shape),f=r.backend_util.computeConv3DInfo(l,i.shape,c,1,u),m=new r.TensorBuffer(f.inShape,"float32"),b=m.values,[g,y,x,v]=m.strides,O=n.data.get(o.dataId).values,[k,w,I,S]=p,T=n.data.get(i.dataId).values,[N,_,C,j]=h,{batchSize:E,filterDepth:A,filterHeight:$,filterWidth:R,inChannels:F,inDepth:D,inHeight:M,inWidth:P,outChannels:B,outDepth:L,outHeight:z,outWidth:U,strideDepth:V,strideHeight:W,strideWidth:G}=f,H=A-1-f.padInfo.front,q=$-1-f.padInfo.top,K=R-1-f.padInfo.left;for(let e=0;e<E;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const r=n-H,a=Math.max(0,Math.ceil(r/V)),s=Math.min(L,(A+r)/V);for(let o=0;o<M;++o){const i=o-q,u=Math.max(0,Math.ceil(i/W)),c=Math.min(z,($+i)/W);for(let l=0;l<P;++l){const p=l-K,h=Math.max(0,Math.ceil(p/G)),f=Math.min(U,(R+p)/G);let m=0;for(let n=a;n<s;++n){const a=n*V-r;for(let r=u;r<c;++r){const s=r*W-i;for(let o=h;o<f;++o){const i=k*e+w*n+I*r+S*o,u=N*(A-1-a)+_*($-1-s)+C*(R-1-(o*G-p))+j*t;for(let e=0;e<B;++e){m+=O[i+e]*T[u+e]}}}}b[g*e+y*n+x*o+v*l+t]=m}}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},Oe=Object(u.a)(r.Cos,e=>Math.cos(e)),ke={kernelName:r.Cos,backendName:"cpu",kernelFunc:Oe},we=Object(u.a)(r.Cosh,e=>Math.cosh(e)),Ie={kernelName:r.Cosh,backendName:"cpu",kernelFunc:we};const Se={kernelName:r.CropAndResize,backendName:"cpu",kernelFunc:function cropAndResize(e){const{inputs:t,backend:n,attrs:a}=e,{image:s,boxes:o,boxInd:i}=t,{cropSize:u,method:c,extrapolationValue:l}=a,[p,h,f,m]=s.shape,b=o.shape[0],[g,y]=u,x=Object(r.buffer)([b,g,y,m],"float32"),v=n.data.get(o.dataId).values,O=n.data.get(i.dataId).values,k=n.data.get(s.dataId).values,w=r.util.computeStrides(s.shape),I=r.util.computeStrides(x.shape);for(let e=0;e<b;e++){const t=4*e,n=v[t],r=v[t+1],a=v[t+2],s=v[t+3],o=O[e];if(o>=p)continue;const i=g>1?(a-n)*(h-1)/(g-1):0,u=y>1?(s-r)*(f-1)/(y-1):0;for(let t=0;t<g;t++){const p=g>1?n*(h-1)+t*i:.5*(n+a)*(h-1);if(p<0||p>h-1)for(let n=0;n<y;n++)for(let r=0;r<m;r++){const a=r+n*I[2]+t*I[1]+e*I[0];x.values[a]=l}else if("bilinear"===c){const n=Math.floor(p),a=Math.ceil(p),i=p-n;for(let c=0;c<y;c++){const p=y>1?r*(f-1)+c*u:.5*(r+s)*(f-1);if(p<0||p>f-1){for(let n=0;n<m;n++){const r=n+c*I[2]+t*I[1]+e*I[0];x.values[r]=l}continue}const h=Math.floor(p),b=Math.ceil(p),g=p-h;for(let r=0;r<m;r++){let s=r+h*w[2]+n*w[1]+o*w[0];const u=k[s];s=r+b*w[2]+n*w[1]+o*w[0];const l=k[s];s=r+h*w[2]+a*w[1]+o*w[0];const p=k[s];s=r+b*w[2]+a*w[1]+o*w[0];const f=u+(l-u)*g,m=p+(k[s]-p)*g;s=r+c*I[2]+t*I[1]+e*I[0],x.values[s]=f+(m-f)*i}}}else for(let n=0;n<y;++n){const a=y>1?r*(f-1)+n*u:.5*(r+s)*(f-1);if(a<0||a>f-1){for(let r=0;r<m;r++){const a=r+n*I[2]+t*I[1]+e*I[0];x.values[a]=l}continue}const i=Math.round(a),c=Math.round(p);for(let r=0;r<m;r++){const a=r+i*w[2]+c*w[1]+o*w[0],s=r+n*I[2]+t*I[1]+e*I[0];x.values[s]=k[a]}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}};const Te={kernelName:r.Cumsum,backendName:"cpu",kernelFunc:function cumsum(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,exclusive:u,reverse:c}=s;Object(a.a)(o,"cumsum");const l=r.backend_util.getAxesPermutation([i],o.shape.length);let p=o;null!=l&&(p=Object(A.a)({inputs:{x:o},backend:n,attrs:{perm:l}}));const h=r.backend_util.getInnerMostAxes(1,o.shape.length)[0];if(h!==p.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${p.shape.length-1} but got axis=${h}`);const f=Object(r.upcastType)(p.dtype,"int32"),m=r.util.makeZerosTypedArray(r.util.sizeFromShape(p.shape),f),b=n.data.get(p.dataId).values,g=p.shape[p.shape.length-1],y=c?(e,t)=>e+g-t-1:(e,t)=>e+t;for(let e=0;e<b.length;e+=g)for(let t=0;t<g;t++){const n=y(e,t);if(0===t)m[n]=u?0:b[n];else{const r=y(e,t-1);m[n]=u?b[r]+m[r]:b[n]+m[r]}}const x=n.makeTensorInfo(p.shape,f,m);if(null!=l){const e=r.backend_util.getUndoAxesPermutation(l),t=Object(A.a)({inputs:{x:x},backend:n,attrs:{perm:e}});return n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(p),t}return x}};const Ne={kernelName:r.DenseBincount,backendName:"cpu",kernelFunc:function denseBincount(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.data.get(a.dataId).values,t=n.data.get(s.dataId).values,r=Object(ne.a)(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=Object(ne.b)(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error("Error in denseBincount: input must be at most rank 2, but got rank"+a.shape.length+".")}};const _e={kernelName:r.DepthToSpace,backendName:"cpu",kernelFunc:function depthToSpace(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{blockSize:o,dataFormat:i}=a;r.util.assert("NHWC"===i,()=>"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+i);const u=s.shape[0],c=s.shape[1],l=s.shape[2],p=s.shape[3],h=c*o,f=l*o,m=p/(o*o),b=n.data.get(s.dataId).values,g=new Float32Array(u*h*f*m);let y=0;for(let e=0;e<u;++e)for(let t=0;t<h;++t){const n=Math.floor(t/o),r=t%o;for(let t=0;t<f;++t){const a=Math.floor(t/o),s=(r*o+t%o)*m;for(let t=0;t<m;++t){const r=t+s+p*(a+l*(n+c*e));g[y++]=b[r]}}}return n.makeTensorInfo([u,h,f,m],s.dtype,g)}};function depthwiseConv2dNative(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,filter:i}=t,{strides:u,pad:c,dilations:l,dimRoundingMode:p}=s;Object(a.a)([o,i],"depthwiseConv2DNative");const h=r.util.computeStrides(o.shape),f=r.util.computeStrides(i.shape);let m=l;null==m&&(m=[1,1]),r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${m}'`);const b=r.backend_util.computeConv2DInfo(o.shape,i.shape,u,m,c,p,!0),{filterHeight:g,filterWidth:y,dilationHeight:x,dilationWidth:v,padInfo:O}=b,k=O.left,w=O.top,I=b.outChannels/b.inChannels,S=new r.TensorBuffer(b.outShape,o.dtype),T=n.data.get(o.dataId).values,N=n.data.get(i.dataId).values,_=S.values;for(let e=0;e<b.batchSize;++e){const t=e*h[0],n=e*S.strides[0];for(let e=0;e<b.outHeight;++e){const r=n+e*S.strides[1],a=e*b.strideHeight-w;for(let e=0;e<g;++e){const n=a+e*x;if(n<0||n>=b.inHeight)continue;const s=e*f[0],o=t+n*h[1];for(let e=0;e<b.outWidth;++e){const t=r+e*S.strides[2],n=e*b.strideWidth-k;for(let e=0;e<y;++e){const r=n+e*v;if(r<0||r>=b.inWidth)continue;const a=s+e*f[1],i=o+r*b.inChannels;let u=t,c=a;for(let e=0;e<b.inChannels;++e){const t=T[i+e];for(let e=0;e<I;++e)_[u+e]+=t*N[c+e];u+=I,c+=I}}}}}}return n.makeTensorInfo(S.shape,S.dtype,S.values)}const Ce={kernelName:r.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:depthwiseConv2dNative};const je={kernelName:r.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function depthwiseConv2dNativeBackpropFilter(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,dy:i}=t,{strides:u,dilations:c,pad:l,dimRoundingMode:p,filterShape:h}=s;Object(a.a)([o,i],"depthwiseConv2dNativeBackpropFilter");const f=r.backend_util.computeConv2DInfo(o.shape,h,u,c,l,p,!0),{strideHeight:m,strideWidth:b,filterHeight:g,filterWidth:y}=f,x=new r.TensorBuffer(f.filterShape,"float32"),v=f.padInfo.left,O=f.padInfo.top,k=f.outChannels/f.inChannels,w=n.data.get(o.dataId).values,I=new r.TensorBuffer(o.shape,o.dtype,w),S=n.data.get(i.dataId).values,T=new r.TensorBuffer(i.shape,i.dtype,S);for(let e=0;e<g;++e){const t=Math.max(0,Math.ceil((O-e)/m)),n=Math.min(f.outHeight,(f.inHeight+O-e)/m);for(let r=0;r<y;++r){const a=Math.max(0,Math.ceil((v-r)/b)),s=Math.min(f.outWidth,(f.inWidth+v-r)/b);for(let o=0;o<f.outChannels;++o){const i=Math.trunc(o/k),u=o%k;let c=0;for(let u=0;u<f.batchSize;++u)for(let l=t;l<n;++l){const t=e+l*m-O;for(let e=a;e<s;++e){const n=r+e*b-v;c+=I.get(u,t,n,i)*T.get(u,l,e,o)}}x.set(c,e,r,i,u)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}};const Ee={kernelName:r.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function depthwiseConv2dNativeBackpropInput(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,filter:i}=t,{strides:u,dilations:c,pad:l,dimRoundingMode:p,inputShape:h}=s;Object(a.a)([o,i],"depthwiseConv2DNativeBackpropInput");const f=r.util.computeStrides(o.shape),m=r.util.computeStrides(i.shape),b=r.backend_util.computeConv2DInfo(h,i.shape,u,c,l,p,!0),g=new r.TensorBuffer(b.inShape,"float32"),y=g.values,[x,v,O]=g.strides,k=n.data.get(o.dataId).values,[w,I,S]=f,T=n.data.get(i.dataId).values,[N,_,C]=m,{batchSize:j,filterHeight:E,filterWidth:A,inChannels:$,inHeight:R,inWidth:F,outChannels:D,outHeight:M,outWidth:P,strideHeight:B,strideWidth:L}=b,z=E-1-b.padInfo.top,U=A-1-b.padInfo.left,V=D/$;for(let e=0;e<j;++e)for(let t=0;t<$;++t)for(let n=0;n<R;++n){const r=n-z,a=Math.max(0,Math.ceil(r/B)),s=Math.min(M,(E+r)/B);for(let o=0;o<F;++o){const i=o-U,u=Math.max(0,Math.ceil(i/L)),c=Math.min(P,(A+i)/L);let l=0;for(let n=a;n<s;++n){const a=n*B-r;for(let r=u;r<c;++r){const s=w*e+I*n+S*r,o=N*(E-1-a)+_*(A-1-(r*L-i))+C*t;for(let e=0;e<V;++e){l+=k[s+(t*V+e)]*T[o+e]}}}y[x*e+v*n+O*o+t]=l}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}};const Ae={kernelName:r.Diag,backendName:"cpu",kernelFunc:function diag(e){const{inputs:t,backend:n}=e,{x:a}=t,s=r.util.sizeFromShape(a.shape),o=n.data.get(a.dataId).values,i=Object(r.buffer)([s,s],a.dtype),u=i.values;for(let e=0;e<o.length;e++)u[e*s+e]=o[e];const c=[...a.shape,...a.shape];return n.makeTensorInfo(c,i.dtype,i.values)}},$e={kernelName:r.Dilation2D,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s}=e,{strides:o,pad:i,dilations:u}=n,c=t,l=c.data.get(a.dataId).values,p=a.shape.length,h=c.data.get(s.dataId).values,f=s.shape.length,{batchSize:m,inHeight:b,inWidth:g,inChannels:y,outHeight:x,outWidth:v,padInfo:O,strideHeight:k,strideWidth:w,filterHeight:I,filterWidth:S,dilationHeight:T,dilationWidth:N,outShape:_}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,o,i,"NHWC",u),C=r.util.sizeFromShape(_),j=_.length,E=r.util.getArrayFromDType(a.dtype,C);for(let e=0;e<m;++e)for(let t=0;t<x;++t){const n=t*k-O.top;for(let o=0;o<v;++o){const i=o*w-O.left;for(let u=0;u<y;++u){let c=Number.MIN_SAFE_INTEGER;for(let t=0;t<I;++t){const o=n+t*T;if(o>=0&&o<b)for(let n=0;n<S;++n){const m=i+n*N;if(m>=0&&m<g){const i=r.util.locToIndex([e,o,m,u],p,r.util.computeStrides(a.shape)),b=r.util.locToIndex([t,n,u],f,r.util.computeStrides(s.shape)),g=l[i]+h[b];g>c&&(c=g)}}}E[r.util.locToIndex([e,t,o,u],j,r.util.computeStrides(_))]=c}}}return{dataId:c.write(r.util.toTypedArray(E,a.dtype),_,a.dtype),shape:_,dtype:a.dtype}}},Re={kernelName:r.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s,dy:o}=e,{strides:i,pad:u,dilations:c}=n,l=t,p=r.util.toNestedArray(a.shape,l.data.get(a.dataId).values),h=r.util.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:f,inHeight:m,inWidth:b,inChannels:g,outHeight:y,outWidth:x,padInfo:v,strideHeight:O,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:S,dilationWidth:T,outShape:N}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",c);r.util.assert(o.rank===N.length,()=>`Error in ${r.Dilation2DBackpropFilter}, dy must have the same rank as output ${N.length}, but got `+o.rank);const _=r.util.toNestedArray(N,l.data.get(o.dataId).values),C=r.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let e=0;e<f;++e)for(let t=0;t<y;++t){const n=t*O-v.top;for(let r=0;r<x;++r){const a=r*k-v.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<w;++t){const r=n+t*S;if(r>=0&&r<m)for(let n=0;n<I;++n){const c=a+n*T;if(c>=0&&c<b){const a=p[e][r][c][s]+h[t][n][s];a>o&&(o=a,i=t,u=n)}}}C[i][u][s]+=_[e][t][r][s]}}}return{dataId:l.write(r.util.toTypedArray(C,a.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},Fe={kernelName:r.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:a,filter:s,dy:o}=e,{strides:i,pad:u,dilations:c}=n,l=t,p=r.util.toNestedArray(a.shape,l.data.get(a.dataId).values),h=r.util.toNestedArray(s.shape,l.data.get(s.dataId).values),{batchSize:f,inHeight:m,inWidth:b,inChannels:g,outHeight:y,outWidth:x,padInfo:v,strideHeight:O,strideWidth:k,filterHeight:w,filterWidth:I,dilationHeight:S,dilationWidth:T,outShape:N}=r.backend_util.computeDilation2DInfo(a.shape,s.shape,i,u,"NHWC",c);r.util.assert(o.rank===N.length,()=>`Error in ${r.Dilation2DBackpropInput}, dy must have the same rank as output ${N.length}, but got `+o.rank);const _=r.util.toNestedArray(N,l.data.get(o.dataId).values),C=r.util.makeZerosNestedTypedArray(a.shape,a.dtype);for(let e=0;e<f;++e)for(let t=0;t<y;++t){const n=t*O-v.top;for(let r=0;r<x;++r){const a=r*k-v.left;for(let s=0;s<g;++s){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=a<0?0:a;for(let t=0;t<w;++t){const r=n+t*S;if(r>=0&&r<m)for(let n=0;n<I;++n){const c=a+n*T;if(c>=0&&c<b){const a=p[e][r][c][s]+h[t][n][s];a>o&&(o=a,i=r,u=c)}}}C[e][i][u][s]+=_[e][t][r][s]}}}return{dataId:l.write(r.util.toTypedArray(C,a.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};var De=n(52),Me=n(184);function sum(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;let c;Object(a.a)(o,"sum"),c="bool"===o.dtype?Object(se.a)({inputs:{x:o},backend:n,attrs:{dtype:"int32"}}):Object(p.a)({inputs:{x:o},backend:n});const l=c.shape.length,h=r.util.parseAxisParam(i,c.shape),f=r.backend_util.getAxesPermutation(h,l);let m=h,b=c;null!=f&&(b=Object(A.a)({inputs:{x:c},backend:n,attrs:{perm:f}}),m=r.backend_util.getInnerMostAxes(m.length,l)),r.backend_util.assertAxesAreInnerMostDims("sum",m,b.shape.length);const[g,y]=r.backend_util.computeOutAndReduceShapes(b.shape,m),x=r.backend_util.upcastType(b.dtype,"int32");let v=Object(Me.a)(n,g,x);const O=r.util.sizeFromShape(y),k=n.data.get(v.dataId).values,w=n.data.get(b.dataId).values;for(let e=0;e<k.length;++e){const t=e*O;let n=0;for(let e=0;e<O;++e)n+=w[t+e];k[e]=n}if(u){const e=v;v=reshape({inputs:{x:v},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(v.shape,h)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(c),null!=f&&n.disposeIntermediateTensorInfo(b),v}const Pe={kernelName:r.Sum,backendName:"cpu",kernelFunc:sum};const Be={kernelName:r.Einsum,backendName:"cpu",kernelFunc:function einsum(e){const{inputs:t,backend:n,attrs:a}=e,{equation:s}=a,o=t,{allDims:i,summedDims:u,idDims:c}=r.backend_util.decodeEinsumEquation(s,o.length);r.backend_util.checkEinsumDimSizes(i.length,c,o);const{path:l,steps:p}=r.backend_util.getEinsumComputePath(u,c),h=p.length;let f=null,m=i.length;const b=[];for(let e=0;e<h;++e){for(const t of p[e]){const{permutationIndices:e,expandDims:a}=r.backend_util.getEinsumPermutation(m,c[t]);let s;r.backend_util.isIdentityPermutation(e)?s=o[t]:(s=Object(A.a)({inputs:{x:o[t]},backend:n,attrs:{perm:e}}),b.push(s));const i=s.shape.slice();for(let e=0;e<a.length;++e)i.splice(a[e],0,1);r.util.arraysEqual(s.shape,i)||(s=reshape({inputs:{x:s},backend:n,attrs:{shape:i}}),b.push(s)),null===f?f=s:(f=Object(De.a)({inputs:{a:s,b:f},backend:n}),b.push(f))}e<h-1&&(l[e]>=0&&(f=sum({inputs:{x:f},backend:n,attrs:{axis:l[e]-(i.length-m),keepDims:!1}}),b.push(f)),m--)}for(const e of b)e!==f&&n.disposeIntermediateTensorInfo(e);return f}};const Le={kernelName:r.EluGrad,backendName:"cpu",kernelFunc:function eluGrad(e){const{inputs:t,backend:n}=e,{dy:s,y:o}=t;Object(a.a)([s,o],"eluGrad");const i=new Float32Array(r.util.sizeFromShape(o.shape)),u=n.data.get(o.dataId).values,c=n.data.get(s.dataId).values;for(let e=0;e<u.length;++e){const t=u[e];i[e]=t>=1?c[e]:c[e]*(t+1)}return n.makeTensorInfo(o.shape,"float32",i)}};var ze=n(102);const Ue=r.backend_util.ERF_P,Ve=r.backend_util.ERF_A1,We=r.backend_util.ERF_A2,Ge=r.backend_util.ERF_A3,He=r.backend_util.ERF_A4,qe=r.backend_util.ERF_A5,Ke=Object(u.a)(r.Erf,e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+Ue*n);return t*(1-((((qe*r+He)*r+Ge)*r+We)*r+Ve)*r*Math.exp(-n*n))}),Xe={kernelName:r.Erf,backendName:"cpu",kernelFunc:Ke};var Ye=n(103);function expandDims(e){const{inputs:t,backend:n,attrs:a}=e,{input:s}=t,{dim:o}=a,i=s.shape.length,u=s.shape.slice();let c=o;return o<0&&(r.util.assert(-(i+1)<=o,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),c=i+o+1),u.splice(c,0,1),reshape({inputs:{x:s},backend:n,attrs:{shape:u}})}const Qe={kernelName:r.ExpandDims,backendName:"cpu",kernelFunc:expandDims};var Ze=n(154);const Je=Object(f.a)((e,t)=>e/t),et=Object(V.a)(r.RealDiv,Je),tt={kernelName:r.RealDiv,backendName:"cpu",kernelFunc:et};var nt=n(79);function fftBatch(e,t,n){const a=e.shape,s=a[0],o=a[1],i=n.data.get(e.dataId),u=i.complexTensorInfos.real,c=i.complexTensorInfos.imag,l=[s,o],p=r.util.sizeFromShape(l),h=r.util.getTypedArrayFromDType("float32",p),f=r.util.getTypedArrayFromDType("float32",p);for(let e=0;e<s;e++){const a=Object(ee.a)({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,o]}}),s=Object(ee.a)({inputs:{x:c},backend:n,attrs:{begin:[e,0],size:[1,o]}}),i=Object(ce.a)({inputs:{real:a,imag:s},backend:n}),{real:l,imag:p}=fftImpl(i,t,n),m=r.backend_util.mergeRealAndImagArrays(l,p);for(let t=0;t<o;t++){const n=r.backend_util.getComplexWithIndex(m,t);h[e*o+t]=n.real,f[e*o+t]=n.imag}n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i)}const m=n.makeTensorInfo(l,"float32",h),b=n.makeTensorInfo(l,"float32",f),g=Object(ce.a)({inputs:{real:m,imag:b},backend:n});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),g}function fftImpl(e,t,n){const a=r.util.sizeFromShape(e.shape),s=n.data.get(e.dataId),o=n.data.get(s.complexTensorInfos.real.dataId).values,i=n.data.get(s.complexTensorInfos.imag.dataId).values;if(function isExponentOf2(e){return 0==(e&e-1)}(a)){const s=function fftRadix2(e,t,n,a,s){if(1===n)return{real:e,imag:t};const o=r.backend_util.mergeRealAndImagArrays(e,t),i=n/2,u=r.backend_util.complexWithEvenIndex(o),c=u.real,l=u.imag,p=[c.length],h=s.makeTensorInfo(p,"float32",c),f=s.makeTensorInfo(p,"float32",l),m=Object(ce.a)({inputs:{real:h,imag:f},backend:s}),b=r.backend_util.complexWithOddIndex(o),g=b.real,y=b.imag,x=[g.length],v=s.makeTensorInfo(x,"float32",g),O=s.makeTensorInfo(x,"float32",y),w=Object(ce.a)({inputs:{real:v,imag:O},backend:s}),I=fftRadix2(c,l,i,a,s),S=I.real,T=I.imag,N=[S.length],_=s.makeTensorInfo(N,"float32",S),C=s.makeTensorInfo(N,"float32",T),j=Object(ce.a)({inputs:{real:_,imag:C},backend:s}),E=fftRadix2(g,y,i,a,s),A=E.real,$=E.imag,R=[A.length],F=s.makeTensorInfo(R,"float32",A),D=s.makeTensorInfo(R,"float32",$),M=Object(ce.a)({inputs:{real:F,imag:D},backend:s}),P=r.backend_util.exponents(n,a),B=[P.real.length],L=s.makeTensorInfo(B,"float32",P.real),z=s.makeTensorInfo(B,"float32",P.imag),U=Object(ce.a)({inputs:{real:L,imag:z},backend:s}),V=Object(De.a)({inputs:{a:U,b:M},backend:s}),W=Object(k.a)({inputs:{a:j,b:V},backend:s}),G=Object(nt.a)({inputs:{a:j,b:V},backend:s}),H=Object(he.a)({inputs:{input:W},backend:s}),q=Object(he.a)({inputs:{input:G},backend:s}),K=Imag_imag({inputs:{input:W},backend:s}),X=Imag_imag({inputs:{input:G},backend:s}),Y=concat({inputs:[H,q],backend:s,attrs:{axis:0}}),Q=concat({inputs:[K,X],backend:s,attrs:{axis:0}}),Z=s.data.get(Y.dataId).values,J=s.data.get(Q.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(f),s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(w),s.disposeIntermediateTensorInfo(_),s.disposeIntermediateTensorInfo(C),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(F),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(M),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(K),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(X),s.disposeIntermediateTensorInfo(Y),s.disposeIntermediateTensorInfo(Q),{real:Z,imag:J}}(o,i,a,t,n),u=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(u,"float32",s.real),t=n.makeTensorInfo(u,"float32",s.imag),o=n.makeTensorInfo([],"float32",r.util.createScalarValue(a,"float32")),i=Object(p.a)({inputs:{x:o},backend:n}),c=tt.kernelFunc({inputs:{a:e,b:o},backend:n}),l=tt.kernelFunc({inputs:{a:t,b:i},backend:n}),h=n.data.get(c.dataId).values,f=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(l),{real:h,imag:f}}return s}{const e=function fourierTransformByMatmul(e,t,n){const a=new Float32Array(2*t);for(let s=0;s<t;s++){let o=0,i=0;for(let a=0;a<t;a++){const u=r.backend_util.exponent(s*a,t,n),c=r.backend_util.getComplexWithIndex(e,a);o+=c.real*u.real-c.imag*u.imag,i+=c.real*u.imag+c.imag*u.real}n&&(o/=t,i/=t),r.backend_util.assignToTypedArray(a,o,i,s)}return a}(r.backend_util.mergeRealAndImagArrays(o,i),a,t);return r.backend_util.splitRealAndImagArrays(e)}}const rt={kernelName:r.FFT,backendName:"cpu",kernelFunc:function fft(e){const{inputs:t,backend:n}=e,{input:a}=t,s=r.util.sizeFromShape(a.shape),o=a.shape[a.shape.length-1],i=reshape({inputs:{x:a},backend:n,attrs:{shape:[s/o,o]}}),u=fftBatch(i,!1,n),c=reshape({inputs:{x:u},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),c}};function fill(e){const{backend:t,attrs:n}=e,{shape:a,value:s,dtype:o}=n,i=o||r.util.inferDtype(s),u=r.util.getArrayFromDType(i,r.util.sizeFromShape(a));return function fillValues(e,t,n){e.fill(t)}(u,s),t.makeTensorInfo(a,i,u)}const at={kernelName:r.Fill,backendName:"cpu",kernelFunc:fill};const st={kernelName:r.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,s=n,o=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(a.shape)),[i,u,c,l]=a.shape,p=s.data.get(a.dataId).values;for(let e=0;e<i;e++){const t=e*c*u*l;for(let e=0;e<u;e++){const n=e*(c*l);for(let e=0;e<c;e++){const r=e*l;for(let a=0;a<l;a++){const s=Math.round(c-e-1),i=t+n+r+a;let u=p[i];if(s>=0&&s<c){u=p[t+n+s*l+a]}o[i]=u}}}}return{dataId:s.write(o,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}};var ot=n(155);const it=Object(f.a)((e,t)=>Math.floor(e/t)),ut=Object(V.a)(r.FloorDiv,it,null,"int32"),ct={kernelName:r.FloorDiv,backendName:"cpu",kernelFunc:ut};const lt={kernelName:r.FusedConv2D,backendName:"cpu",kernelFunc:function fusedConv2D(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:c,dataFormat:l,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r;let b=conv2D({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:c,dataFormat:l,dilations:p,dimRoundingMode:h}});if(o){const e=b;b=Object(k.a)({inputs:{a:b,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(f){const e=b;b=applyActivation(n,b,f,i,m),n.disposeIntermediateTensorInfo(e)}return b}};const dt={kernelName:r.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function fusedDepthwiseConv2D(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:c,dataFormat:l,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r;let b=depthwiseConv2dNative({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:c,dataFormat:l,dilations:p,dimRoundingMode:h}});if(o){const e=b;b=Object(k.a)({inputs:{a:b,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(f){const e=b;b=applyActivation(n,b,f,i,m),n.disposeIntermediateTensorInfo(e)}return b}};var pt=n(156);const ht={kernelName:r.GatherNd,backendName:"cpu",kernelFunc:function gatherNd(e){const{inputs:t,backend:n}=e,{params:a,indices:s}=t,o=r.util.sizeFromShape(a.shape),i=s.shape,u=i[i.length-1],[c,l,p,h]=r.backend_util.prepareAndValidate(a,s);if(0===l)return n.makeTensorInfo(c,a.dtype,[]);const f=n.data.get(s.dataId).values,m=n.bufferSync(a),b=Object(pt.a)(f,m,a.dtype,l,u,p,h,a.shape,o);return n.makeTensorInfo(c,a.dtype,b.values)}};var ft=n(157);const mt={kernelName:r.GatherV2,backendName:"cpu",kernelFunc:function gatherV2(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,indices:i}=t,{axis:u,batchDims:c}=s;Object(a.a)([o,i],"gatherV2");const l=r.util.parseAxisParam(u,o.shape)[0],p=n.data.get(i.dataId).values,h=o.shape[l];for(let e=0;e<p.length;++e){const t=p[e];r.util.assert(t<=h-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${h-1}]`)}let f=c;null==c&&(f=0);const m=r.util.sizeFromShape(i.shape),b=r.backend_util.segment_util.collectGatherOpShapeInfo(o,i,l,f),g=reshape({inputs:{x:o},backend:n,attrs:{shape:[b.batchSize,b.outerSize,b.dimSize,b.sliceSize]}}),y=reshape({inputs:{x:i},backend:n,attrs:{shape:[b.batchSize,m/b.batchSize]}}),x=[b.batchSize,b.outerSize,m/b.batchSize,b.sliceSize],v=n.bufferSync(y),O=n.bufferSync(g),k=Object(ft.a)(O,v,x);return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(y),n.makeTensorInfo(b.outputShape,k.dtype,k.values)}};var bt=n(158),gt=n(159);const yt={kernelName:r.IFFT,backendName:"cpu",kernelFunc:function ifft(e){const{inputs:t,backend:n}=e,{input:a}=t,s=r.util.sizeFromShape(a.shape),o=a.shape[a.shape.length-1],i=reshape({inputs:{x:a},backend:n,attrs:{shape:[s/o,o]}}),u=fftBatch(i,!0,n),c=reshape({inputs:{x:u},backend:n,attrs:{shape:a.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(u),c}},xt=Object(u.a)(r.IsFinite,e=>Number.isFinite(e)?1:0,"bool"),vt={kernelName:r.IsFinite,backendName:"cpu",kernelFunc:xt},Ot=Object(u.a)(r.IsInf,e=>Math.abs(e)===1/0?1:0,"bool"),kt={kernelName:r.IsInf,backendName:"cpu",kernelFunc:Ot},wt=Object(u.a)(r.IsNan,e=>Number.isNaN(e)?1:0,"bool"),It={kernelName:r.IsNan,backendName:"cpu",kernelFunc:wt};var St=n(160),Tt=n(161),Nt=n(162);const _t={kernelName:r.LinSpace,backendName:"cpu",kernelFunc:function linSpace(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=Object(Nt.a)(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}};var Ct=n(163);const jt=Object(u.a)(r.Log1p,e=>Math.log1p(e)),Et={kernelName:r.Log1p,backendName:"cpu",kernelFunc:jt},At=Object(f.a)((e,t)=>e&&t),$t=Object(V.a)(r.LogicalAnd,At,null,"bool"),Rt={kernelName:r.LogicalAnd,backendName:"cpu",kernelFunc:$t},Ft=Object(u.a)(r.LogicalNot,e=>e?0:1,"bool"),Dt={kernelName:r.LogicalNot,backendName:"cpu",kernelFunc:Ft},Mt=Object(f.a)((e,t)=>e||t),Pt=Object(V.a)(r.LogicalOr,Mt,null,"bool"),Bt={kernelName:r.LogicalOr,backendName:"cpu",kernelFunc:Pt};const Lt={kernelName:r.LRN,backendName:"cpu",kernelFunc:function lRN(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{depthRadius:i,bias:u,alpha:c,beta:l}=s;Object(a.a)(o,"LRN");const p=o.shape[3],h=p-1,f=n.data.get(o.dataId).values,m=r.util.sizeFromShape(o.shape),b=new Float32Array(m);function sumAcrossChannels(e){const t=e%p;let n=e-t+Math.max(0,t-i);const r=e-t+Math.min(t+i,h);let a=0;for(;n<=r;n++){const e=f[n];a+=e*e}return a}for(let e=0;e<m;e++){const t=sumAcrossChannels(e),n=f[e]*Math.pow(u+c*t,-l);b[e]=n}return n.makeTensorInfo(o.shape,o.dtype,b)}};const zt={kernelName:r.LRNGrad,backendName:"cpu",kernelFunc:function lRNGrad(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,y:i,dy:u}=t,{depthRadius:c,bias:l,alpha:p,beta:h}=s;Object(a.a)(u,"LRNGrad");const f=r.util.sizeFromShape(u.shape),m=u.shape[3],b=n.data.get(u.dataId).values,g=n.data.get(o.dataId).values,y=n.data.get(i.dataId).values,x=new Float32Array(f),v=f;for(let e=0;e<v;e++){const t=e%m,n=e-t+Math.max(0,t-c),r=e-t+Math.min(m,t+c+1);let a=0;for(let e=n;e<r;e++)a+=Math.pow(g[e],2);a=p*a+l;for(let t=n;t<r;t++){let n=-2*p*h*g[t]*y[e]/a;e===t&&(n+=Math.pow(a,-h)),n*=b[e],x[t]+=n}}return n.makeTensorInfo(u.shape,o.dtype,x)}};var Ut=n(164),Vt=n(104);function max(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{reductionIndices:i,keepDims:u}=s,c=n;let l=o.shape;const p=l.length,h=r.util.parseAxisParam(i,l);let f=h;const m=r.backend_util.getAxesPermutation(f,p);let b=c.data.get(o.dataId).values;if(null!=m){const e=new Array(p);for(let t=0;t<e.length;t++)e[t]=l[m[t]];b=Object(Vt.a)(b,l,o.dtype,m,e),f=r.backend_util.getInnerMostAxes(f.length,p),l=e}Object(a.a)(o,"max"),r.backend_util.assertAxesAreInnerMostDims("max",f,p);const[g,y]=r.backend_util.computeOutAndReduceShapes(l,f),x=r.util.sizeFromShape(y),v=Object(Ut.a)(b,x,g,o.dtype),O=c.write(v,g,o.dtype);let k=g;if(u){k=r.backend_util.expandShapeToKeepDim(g,h)}return{dataId:O,shape:k,dtype:o.dtype}}const Wt={kernelName:r.Max,backendName:"cpu",kernelFunc:max};var Gt=n(165);const Ht={kernelName:r.MaxPool,backendName:"cpu",kernelFunc:function maxPool(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t;Object(a.a)(o,"maxPool");const{filterSize:i,strides:u,pad:c,dimRoundingMode:l}=s;r.util.assert(r.backend_util.eitherStridesOrDilationsAreOne(u,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${u} and dilations '1'`);const h=r.backend_util.computePool2DInfo(o.shape,i,u,1,c,l);let f;if(1===h.filterWidth&&1===h.filterHeight&&r.util.arraysEqual(h.inShape,h.outShape))f=Object(p.a)({inputs:{x:o},backend:n});else{const e=n.data.get(o.dataId).values,t=r.util.computeStrides(o.shape),a=pool(e,o.shape,o.dtype,t,h,"max");f=n.makeTensorInfo(h.outShape,o.dtype,a.values)}return f}};const qt={kernelName:r.MaxPool3D,backendName:"cpu",kernelFunc:function maxPool3D(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{filterSize:i,strides:u,pad:c,dimRoundingMode:l,dataFormat:p}=s;Object(a.a)(o,"maxPool3d");const h=r.backend_util.computePool3DInfo(o.shape,i,u,1,c,l,p),f=pool3d(n.data.get(o.dataId).values,o.shape,o.dtype,r.util.computeStrides(o.shape),h,"max");return n.makeTensorInfo(f.shape,"float32",f.values)}};const Kt={kernelName:r.MaxPool3DGrad,backendName:"cpu",kernelFunc:function maxPool3DGrad(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i}=t,{filterSize:u,strides:c,pad:l,dimRoundingMode:p}=s;Object(a.a)([o,i],"maxPool3DGrad");const h=r.backend_util.computePool3DInfo(i.shape,u,c,1,l,p),f=function maxPool3dPositions(e,t){const n=Object(r.buffer)(t.outShape,"int32"),a=t.strideDepth,s=t.strideHeight,o=t.strideWidth,i=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,p=t.effectiveFilterHeight,h=t.effectiveFilterWidth,f=t.padInfo.front,m=t.padInfo.top,b=t.padInfo.left;for(let r=0;r<t.batchSize;++r)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const x=y*a-f;let v=x;for(;v<0;)v+=i;const O=Math.min(t.inDepth,l+x);for(let a=0;a<t.outHeight;++a){const l=a*s-m;let f=l;for(;f<0;)f+=u;const k=Math.min(t.inHeight,p+l);for(let s=0;s<t.outWidth;++s){const m=s*o-b;let w=m;for(;w<0;)w+=c;const I=Math.min(t.inWidth,h+m);let S=Number.NEGATIVE_INFINITY,T=-1;for(let t=v;t<O;t+=i){const n=t-x;for(let a=f;a<k;a+=u){const s=a-l;for(let o=w;o<I;o+=c){const i=o-m,u=e.get(r,t,a,o,g);u>=S&&(S=u,T=n*p*h+s*p+i)}}}n.set(T,r,y,a,s,g)}}}return n}(n.bufferSync(i),h),m=h.strideDepth,b=h.strideHeight,g=h.strideWidth,y=h.dilationDepth,x=h.dilationHeight,v=h.dilationWidth,O=h.effectiveFilterDepth,k=h.effectiveFilterHeight,w=h.effectiveFilterWidth,I=O-1-h.padInfo.front,S=w-1-h.padInfo.left,T=k-1-h.padInfo.top,N=Object(r.buffer)(i.shape,"float32"),_=n.bufferSync(o);for(let e=0;e<h.batchSize;++e)for(let t=0;t<h.inChannels;++t)for(let n=0;n<h.inDepth;++n)for(let r=0;r<h.inHeight;++r)for(let a=0;a<h.inWidth;++a){const s=n-I,o=r-T,i=a-S;let u=0;for(let n=0;n<O;n+=y){const r=(s+n)/m;if(!(r<0||r>=h.outDepth||Math.floor(r)!==r))for(let a=0;a<k;a+=x){const s=(o+a)/b;if(!(s<0||s>=h.outHeight||Math.floor(s)!==s))for(let o=0;o<w;o+=v){const c=(i+o)/g;if(c<0||c>=h.outWidth||Math.floor(c)!==c)continue;const l=O*k*w-1-f.get(e,r,s,c,t)===n*k*w+a*w+o?1:0;if(0===l)continue;u+=_.get(e,r,s,c,t)*l}}}N.set(u,e,n,r,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}};const Xt={kernelName:r.MaxPoolGrad,backendName:"cpu",kernelFunc:function maxPoolGrad(e){const{inputs:t,backend:n,attrs:s}=e,{dy:o,input:i,output:u}=t,c=i;Object(a.a)([i,u],"maxPoolGrad");const{filterSize:l,strides:p,pad:h,dimRoundingMode:f}=s,m=r.backend_util.computePool2DInfo(c.shape,l,p,1,h,f),b=n.data.get(c.dataId).values,g=Object(r.buffer)(m.outShape,c.dtype,maxPoolPositions(b,c.shape,c.dtype,m).values),y=m.strideHeight,x=m.strideWidth,v=m.dilationHeight,O=m.dilationWidth,k=m.effectiveFilterHeight,w=m.effectiveFilterWidth,I=w-1-m.padInfo.left,S=k-1-m.padInfo.top,T=Object(r.buffer)(c.shape,"float32"),N=n.data.get(o.dataId).values,_=Object(r.buffer)(o.shape,"float32",N);for(let e=0;e<m.batchSize;++e)for(let t=0;t<m.inChannels;++t)for(let n=0;n<m.inHeight;++n)for(let r=0;r<m.inWidth;++r){const a=n-S,s=r-I;let o=0;for(let n=0;n<k;n+=v){const r=(a+n)/y;if(!(r<0||r>=m.outHeight||Math.floor(r)!==r))for(let a=0;a<w;a+=O){const i=(s+a)/x;if(i<0||i>=m.outWidth||Math.floor(i)!==i)continue;const u=k*w-1-g.get(e,r,i,t)===n*w+a?1:0;if(0===u)continue;o+=_.get(e,r,i,t)*u}}T.set(o,e,n,r,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}};const Yt={kernelName:r.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:o,strides:i,pad:u,includeBatchInIndex:c}=t,l=n;Object(a.a)(s,"MaxPoolWithArgmax");const p=l.data.get(s.dataId).values,h=r.backend_util.computePool2DInfo(s.shape,o,i,[1,1],u),[f,m]=function maxPoolWithArgmaxImpl(e,t,n,a,s){const o=pool(e,0,n,r.util.computeStrides(t),s,"max"),i=maxPoolPositions(e,t,n,s,!0,a);return[o.values,i.values]}(p,s.shape,s.dtype,c,h),b=l.write(f,h.outShape,s.dtype),g=l.write(m,h.outShape,s.dtype);return[{dataId:b,shape:h.outShape,dtype:s.dtype},{dataId:g,shape:h.outShape,dtype:"int32"}]}};const Qt={kernelName:r.Mean,backendName:"cpu",kernelFunc:function Mean_mean(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{axis:o,keepDims:i}=a,u=r.util.parseAxisParam(o,s.shape),c=r.backend_util.computeOutAndReduceShapes(s.shape,u)[1],l=r.util.sizeFromShape(c),p=[],h=n.makeTensorInfo([],"float32",new Float32Array([l]));p.push(h);const f=Object(se.a)({inputs:{x:s},backend:n,attrs:{dtype:"float32"}});p.push(f);const m=et({inputs:{a:f,b:h},backend:n});p.push(m);const b=sum({inputs:{x:m},backend:n,attrs:{axis:o,keepDims:i}});return p.forEach(e=>n.disposeIntermediateTensorInfo(e)),b}};const Zt={kernelName:r.Min,backendName:"cpu",kernelFunc:function min(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{axis:i,keepDims:u}=s;Object(a.a)(o,"min");const c=r.util.parseAxisParam(i,o.shape);let l=c;const p=r.backend_util.getAxesPermutation(l,o.shape.length);let h=o;null!=p&&(h=Object(A.a)({inputs:{x:o},backend:n,attrs:{perm:p}}),l=r.backend_util.getInnerMostAxes(l.length,o.shape.length)),r.backend_util.assertAxesAreInnerMostDims("min",l,h.shape.length);const[f,m]=r.backend_util.computeOutAndReduceShapes(h.shape,l),b=r.util.sizeFromShape(m),g=r.util.makeZerosTypedArray(r.util.sizeFromShape(f),h.dtype),y=n.data.get(h.dataId).values;for(let e=0;e<g.length;++e){const t=e*b;let n=y[t];for(let e=0;e<b;++e){const r=y[t+e];(Number.isNaN(r)||r<n)&&(n=r)}g[e]=n}null!=p&&n.disposeIntermediateTensorInfo(h);const x=n.makeTensorInfo(f,h.dtype,g);if(u){const e=reshape({inputs:{x:x},backend:n,attrs:{shape:r.backend_util.expandShapeToKeepDim(f,c)}});return n.disposeIntermediateTensorInfo(x),e}return x}};var Jt=n(166);const en={kernelName:r.MirrorPad,backendName:"cpu",kernelFunc:function mirrorPad(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{paddings:i,mode:u}=s;Object(a.a)(o,"mirrorPad");const c=i.map((e,t)=>e[0]+o.shape[t]+e[1]),l=i.map(e=>e[0]),p=i.map((e,t)=>e[0]+o.shape[t]),h="reflect"===u?0:1,f=n.data.get(o.dataId).values,m=o.shape.length,b=r.util.computeStrides(o.shape),g=r.util.sizeFromShape(c),y=c.length,x=r.util.computeStrides(c),v=r.util.getTypedArrayFromDType(o.dtype,g);for(let e=0;e<g;e++){let t=r.util.indexToLoc(e,y,x);for(let e=0;e<y;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-h:t[e]>=p[e]&&(t[e]=2*(p[e]-1)-t[e]+h);t=t.map((e,t)=>e-l[t]);const n=r.util.locToIndex(t,m,b);v[e]=f[n]}return{dataId:n.write(v,c,o.dtype),shape:c,dtype:o.dtype}}},tn=Object(f.a)((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),nn=Object(V.a)(r.Mod,tn),rn={kernelName:r.Mod,backendName:"cpu",kernelFunc:nn};var an=n(109);function softmax(e){const{inputs:t,backend:n,attrs:a}=e,{logits:s}=t,{dim:o}=a,i=s.shape.length;let u=o;if(-1===u&&(u=i-1),u!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${u}`);const c=r.util.parseAxisParam([u],s.shape),l=max({inputs:{x:s},backend:n,attrs:{reductionIndices:c,keepDims:!1}}),p=r.backend_util.expandShapeToKeepDim(l.shape,c),h=reshape({inputs:{x:l},backend:n,attrs:{shape:p}}),f=Object(nt.a)({inputs:{a:s,b:h},backend:n}),m=Object(Ye.a)({inputs:{x:f},backend:n}),b=sum({inputs:{x:m},backend:n,attrs:{axis:c,keepDims:!1}}),g=reshape({inputs:{x:b},backend:n,attrs:{shape:p}}),y=et({inputs:{a:m,b:g},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(g),y}const sn={kernelName:r.Softmax,backendName:"cpu",kernelFunc:softmax};const on={kernelName:r.Multinomial,backendName:"cpu",kernelFunc:function multinomial(e){const{inputs:t,backend:n,attrs:s}=e,{logits:o}=t,{numSamples:i,seed:u,normalized:c}=s;Object(a.a)(o,"multinomial");const l=c?o:softmax({inputs:{logits:o},backend:n,attrs:{dim:-1}}),p=l.shape[0],h=l.shape[1],f=n.data.get(l.dataId).values,m=[p,i],b=r.util.makeZerosTypedArray(r.util.sizeFromShape(m),"int32");for(let e=0;e<p;++e){const t=e*h,n=new Float32Array(h-1);n[0]=f[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+f[t+e];const r=an.alea(u.toString()),a=e*i;for(let e=0;e<i;++e){const t=r();b[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){b[a+e]=r;break}}}return c||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(m,"int32",b)}};var un=n(167);const cn=r.kernel_impls.nonMaxSuppressionV3Impl;const ln={kernelName:r.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function nonMaxSuppressionV3(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:c}=r;Object(a.a)(s,"NonMaxSuppression");const l=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values,{selectedIndices:h}=cn(l,p,i,u,c);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},dn=r.kernel_impls.nonMaxSuppressionV4Impl;const pn={kernelName:r.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function nonMaxSuppressionV4(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:c,padToMaxOutputSize:l}=r;Object(a.a)(s,"NonMaxSuppressionPadded");const p=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,{selectedIndices:f,validOutputs:m}=dn(p,h,i,u,c,l);return[n.makeTensorInfo([f.length],"int32",new Int32Array(f)),n.makeTensorInfo([],"int32",new Int32Array([m]))]}},hn=r.kernel_impls.nonMaxSuppressionV5Impl;const fn={kernelName:r.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function nonMaxSuppressionV5(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:c,softNmsSigma:l}=r;Object(a.a)(s,"NonMaxSuppressionWithScore");const p=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,f=i,m=u,b=c,g=l,{selectedIndices:y,selectedScores:x}=hn(p,h,f,m,b,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};var mn=n(168);const bn={kernelName:r.OneHot,backendName:"cpu",kernelFunc:function oneHot(e){const{inputs:t,backend:n,attrs:s}=e,{indices:o}=t,{depth:i,onValue:u,offValue:c}=s;Object(a.a)(o,"oneHot");const l=r.util.sizeFromShape(o.shape),p=new Float32Array(l*i);p.fill(c);const h=n.data.get(o.dataId).values;for(let e=0;e<l;++e)h[e]>=0&&h[e]<i&&(p[e*i+h[e]]=u);return n.makeTensorInfo([...o.shape,i],"int32",p)}};function zerosLike(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=Object(he.a)({inputs:{input:r},backend:n}),t=zerosLike({inputs:{x:e},backend:n}),a=Imag_imag({inputs:{input:r},backend:n}),s=zerosLike({inputs:{x:a},backend:n}),o=Object(ce.a)({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return fill({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const gn={kernelName:r.ZerosLike,backendName:"cpu",kernelFunc:zerosLike};const yn={kernelName:r.OnesLike,backendName:"cpu",kernelFunc:function onesLike(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===r.dtype){const e=Object(he.a)({inputs:{input:r},backend:n}),t=onesLike({inputs:{x:e},backend:n}),a=Imag_imag({inputs:{input:r},backend:n}),s=zerosLike({inputs:{x:a},backend:n}),o=Object(ce.a)({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return fill({backend:n,attrs:{shape:r.shape,value:1,dtype:r.dtype}})}};function pack(e){const{inputs:t,backend:n,attrs:a}=e,{axis:s}=a;if(1===t.length)return expandDims({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const o=t[0].shape,i=t[0].dtype;t.forEach(e=>{r.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),r.util.assert(i===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const u=[],c=concat({inputs:t.map(e=>{const t=expandDims({inputs:{input:e},backend:n,attrs:{dim:s}});return u.push(t),t}),backend:n,attrs:{axis:s}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}const xn={kernelName:r.Pack,backendName:"cpu",kernelFunc:pack};const vn={kernelName:r.PadV2,backendName:"cpu",kernelFunc:function padV2(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{paddings:i,constantValue:u}=s;Object(a.a)(o,"pad");const c=i.map((e,t)=>e[0]+o.shape[t]+e[1]),l=i.map(e=>e[0]),p=n.data.get(o.dataId).values,h=r.util.sizeFromShape(o.shape),f=o.shape.length,m=r.util.computeStrides(o.shape),b=r.util.sizeFromShape(c),g=c.length,y=r.util.computeStrides(c),x=r.util.getTypedArrayFromDType(o.dtype,b);0!==u&&x.fill(u);for(let e=0;e<h;e++){const t=r.util.indexToLoc(e,f,m).map((e,t)=>e+l[t]);x[r.util.locToIndex(t,g,y)]=p[e]}return{dataId:n.write(x,c,o.dtype),shape:c,dtype:o.dtype}}},On=Object(f.a)((e,t)=>Math.pow(e,t)),kn=Object(V.a)(r.Pow,On),wn={kernelName:r.Pow,backendName:"cpu",kernelFunc:kn};var In=n(169),Sn=n(170);const Tn={kernelName:r.Range,backendName:"cpu",kernelFunc:function range(e){const{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:o}=n,i=Object(Sn.a)(r,a,o,s);return t.makeTensorInfo([i.length],s,i)}},Nn=Object(u.a)(r.Reciprocal,e=>1/e),_n={kernelName:r.Reciprocal,backendName:"cpu",kernelFunc:Nn};const Cn={kernelName:r.ResizeBilinear,backendName:"cpu",kernelFunc:function resizeBilinear(e){const{inputs:t,backend:n,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:u,size:c}=s;Object(a.a)(o,"resizeBilinear");const l=r.util.computeStrides(o.shape),[p,h]=c,[f,m,b,g]=o.shape,y=n.data.get(o.dataId).values,x=new Float32Array(r.util.sizeFromShape([f,p,h,g])),v=[i&&p>1?m-1:m,i&&h>1?b-1:b],O=[i&&p>1?p-1:p,i&&h>1?h-1:h];let k=0;const w=v[0]/O[0],I=v[1]/O[1];for(let e=0;e<f;e++)for(let t=0;t<p;t++){let n;n=u?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(m-1,Math.ceil(n)),o=e*l[0]+r*l[1],i=e*l[0]+s*l[1];for(let e=0;e<h;e++){let t;t=u?I*(e+.5)-.5:I*e;const n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(b-1,Math.ceil(t)),c=o+n*l[2],p=i+n*l[2],h=o+s*l[2],f=i+s*l[2];for(let e=0;e<g;e++){const t=y[c+e],n=y[p+e],s=t+(y[h+e]-t)*r,o=s+(n+(y[f+e]-n)*r-s)*a;x[k++]=o}}}return n.makeTensorInfo([f,p,h,g],"float32",x)}};const jn={kernelName:r.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function resizeBilinearGrad(e){const{inputs:t,backend:n,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:u}=s;Object(a.a)([i,o],"resizeBilinearGrad");const c=r.util.computeStrides(o.shape),[l,p,h,f]=o.shape,[,m,b]=i.shape,g=new Float32Array(l*p*h*f),y=[u&&m>1?p-1:p,u&&b>1?h-1:h],x=[u&&m>1?m-1:m,u&&b>1?b-1:b],v=y[0]/x[0],O=y[1]/x[1],k=n.data.get(i.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*c[0];for(let e=0;e<m;e++){const n=e*v,r=Math.floor(n),a=Math.min(Math.ceil(n),p-1),s=t+r*c[1],o=t+a*c[1],i=n-r,u=1-i;for(let e=0;e<b;e++){const t=e*O,n=Math.floor(t),r=Math.min(Math.ceil(t),h-1),a=t-n,l=1-a,p=s+n*c[2],m=s+r*c[2],b=o+n*c[2],y=o+r*c[2],x=u*l,v=u*a,I=i*l,S=i*a;for(let e=0;e<f;e++){const t=k[w++];g[p+e]+=t*x,g[m+e]+=t*v,g[b+e]+=t*I,g[y+e]+=t*S}}}}return n.makeTensorInfo([l,h,p,f],"float32",g)}};const En={kernelName:r.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function resizeNearestNeighbor(e){const{inputs:t,backend:n,attrs:s}=e,{images:o}=t,{alignCorners:i,halfPixelCenters:u,size:c}=s;Object(a.a)(o,"resizeNearestNeighbor");const l=r.util.computeStrides(o.shape),[p,h]=c,[f,m,b,g]=o.shape,y=n.data.get(o.dataId).values,x=new Float32Array(f*p*h*g),v=[i&&p>1?m-1:m,i&&h>1?b-1:b],O=[i&&p>1?p-1:p,i&&h>1?h-1:h],k=v[0]/O[0],w=v[1]/O[1];let I=0;for(let e=0;e<f;e++){const t=e*l[0];for(let e=0;e<p;e++){const n=u?k*(e+.5):k*e;let r=Math.min(m-1,i?Math.round(n):Math.floor(n));u&&(r=Math.max(0,r));const a=t+r*l[1];for(let e=0;e<h;e++){const t=u?w*(e+.5):w*e;let n=Math.min(b-1,i?Math.round(t):Math.floor(t));u&&(n=Math.max(0,n));const r=a+n*l[2];for(let e=0;e<g;e++){const t=y[r+e];x[I++]=t}}}}return n.makeTensorInfo([f,p,h,g],o.dtype,x)}};const An={kernelName:r.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function resizeNearestNeighborGrad(e){const{inputs:t,backend:n,attrs:s}=e,{images:o,dy:i}=t,{alignCorners:u}=s;Object(a.a)([i,o],"resizeNearestNeighborGrad");const c=r.util.computeStrides(o.shape),l=r.util.computeStrides(i.shape),[p,h,f,m]=o.shape,[,b,g]=i.shape,y=new Float32Array(p*h*f*m),x=n.data.get(i.dataId).values,v=[u&&b>1?h-1:h,u&&g>1?f-1:f],O=[u&&b>1?b-1:b,u&&g>1?g-1:g],k=v[0]/O[0],w=v[1]/O[1],I=1/k,S=1/w,T=2*Math.ceil(I)+2,N=2*Math.ceil(S)+2;for(let e=0;e<p;e++){const t=e*c[0];for(let e=0;e<h;e++){const n=t+e*c[1],r=Math.floor(e*I),a=Math.floor(r-T/2);for(let r=0;r<f;r++){const s=n+r*c[2],o=Math.floor(r*S),i=Math.floor(o-N/2);for(let n=0;n<m;n++){let o=0;for(let s=0;s<T;s++){const c=s+a;if(c<0||c>=b)continue;const p=t+c*l[1],m=c*k;if(e===Math.min(h-1,u?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+i;if(t<0||t>=g)continue;const a=p+t*l[2],s=t*w;r===Math.min(f-1,u?Math.round(s):Math.floor(s))&&(o+=x[a+n])}}y[s+n]=o}}}}return n.makeTensorInfo(o.shape,o.dtype,y)}};const $n={kernelName:r.Reverse,backendName:"cpu",kernelFunc:function Reverse_reverse(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{dims:i}=s;Object(a.a)(o,"reverse");const u=o.shape.length,c=r.util.parseAxisParam(i,o.shape);if(0===u)return Object(p.a)({inputs:{x:o},backend:n});const l=new r.TensorBuffer(o.shape,o.dtype),h=n.bufferSync(o);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();c.forEach(e=>n[e]=o.shape[e]-1-n[e]),l.set(h.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},Rn={kernelName:r.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:a}=e,{radians:s,fillValue:o,center:i}=t,u=n,c=r.util.getTypedArrayFromDType(a.dtype,r.util.sizeFromShape(a.shape)),[l,p,h,f]=a.shape,[m,b]=r.backend_util.getImageCenter(i,p,h),g=Math.sin(s),y=Math.cos(s),x=u.data.get(a.dataId).values;for(let e=0;e<l;e++){const t=e*h*p*f;for(let e=0;e<p;e++){const n=e*(h*f);for(let r=0;r<h;r++){const a=r*f;for(let s=0;s<f;s++){const i=[l,e,r,s],u=i[2],v=i[1];let O=(u-m)*y-(v-b)*g,k=(u-m)*g+(v-b)*y;O=Math.round(O+m),k=Math.round(k+b);let w=o;if("number"!=typeof o&&(w=3===s?255:o[s]),O>=0&&O<h&&k>=0&&k<p){w=x[t+k*(h*f)+O*f+s]}c[t+n+a+s]=w}}}}return{dataId:u.write(c,a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},Fn=Object(u.a)(r.Round,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),Dn={kernelName:r.Round,backendName:"cpu",kernelFunc:Fn};var Mn=n(171);function scatterImpl(e,t,n,a,s,o,i,u,c,l){const p=[a/s,s],h=e.values,f=t.values;if(0===a)return Object(r.buffer)(n,t.dtype);const m=Object(r.buffer)(p,t.dtype);m.values.fill(c);for(let e=0;e<o;e++){const r=[];let o=0;for(let t=0;t<i;t++){const n=h[e*i+t];r.push(n),o+=n*u[t]}if(o<0||o>=a/s)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<s;n++)l?m.values[o*s+n]+=f[e*s+n]:m.values[o*s+n]=0===t.rank?f[0]:f[e*s+n]}return m}const Pn={kernelName:r.ScatterNd,backendName:"cpu",kernelFunc:function scatterNd(e){const{inputs:t,backend:n,attrs:a}=e,{indices:s,updates:o}=t,{shape:i}=a,{sliceRank:u,numUpdates:c,sliceSize:l,strides:p,outputSize:h}=r.backend_util.calculateShapes(o,s,i),f=scatterImpl(n.bufferSync(s),n.bufferSync(o),i,h,l,c,u,p,0,!0);return n.makeTensorInfo(i,f.dtype,f.values)}};const Bn={kernelName:r.Select,backendName:"cpu",kernelFunc:function Select_select(e){const{inputs:t,backend:n}=e,{condition:s,t:o,e:i}=t;Object(a.a)([s,o,i],"select");const u=s.shape.length,c=n.data.get(s.dataId).values,l=n.data.get(o.dataId).values,p=n.data.get(i.dataId).values,h=Object(r.upcastType)(o.dtype,i.dtype),f=r.util.makeZerosTypedArray(r.util.sizeFromShape(o.shape),h);let m=0;const b=0===u||u>1||1===o.shape.length?1:r.util.sizeFromShape(o.shape.slice(1));for(let e=0;e<c.length;e++)for(let t=0;t<b;t++)1===c[e]?f[m++]=l[e]:f[m++]=p[e];return n.makeTensorInfo(o.shape,h,f)}},Ln=r.backend_util.SELU_SCALEALPHA,zn=r.backend_util.SELU_SCALE,Un=Object(u.a)(r.Selu,e=>e>=0?zn*e:Ln*(Math.exp(e)-1)),Vn={kernelName:r.Selu,backendName:"cpu",kernelFunc:Un},Wn=Object(u.a)(r.Sign,e=>e<0?-1:e>0?1:0),Gn={kernelName:r.Sign,backendName:"cpu",kernelFunc:Wn},Hn=Object(u.a)(r.Sin,e=>Math.sin(e)),qn={kernelName:r.Sin,backendName:"cpu",kernelFunc:Hn},Kn=Object(u.a)(r.Sinh,e=>Math.sinh(e)),Xn={kernelName:r.Sinh,backendName:"cpu",kernelFunc:Kn},Yn=Math.log(1.1920928955078125e-7)+2,Qn=Object(u.a)(r.Softplus,e=>{const t=e>-Yn,n=e<Yn,r=Math.exp(e);let a;return a=n?r:t?e:Math.log(1+r),a}),Zn={kernelName:r.Softplus,backendName:"cpu",kernelFunc:Qn};const Jn={kernelName:r.SpaceToBatchND,backendName:"cpu",kernelFunc:function spaceToBatchND(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{blockShape:i,paddings:u}=s;Object(a.a)([o],"spaceToBatchND");const c=r.util.sizeFromShape(i),l=[[0,0]];l.push(...u);for(let e=1+i.length;e<o.shape.length;++e)l.push([0,0]);const p=vn.kernelFunc({inputs:{x:o},backend:n,attrs:{paddings:l,constantValue:0}}),h=r.backend_util.getReshaped(p.shape,i,c,!1),f=r.backend_util.getPermuted(h.length,i.length,!1),m=r.backend_util.getReshapedPermuted(p.shape,i,c,!1),b=reshape({inputs:{x:p},backend:n,attrs:{shape:h}}),g={x:b},y={perm:f},x=Object(A.a)({inputs:g,backend:n,attrs:y}),v=reshape({inputs:{x:x},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(x),v}};var er=n(172);const tr={kernelName:r.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function sparseFillEmptyRows(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error("Dense shape must be a vector, saw:\n        "+s.shape);if(2!==r.shape.length)throw new Error("Indices must be a matrix, saw:\n        "+r.shape);if(1!==a.shape.length)throw new Error("Values must be a vector, saw:\n        "+a.shape);if(0!==o.shape.length)throw new Error("Default value must be a scalar, saw:\n        "+o.shape);const i=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,l=n.data.get(o.dataId).values[0],[p,h,f,m,b]=Object(er.a)(i,r.shape,r.dtype,u,a.dtype,c,l);return[n.makeTensorInfo(h,r.dtype,p),n.makeTensorInfo([h[0]],a.dtype,f),n.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(e=>Number(e)))),n.makeTensorInfo([b.length],r.dtype,new Int32Array(b))]}};var nr=n(173);const rr={kernelName:r.SparseReshape,backendName:"cpu",kernelFunc:function sparseReshape(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error("Input indices should be a matrix but received shape\n        "+r.shape);if(1!==a.shape.length)throw new Error("Input shape should be a vector but received shape\n        "+a.shape);if(1!==s.shape.length)throw new Error("Target shape should be a vector but received shape "+s.shape);const o=Array.from(n.data.get(a.dataId).values),i=n.data.get(r.dataId).values,u=Array.from(n.data.get(s.dataId).values),[c,l,p]=Object(nr.a)(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(l,r.dtype,c),n.makeTensorInfo([p.length],s.dtype,new Int32Array(p))]}};var ar=n(106);const sr={kernelName:r.SparseSegmentMean,backendName:"cpu",kernelFunc:function sparseSegmentMean(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error("Indices should be a vector but received shape\n          "+a.shape);if(1!==s.shape.length)throw new Error("Segment ids should be a vector but received shape\n          "+s.shape);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[c,l]=Object(ar.a)(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(l,r.dtype,c)}};const ir={kernelName:r.SparseSegmentSum,backendName:"cpu",kernelFunc:function sparseSegmentSum(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error("Indices should be a vector but received shape\n         "+a.shape);if(1!==s.shape.length)throw new Error("Segment ids should be a vector but received shape\n         "+s.shape);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[c,l]=Object(ar.a)(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(l,r.dtype,c)}};const ur={kernelName:r.SparseToDense,backendName:"cpu",kernelFunc:function sparseToDense(e){const{inputs:t,backend:n,attrs:a}=e,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:u}=a,{sliceRank:c,numUpdates:l,sliceSize:p,strides:h,outputSize:f}=r.backend_util.calculateShapes(o,s,u),m=scatterImpl(n.bufferSync(s),n.bufferSync(o),u,f,p,l,c,h,n.data.get(i.dataId).values[0],!1);return n.makeTensorInfo(u,m.dtype,m.values)}};const cr={kernelName:r.SplitV,backendName:"cpu",kernelFunc:function splitV(e){const{inputs:t,backend:n,attrs:a}=e,{x:s}=t,{numOrSizeSplits:o,axis:i}=a,u=r.util.parseAxisParam(i,s.shape)[0],c=r.backend_util.prepareSplitSize(s,o,u),l=new Array(s.shape.length).fill(0),p=s.shape.slice();return c.map(e=>{const t=[...p];t[u]=e;const r=Object(ee.a)({inputs:{x:s},backend:n,attrs:{begin:l,size:t}});return l[u]+=e,r})}};var lr=n(174);const dr={kernelName:r.Square,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;Object(a.a)(n,"square");const s=r.data.get(n.dataId).values,o=new Float32Array(s.length);for(let e=0;e<s.length;++e){const t=s[e];o[e]=t*t}return{dataId:r.write(o,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}};var pr=n(175);const hr=Object(u.a)(r.Step,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),fr={kernelName:r.Step,backendName:"cpu",kernelFunc:hr};var mr=n(176);const br={kernelName:r.StridedSlice,backendName:"cpu",kernelFunc:function stridedSlice(e){const{inputs:t,backend:n,attrs:s}=e,{x:o}=t,{begin:i,end:u,strides:c,beginMask:l,endMask:p,ellipsisMask:h,newAxisMask:f,shrinkAxisMask:m}=s;Object(a.a)(o,"stridedSlice");const{finalShapeSparse:b,finalShape:g,isIdentity:y,sliceDim0:x,isSimpleSlice:v,begin:O,end:k,strides:w}=r.slice_util.sliceInfo(o.shape,i,u,c,l,p,h,f,m);let I;if(y)I=reshape({inputs:{x:o},backend:n,attrs:{shape:g}});else if(x||v){r.util.assert(o.shape.length>=1,()=>"Input must have rank at least 1, got: "+o.shape.length);const e=r.slice_util.computeOutShape(O,k,w),t=Object(ee.a)({inputs:{x:o},backend:n,attrs:{begin:O,size:e}});I=reshape({inputs:{x:t},backend:n,attrs:{shape:g}}),n.disposeIntermediateTensorInfo(t)}else{const e=n.bufferSync(o),t=Object(mr.a)(b,e,w,O);I=n.makeTensorInfo(g,t.dtype,t.values)}return I}};var gr=n(177);const yr={kernelName:r.StringNGrams,backendName:"cpu",kernelFunc:function stringNGrams(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:c}=r,{data:l,dataSplits:p}=t,h=n.data.get(l.dataId).values,f=n.data.get(p.dataId).values,[m,b]=Object(gr.a)(h,f,a,s,o,i,u,c);return[n.makeTensorInfo([m.length],"string",m),n.makeTensorInfo(p.shape,"int32",b)]}};var xr=n(178);const vr={kernelName:r.StringSplit,backendName:"cpu",kernelFunc:function stringSplit(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error("Input must be a vector, got shape: "+s.shape);if(0!==o.shape.length)throw new Error("Delimiter must be a scalar, got shape: "+o.shape);const i=n.data.get(s.dataId).values,u=n.data.get(o.dataId).values[0],[c,l,p]=Object(xr.a)(i,u,a),h=l.length;return[n.makeTensorInfo([h,2],"int32",c),n.makeTensorInfo([h],"string",l),n.makeTensorInfo([2],"int32",new Int32Array(p))]}};var Or=n(179);const kr={kernelName:r.StringToHashBucketFast,backendName:"cpu",kernelFunc:function stringToHashBucketFast(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.data.get(s.dataId).values,i=Object(Or.a)(o,a);return n.makeTensorInfo(s.shape,"int32",i)}},wr=Object(u.a)(r.Tan,e=>Math.tan(e)),Ir={kernelName:r.Tan,backendName:"cpu",kernelFunc:wr},Sr=Object(u.a)(r.Tanh,e=>Math.tanh(e)),Tr={kernelName:r.Tanh,backendName:"cpu",kernelFunc:Sr};var Nr=n(180);const _r={kernelName:r.Tile,backendName:"cpu",kernelFunc:function tile(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:o}=r;Object(a.a)(s,"tile");const i=Object(Nr.a)(n.bufferSync(s),o);return n.makeTensorInfo(i.shape,i.dtype,i.values)}};var Cr=n(181);const jr={kernelName:r.TopK,backendName:"cpu",kernelFunc:function topK(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:o,sorted:i}=r;Object(a.a)(s,"topk");const u=n.data.get(s.dataId).values,[c,l]=Object(Cr.a)(u,s.shape,s.dtype,o,i);return[n.makeTensorInfo(c.shape,c.dtype,c.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}};const Er={kernelName:r.Transform,backendName:"cpu",kernelFunc:function transform(e){const{inputs:t,attrs:n,backend:a}=e,{image:s,transforms:o}=t,{interpolation:i,fillMode:u,fillValue:c,outputShape:l}=n,[p,h,f,m]=s.shape,[b,g]=null!=l?l:[h,f],y=[p,b,g,m],x=r.util.computeStrides(s.shape),v=x[0],O=x[1],k=x[2],w=r.util.getTypedArrayFromDType(s.dtype,r.util.sizeFromShape(y));w.fill(c);const I=a.data.get(s.dataId).values,S=a.data.get(o.dataId).values;for(let e=0;e<p;++e){const t=1===o.shape[0]?S:S.subarray(8*e,8*e+8);for(let n=0;n<b;++n)for(let r=0;r<g;++r)for(let a=0;a<m;++a){let s;const o=t[6]*r+t[7]*n+1;if(0===o)continue;const l=(t[0]*r+t[1]*n+t[2])/o,p=(t[3]*r+t[4]*n+t[5])/o,m=mapCoord(l,f,u),b=mapCoord(p,h,u);switch(i){case"nearest":s=nearestInterpolation(I,h,f,v,O,k,e,b,m,a,c);break;case"bilinear":s=bilinearInterpolation(I,h,f,v,O,k,e,b,m,a,c);break;default:throw new Error("Error in Transform: Expect 'nearest' or 'bilinear', but got "+i)}w[e*v+n*O+r*k+a]=s}return a.makeTensorInfo(y,s.dtype,w)}return{dataId:a.write(w,y,s.dtype),shape:s.shape,dtype:s.dtype}}};function mapCoord(e,t,n){switch(n){case"reflect":return function mapCoordReflect(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return r.util.clamp(0,n,t-1)}(e,t);case"wrap":return function mapCoordWrap(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return r.util.clamp(0,n,t-1)}(e,t);case"nearest":return function mapCoordNearest(e,t){return r.util.clamp(0,e,t-1)}(e,t);case"constant":default:return function mapCoordConstant(e,t){return e}(e)}}function readWithFillValue(e,t,n,r,a,s,o,i,u,c,l){return 0<=i&&i<t&&0<=u&&u<n?e[o*r+i*a+u*s+c]:l}function nearestInterpolation(e,t,n,r,a,s,o,i,u,c,l){return readWithFillValue(e,t,n,r,a,s,o,Math.round(i),Math.round(u),c,l)}function bilinearInterpolation(e,t,n,r,a,s,o,i,u,c,l){const p=Math.floor(i),h=Math.floor(u),f=p+1,m=h+1;return(f-i)*((m-u)*readWithFillValue(e,t,n,r,a,s,o,p,h,c,l)+(u-h)*readWithFillValue(e,t,n,r,a,s,o,p,m,c,l))+(i-p)*((m-u)*readWithFillValue(e,t,n,r,a,s,o,f,h,c,l)+(u-h)*readWithFillValue(e,t,n,r,a,s,o,f,m,c,l))}var Ar=n(182);const $r={kernelName:r.Unique,backendName:"cpu",kernelFunc:function unique(e){const{inputs:t,attrs:n,backend:r}=e,{axis:s}=n,{x:o}=t;Object(a.a)(o,"unique");const i=r.data.get(o.dataId).values,{outputValues:u,outputShape:c,indices:l}=Object(Ar.a)(i,s,o.shape,o.dtype);return[r.makeTensorInfo(c,o.dtype,u),r.makeTensorInfo([l.length],"int32",l)]}};const Rr={kernelName:r.Unpack,backendName:"cpu",kernelFunc:function unpack(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a.shape.length,i=a.shape[s],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==s&&(u[c++]=a.shape[e]);const l=new Array(o).fill(0),p=a.shape.slice();p[s]=1;const h=new Array(i);for(let e=0;e<h.length;e++){l[s]=e;const t=Object(ee.a)({inputs:{x:a},backend:n,attrs:{begin:l,size:p}});h[e]=reshape({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return h}};const Fr={kernelName:r.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function unsortedSegmentSum(e){const{inputs:t,backend:n,attrs:s}=e,{x:o,segmentIds:i}=t,{numSegments:u}=s;Object(a.a)(o,"unsortedSegmentSum");const c=[],l=[],p=o.shape.length-i.shape.length;let h=i;for(let e=0;e<p;++e){const t=expandDims({inputs:{input:h},backend:n,attrs:{dim:e+1}});h=t,l.push(t)}for(let e=0;e<u;++e){const t=r.util.createScalarValue(e,"int32"),a=n.makeTensorInfo([],"int32",t),s=Object(ze.a)({inputs:{a:a,b:h},backend:n}),i=Object(se.a)({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),u=Object(De.a)({inputs:{a:i,b:o},backend:n}),p=sum({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});c.push(p),l.push(a),l.push(s),l.push(i),l.push(u),l.push(p)}const f=pack({inputs:c,backend:n,attrs:{axis:0}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),f}},Dr=[S,T.a,_,j,k.b,E,$,R,F,D,P,L,U,H,K,X,Y,Q,Z,I,J,te,re,ae,se.b,oe.a,ue,ce.b,le,fe,me,be,ge,ye,xe,ve,ke,Ie,Se,Te,Ne,_e,Ce,je,Ee,Ae,$e,Re,Fe,Be,l,Le,ze.b,Xe,Ye.b,Qe,Ze.a,rt,at,st,ot.a,ct,lt,dt,ht,mt,bt.a,gt.a,p.b,yt,pe,vt,kt,It,h,St.a,Tt.a,_t,Ct.a,Et,Rt,Dt,Bt,Lt,zt,Wt,Gt.a,Ht,qt,Kt,Xt,Yt,Qt,Zt,Jt.a,en,rn,on,De.b,un.a,ln,pn,fn,mn.a,bn,yn,xn,vn,wn,b,In.a,Tn,he.b,tt,_n,y,v,w,Cn,jn,En,An,$n,Rn,Dn,Mn.a,Pn,Bn,Vn,O.b,Gn,qn,Xn,ee.b,sn,Zn,Jn,tr,rr,sr,ir,ur,cr,lr.a,dr,pr.a,fr,br,yr,vr,kr,nt.b,Pe,Ir,Tr,_r,jr,Er,A.b,$r,Rr,Fr,gn];for(const e of Dr)Object(r.registerKernel)(e)},function(e,t,n){"use strict";n.r(t),n.d(t,"GraphModel",(function(){return graph_model_GraphModel})),n.d(t,"loadGraphModel",(function(){return loadGraphModel})),n.d(t,"deregisterOp",(function(){return o.a})),n.d(t,"registerOp",(function(){return o.c})),n.d(t,"version_converter",(function(){return zt}));var r=n(0);Object(r.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var a=n(46),s=n(1);class node_value_impl_NodeValueImpl{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return Object(s.e)(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Object(s.e)(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Object(a.f)(this.node.rawAttrs,e,t);if(null!=n.s)return Object(a.i)(this.node.rawAttrs,e,t);if(null!=n.b)return Object(a.c)(this.node.rawAttrs,e,t);if(null!=n.shape)return Object(a.k)(this.node.rawAttrs,e,t);if(null!=n.type)return Object(a.e)(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Object(a.g)(this.node.rawAttrs,e,t);if(null!=n.list.s)return Object(a.h)(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Object(a.j)(this.node.rawAttrs,e,t);if(null!=n.list.b)return Object(a.b)(this.node.rawAttrs,e,t);if(null!=n.list.type)return Object(a.d)(this.node.rawAttrs,e,t)}return t}}var o=n(84),i=n(12),u=n(189),c=n(224),l=n(10),p=n(21),h=n(212),f=n(121),m=n(14),b=n(137),g=n(122),y=n(67),x=n(145);var v=n(37),O=n(187),k=n(188),w=n(194),I=n(195),S=n(196),T=n(197),N=n(198),_=n(201),C=n(47),j=n(206),E=n(207),A=n(127),$=n(214),R=n(55),F=n(215),D=n(128),M=n(68),P=n(132),B=n(96),L=n(45),z=n(228),U=n(88),V=n(77),W=n(143),G=n(230),H=n(65),q=n(233),K=n(232),X=n(234),Y=n(133),Q=n(54),Z=n(35),J=n(112),ee=n(237),te=n(202),ne=n(142),re=n(229),ae=n(227),se=n(131),oe=n(140),ie=n(216);function assertShapesMatchAllowUndefinedSize(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){r.util.assert(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let a=0;a<e.length;a++){const s=e[a],o=t[a];r.util.assert(s<0||o<0||s===o,()=>n+` Shapes ${e} and ${t} must match`)}}}function fullDefinedShape(e){return"number"!=typeof e&&!e.some(e=>e<0)}function inferElementShape(e,t,n){let r=mergeElementShape(e,n);const a=!fullDefinedShape(r);if(a&&0===t.length)throw new Error("Tried to calculate elements of an empty list with non-fully-defined elementShape: "+r);if(a&&t.forEach(e=>{r=mergeElementShape(e.shape,r)}),!fullDefinedShape(r))throw new Error("Non-fully-defined elementShape: "+r);return r}function mergeElementShape(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class tensor_array_TensorArray{constructor(e,t,n,a,s,o,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=a,this.identicalElementShapes=s,this.dynamicSize=o,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Object(r.scalar)(0),Object(r.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Object(r.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Object(r.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return assertShapesMatchAllowUndefinedSize(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),Object(r.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Object(r.tensor)([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return assertShapesMatchAllowUndefinedSize(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Object(r.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,Object(r.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const a=e.map(e=>(n+=e,n));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,o=[];Object(r.tidy)(()=>{t=Object(r.reshape)(t,[1,n,s]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:a[n-1],0],u=[1,e[n],s];o[n]=Object(r.reshape)(Object(r.slice)(t,i,u),this.elementShape)}return o});const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,o)}}class tensor_list_TensorList{constructor(e,t,n,a=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);assertShapesMatchAllowUndefinedSize(t,e.shape,"TensorList shape mismatch: "),Object(r.keep)(e)}),this.idTensor=Object(r.scalar)(0),this.maxNumElements=a,Object(r.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new tensor_list_TensorList([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);assertShapesMatchAllowUndefinedSize(e,this.elementShape,"TensorList shape mismatch: ");const a=inferElementShape(this.elementShape,this.tensors,e);return Object(r.tidy)(()=>{const e=this.tensors.map(e=>Object(r.reshape)(e,a));return Object(r.stack)(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=inferElementShape(this.elementShape,this.tensors,e),a=this.tensors.pop();return assertShapesMatchAllowUndefinedSize(a.shape,e,"TensorList shape mismatch: "),Object(r.reshape)(a,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(assertShapesMatchAllowUndefinedSize(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Object(r.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error("TensorListResize expects size to be non-negative. Got: "+e);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=e}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);assertShapesMatchAllowUndefinedSize(this.tensors[e].shape,t,"TensorList shape mismatch: ");const a=inferElementShape(this.elementShape,this.tensors,t);return Object(r.reshape)(this.tensors[e],a)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);assertShapesMatchAllowUndefinedSize(this.elementShape,t.shape,"TensorList shape mismatch: "),Object(r.keep)(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);assertShapesMatchAllowUndefinedSize(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const a=inferElementShape(this.elementShape,this.tensors,n);return 0===e.length?Object(r.tensor)([],[0].concat(a)):Object(r.tidy)(()=>{const t=e.map(e=>Object(r.reshape)(this.tensors[e],a));return Object(r.stack)(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);assertShapesMatchAllowUndefinedSize(this.elementShape,t,"TensorList shape mismatch: ");const n=inferElementShape(this.elementShape,this.tensors,t);return 0===this.size()?Object(r.tensor)([],[0].concat(n)):Object(r.tidy)(()=>{const e=this.tensors.map(e=>Object(r.reshape)(e,n));return Object(r.concat)(e,0)})}}const control_executor_executeOp=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Object(s.d)("thenBranch",e,t,n),a=Object(s.d)("elseBranch",e,t,n),o=Object(s.d)("cond",e,t,n),i=Object(s.d)("args",e,t,n);return(await o.data())[0]?n.functionMap[r].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Object(s.d)("body",e,t,n),a=Object(s.d)("cond",e,t,n),o=Object(s.d)("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap),u=o.map(e=>e.id);let c=await i[0].data();i.forEach(e=>{e.kept||-1!==u.indexOf(e.id)||e.dispose()});let l=o;for(;c[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map(e=>e.id);e.forEach(e=>{e.kept||-1!==u.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);c=await s[0].data(),s.forEach(e=>{e.kept||-1!==u.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return l}case"LoopCond":{const r=Object(s.d)("pred",e,t,n);return[Object(s.a)(r)]}case"Switch":{const r=Object(s.d)("pred",e,t,n);let a=Object(s.d)("data",e,t,n);return a.kept||(a=Object(s.a)(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find(e=>void 0!==Object(s.e)(e,t,n));if(r){const e=Object(s.e)(r,t,n);return[Object(s.a)(e)]}return}case"Enter":{const r=Object(s.d)("frameName",e,t,n),a=Object(s.d)("tensor",e,t,n);return n.enterFrame(r),[Object(s.a)(a)]}case"Exit":{const r=Object(s.d)("tensor",e,t,n);return n.exitFrame(),[Object(s.a)(r)]}case"NextIteration":{const r=Object(s.d)("tensor",e,t,n);return n.nextIteration(),[Object(s.a)(r)]}case"TensorArrayV3":{const a=Object(s.d)("size",e,t,n),o=Object(s.d)("dtype",e,t,n),i=Object(s.d)("elementShape",e,t,n),u=Object(s.d)("dynamicSize",e,t,n),c=Object(s.d)("clearAfterRead",e,t,n),l=Object(s.d)("identicalElementShapes",e,t,n),p=Object(s.d)("name",e,t,n),h=new tensor_array_TensorArray(p,o,a,i,l,u,c);return n.addTensorArray(h),[h.idTensor,Object(r.scalar)(1)]}case"TensorArrayWriteV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=Object(s.d)("index",e,t,n),o=Object(s.d)("tensor",e,t,n),i=n.getTensorArray(r.id);return i.write(a,o),[i.idTensor]}case"TensorArrayReadV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=Object(s.d)("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=Object(s.d)("indices",e,t,n),o=Object(s.d)("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,o)]}case"TensorArrayScatterV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=Object(s.d)("indices",e,t,n),o=Object(s.d)("tensor",e,t,n),i=n.getTensorArray(r.id);return i.scatter(a,o),[i.idTensor]}case"TensorArrayConcatV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),o=Object(s.d)("dtype",e,t,n);return[a.concat(o)]}case"TensorArraySplitV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=Object(s.d)("tensor",e,t,n),o=Object(s.d)("lengths",e,t,n),i=n.getTensorArray(r.id);return i.split(o,a),[i.idTensor]}case"TensorArraySizeV3":{const a=Object(s.d)("tensorArrayId",e,t,n),o=n.getTensorArray(a.id);return[Object(r.scalar)(o.size(),"int32")]}case"TensorArrayCloseV3":{const r=Object(s.d)("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=Object(s.d)("tensorListId",e,t,n),a=Object(s.d)("index",e,t,n),o=Object(s.d)("tensor",e,t,n),i=n.getTensorList(r.id);return i.setItem(a,o),[i.idTensor]}case"TensorListGetItem":{const r=Object(s.d)("tensorListId",e,t,n),a=Object(s.d)("index",e,t,n),o=Object(s.d)("elementShape",e,t,n),i=Object(s.d)("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,o,i)]}case"TensorListScatterV2":case"TensorListScatter":{const a=Object(s.d)("indices",e,t,n),o=function scatter(e,t,n,a){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=a&&-1!==a&&s>=a)throw new Error(`Max index must be < array size (${s}  vs. ${a})`);const o=new tensor_list_TensorList([],n,e.dtype,a),i=Object(r.unstack)(e,0);return t.forEach((e,t)=>{o.setItem(e,i[t])}),o}(Object(s.d)("tensor",e,t,n),a,Object(s.d)("elementShape",e,t,n),Object(s.d)("numElements",e,t,n));return n.addTensorList(o),[o.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Object(s.d)("elementShape",e,t,n),a=Object(s.d)("elementDType",e,t,n);let o;o="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function reserve(e,t,n){return new tensor_list_TensorList([],e,t,n)}(r,a,Object(s.d)(o,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Object(s.d)("tensorListId",e,t,n),a=Object(s.d)("indices",e,t,n),o=Object(s.d)("elementShape",e,t,n),i=Object(s.d)("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,i,o)]}case"TensorListStack":{const r=Object(s.d)("tensorListId",e,t,n),a=Object(s.d)("elementShape",e,t,n),o=Object(s.d)("elementDType",e,t,n),i=Object(s.d)("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,o,i)]}case"TensorListFromTensor":{const a=function fromTensor(e,t,n){const a=e.dtype;if(e.shape.length<1)throw new Error("Tensor must be at least a vector, but saw shape: "+e.shape);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);assertShapesMatchAllowUndefinedSize(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=Object(r.unstack)(e);return new tensor_list_TensorList(s,t,a)}(Object(s.d)("tensor",e,t,n),Object(s.d)("elementShape",e,t,n),Object(s.d)("elementDType",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListConcat":{const r=Object(s.d)("tensorListId",e,t,n),a=n.getTensorList(r.id),o=Object(s.d)("dtype",e,t,n),i=Object(s.d)("elementShape",e,t,n);return[a.concat(o,i)]}case"TensorListPushBack":{const r=Object(s.d)("tensorListId",e,t,n),a=Object(s.d)("tensor",e,t,n),o=n.getTensorList(r.id);return o.pushBack(a),[o.idTensor]}case"TensorListPopBack":{const r=Object(s.d)("tensorListId",e,t,n),a=Object(s.d)("elementShape",e,t,n),o=Object(s.d)("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,o)]}case"TensorListSplit":{const a=Object(s.d)("tensor",e,t,n),o=Object(s.d)("elementShape",e,t,n),i=function split(e,t,n){let a=0;const s=t.map(e=>(a+=e,a));if(a!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${a}, and tensor's shape is: ${e.shape}`);const o=mergeElementShape(e.shape.slice(1),n),i=0===a?0:e.size/a,u=Object(r.tidy)(()=>{const n=[];e=Object(r.reshape)(e,[1,a,i]);for(let a=0;a<t.length;++a){const u=[0,0===a?0:s[a-1],0],c=[1,t[a],i];n[a]=Object(r.reshape)(Object(r.slice)(e,u,c),o)}return e.dispose(),n}),c=new tensor_list_TensorList([],n,e.dtype,t.length);for(let e=0;e<u.length;e++)c.setItem(e,u[e]);return c}(a,Object(s.d)("lengths",e,t,n),o);return n.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};var ue=n(203),ce=n(75),le=n(118),de=n(204),pe=n(95),he=n(205),fe=n(123),me=n(136),be=n(222),ge=n(199),ye=n(221),xe=n(211);function fusedConvAndDepthWiseParams(e,t,n){const[r,a]=Object(s.d)("fusedOps",e,t,n),o="biasadd"===r,i=!o,u="prelu"===a,c="fusedbatchnorm"===r,l=Object(s.d)("numArgs",e,t,n);if(o){if(u&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!u&&o&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(c)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const p=Object(s.d)("strides",e,t,n),h=Object(s.c)(e,t,n),f=Object(s.d)("dataFormat",e,t,n).toUpperCase(),m=Object(s.d)("dilations",e,t,n);let[b,g]=Object(s.d)("args",e,t,n);i&&(g=b,b=void 0);return{stride:p,pad:h,dataFormat:f,dilations:m,biasArg:b,preluArg:g,activationFunc:a,leakyreluAlpha:Object(s.d)("leakyreluAlpha",e,t,n)}}var ve=n(74),Oe=n(218),ke=n(225),we=n(114),Ie=n(71),Se=n(226),Te=n(141),Ne=n(83),_e=n(239),Ce=n(76),je=n(34);var Ee=n(23),Ae=n(148),$e=n(231);function nmsParams(e,t,n){return{boxes:Object(s.d)("boxes",e,t,n),scores:Object(s.d)("scores",e,t,n),maxOutputSize:Object(s.d)("maxOutputSize",e,t,n),iouThreshold:Object(s.d)("iouThreshold",e,t,n),scoreThreshold:Object(s.d)("scoreThreshold",e,t,n),softNmsSigma:Object(s.d)("softNmsSigma",e,t,n)}}var Re=n(238),Fe=n(240);var De=n(41),Me=n(16);class hash_table_HashTable{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Object(r.scalar)(0),this.tensorMap=new Map,Object(r.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Me.a(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),Object(r.tidy)(()=>{const e=Object(r.unstack)(t),a=n.length,s=e.length;r.util.assert(a===s,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${s} elements.`);for(let t=0;t<a;t++){const a=n[t],s=e[t];Object(r.keep)(s),this.tensorMap.set(a,s)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return Object(r.tidy)(()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return Object(r.stack)(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got `+e.dtype);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got `+t.dtype)}}var Pe=n(126),Be=n(138),Le=n(85),ze=n(130),Ue=n(217),Ve=n(97),We=n(86),Ge=n(134),He=n(135),qe=n(56);var Ke=n(25),Xe=n(213),Ye=n(90);var Qe=n(80),Ze=n(219),Je=n(235),et=n(220),tt=n(244);var nt=n(66),rt=n(87),at=n(113),st=n(27),ot=n(190),it=n(191),ut=n(192),ct=n(193),lt=n(208),dt=n(125),pt=n(209);var ht=n(31),ft=n(129),mt=n(48),bt=n(26),gt=n(236),yt=n(100),xt=n(7),vt=n(70),Ot=n(101),kt=n(81),wt=n(69),It=n(241),St=n(242);var Tt=n(98),Nt=n(89),_t=n(99),Ct=n(144);var jt=n(72),Et=n(223),At=n(63),$t=n(139),Rt=n(124),Ft=n(210),Dt=n(107),Mt=n(200);function operation_executor_executeOp(e,t,n,a){const Pt=((e,t,n)=>{switch(e.category){case"arithmetic":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[i.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"AddN":return[u.a(Object(s.d)("tensors",e,t,n))];case"FloorMod":case"Mod":return[c.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Mul":return[l.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"RealDiv":case"Div":return[p.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"DivNoNan":return[h.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"FloorDiv":return[f.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Sub":return[m.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Minimum":return[b.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Maximum":return[g.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Pow":return[y.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"SquaredDifference":return[x.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"basic_math":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[v.a(Object(s.d)("x",e,t,n))];case"Acos":return[O.a(Object(s.d)("x",e,t,n))];case"Acosh":return[k.a(Object(s.d)("x",e,t,n))];case"Asin":return[w.a(Object(s.d)("x",e,t,n))];case"Asinh":return[I.a(Object(s.d)("x",e,t,n))];case"Atan":return[S.a(Object(s.d)("x",e,t,n))];case"Atan2":return[T.a(Object(s.d)("x",e,t,n),Object(s.d)("y",e,t,n))];case"Atanh":return[N.a(Object(s.d)("x",e,t,n))];case"Ceil":return[_.a(Object(s.d)("x",e,t,n))];case"Complex":return[C.a(Object(s.d)("real",e,t,n),Object(s.d)("imag",e,t,n))];case"Cos":return[j.a(Object(s.d)("x",e,t,n))];case"Cosh":return[E.a(Object(s.d)("x",e,t,n))];case"Elu":return[A.a(Object(s.d)("x",e,t,n))];case"Erf":return[$.a(Object(s.d)("x",e,t,n))];case"Exp":return[R.a(Object(s.d)("x",e,t,n))];case"Expm1":return[F.a(Object(s.d)("x",e,t,n))];case"Floor":return[D.a(Object(s.d)("x",e,t,n))];case"Log":return[M.a(Object(s.d)("x",e,t,n))];case"Log1p":return[P.a(Object(s.d)("x",e,t,n))];case"Imag":return[B.a(Object(s.d)("x",e,t,n))];case"Neg":return[L.a(Object(s.d)("x",e,t,n))];case"Reciprocal":return[z.a(Object(s.d)("x",e,t,n))];case"Real":return[U.a(Object(s.d)("x",e,t,n))];case"Relu":return[V.a(Object(s.d)("x",e,t,n))];case"Round":return[W.a(Object(s.d)("x",e,t,n))];case"Selu":return[G.a(Object(s.d)("x",e,t,n))];case"Sigmoid":return[H.a(Object(s.d)("x",e,t,n))];case"Sin":return[q.a(Object(s.d)("x",e,t,n))];case"Sign":return[K.a(Object(s.d)("x",e,t,n))];case"Sinh":return[X.a(Object(s.d)("x",e,t,n))];case"Softplus":return[Y.a(Object(s.d)("x",e,t,n))];case"Sqrt":return[Q.a(Object(s.d)("x",e,t,n))];case"Square":return[Z.a(Object(s.d)("x",e,t,n))];case"Tanh":return[J.a(Object(s.d)("x",e,t,n))];case"Tan":return[ee.a(Object(s.d)("x",e,t,n))];case"ClipByValue":return[te.a(Object(s.d)("x",e,t,n),Object(s.d)("clipValueMin",e,t,n),Object(s.d)("clipValueMax",e,t,n))];case"Relu6":return[ne.a(Object(s.d)("x",e,t,n))];case"Rsqrt":return[re.a(Object(s.e)(e.inputNames[0],t,n))];case"Prod":return[ae.a(Object(s.d)("x",e,t,n),Object(s.d)("axes",e,t,n))];case"LeakyRelu":return[se.a(Object(s.d)("x",e,t,n),Object(s.d)("alpha",e,t,n))];case"Prelu":return[oe.a(Object(s.d)("x",e,t,n),Object(s.d)("alpha",e,t,n))];case"IsNan":return[ie.a(Object(s.e)(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"control":return control_executor_executeOp(e,t,n);case"convolution":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const r=Object(s.d)("stride",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("dataFormat",e,t,n).toUpperCase(),i=Object(s.d)("dilation",e,t,n);return[ue.a(Object(s.d)("x",e,t,n),Object(s.d)("filter",e,t,n),r,a,o,i)]}case"Conv2D":{const r=Object(s.d)("strides",e,t,n),a=Object(s.c)(e,t,n),o=Object(s.d)("dataFormat",e,t,n).toUpperCase(),i=Object(s.d)("dilations",e,t,n);return[ce.a(Object(s.d)("x",e,t,n),Object(s.d)("filter",e,t,n),[r[1],r[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:c,activationFunc:l,leakyreluAlpha:p}=fusedConvAndDepthWiseParams(e,t,n);return[le.rb.conv2d({x:Object(s.d)("x",e,t,n),filter:Object(s.d)("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:l,preluActivationWeights:c,leakyreluAlpha:p})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:c,activationFunc:l,leakyreluAlpha:p}=fusedConvAndDepthWiseParams(e,t,n);return[le.rb.depthwiseConv2d({x:Object(s.d)("x",e,t,n),filter:Object(s.d)("filter",e,t,n),strides:[r[1],r[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:l,preluActivationWeights:c,leakyreluAlpha:p})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=Object(s.d)("outputShape",e,t,n),a=Object(s.d)("strides",e,t,n),o=Object(s.c)(e,t,n);return[de.a(Object(s.d)("x",e,t,n),Object(s.d)("filter",e,t,n),r,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=Object(s.d)("strides",e,t,n),a=Object(s.c)(e,t,n),o=Object(s.d)("dilations",e,t,n),i=Object(s.d)("dataFormat",e,t,n).toUpperCase();return[pe.a(Object(s.d)("input",e,t,n),Object(s.d)("filter",e,t,n),[r[1],r[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("dataFormat",e,t,n).toUpperCase(),i=Object(s.d)("dilations",e,t,n);return[he.a(Object(s.d)("x",e,t,n),Object(s.d)("filter",e,t,n),[r[1],r[2],r[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("kernelSize",e,t,n);return[fe.a(Object(s.d)("x",e,t,n),[o[1],o[2]],[r[1],r[2]],a)]}case"MaxPool":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("kernelSize",e,t,n);return[me.a(Object(s.d)("x",e,t,n),[o[1],o[2]],[r[1],r[2]],a)]}case"MaxPoolWithArgmax":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("kernelSize",e,t,n),i=Object(s.d)("includeBatchInIndex",e,t,n),{result:u,indexes:c}=be.a(Object(s.d)("x",e,t,n),[o[1],o[2]],[r[1],r[2]],a,i);return[u,c]}case"AvgPool3D":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("kernelSize",e,t,n);return[ge.a(Object(s.d)("x",e,t,n),[o[1],o[2],o[3]],[r[1],r[2],r[3]],a)]}case"MaxPool3D":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("kernelSize",e,t,n);return[ye.a(Object(s.d)("x",e,t,n),[o[1],o[2],o[3]],[r[1],r[2],r[3]],a)]}case"Dilation2D":{const r=Object(s.d)("strides",e,t,n),a=Object(s.d)("pad",e,t,n),o=Object(s.d)("dilations",e,t,n),i=r[1],u=r[2],c=o[1],l=o[2];return[xe.a(Object(s.d)("x",e,t,n),Object(s.d)("filter",e,t,n),[i,u],a,[c,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"creation":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Fill":{const r=Object(s.d)("shape",e,t,n),a=Object(s.d)("dtype",e,t,n),o=Object(s.d)("value",e,t,n);return[ve.a(r,o,a)]}case"LinSpace":{const r=Object(s.d)("start",e,t,n),a=Object(s.d)("stop",e,t,n),o=Object(s.d)("num",e,t,n);return[Oe.a(r,a,o)]}case"Multinomial":{const r=Object(s.d)("logits",e,t,n),a=Object(s.d)("numSamples",e,t,n),o=Object(s.d)("seed",e,t,n);return[ke.a(r,a,o)]}case"OneHot":{const r=Object(s.d)("indices",e,t,n),a=Object(s.d)("depth",e,t,n),o=Object(s.d)("onValue",e,t,n),i=Object(s.d)("offValue",e,t,n);return[we.a(r,a,o,i)]}case"Ones":return[Ie.a(Object(s.d)("shape",e,t,n),Object(s.d)("dtype",e,t,n))];case"OnesLike":return[Se.a(Object(s.d)("x",e,t,n))];case"RandomUniform":return[Te.a(Object(s.d)("shape",e,t,n),Object(s.d)("minval",e,t,n),Object(s.d)("maxval",e,t,n),Object(s.d)("dtype",e,t,n))];case"Range":{const r=Object(s.d)("start",e,t,n),a=Object(s.d)("stop",e,t,n),o=Object(s.d)("step",e,t,n);return[Ne.a(r,a,o,Object(s.d)("dtype",e,t,n))]}case"TruncatedNormal":{const r=Object(s.d)("shape",e,t,n),a=Object(s.d)("mean",e,t,n),o=Object(s.d)("stdDev",e,t,n),i=Object(s.d)("seed",e,t,n);return[_e.a(r,a,o,Object(s.d)("dtype",e,t,n),i)]}case"Zeros":return[Ce.a(Object(s.d)("shape",e,t,n),Object(s.d)("dtype",e,t,n))];case"ZerosLike":return[je.a(Object(s.d)("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i,softNmsSigma:u}=nmsParams(e,t,n),c=await le.yb.nonMaxSuppressionWithScoreAsync(r,a,s,o,i,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=nmsParams(e,t,n),c=Object(s.d)("padToMaxOutputSize",e,t,n),l=await le.yb.nonMaxSuppressionPaddedAsync(r,a,o,i,u,c);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:s,iouThreshold:o,scoreThreshold:i}=nmsParams(e,t,n);return[await le.yb.nonMaxSuppressionAsync(r,a,s,o,i)]}case"Where":{const r=Ee.a(Object(s.d)("condition",e,t,n),"bool"),a=[await Ae.a(r)];return r.dispose(),a}case"ListDiff":return $e.a(Object(s.d)("x",e,t,n),Object(s.d)("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"TopKV2":{const r=Object(s.d)("x",e,t,n),a=Object(s.d)("k",e,t,n),o=Object(s.d)("sorted",e,t,n),i=Re.a(r,a,o);return[i.values,i.indices]}case"Unique":{const r=Object(s.d)("x",e,t,n),a=Fe.a(r);return[a.values,a.indices]}case"UniqueV2":{const r=Object(s.d)("x",e,t,n),a=Object(s.d)("axis",e,t,n),o=Fe.a(r,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"image":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const r=Object(s.d)("images",e,t,n),a=Object(s.d)("size",e,t,n),o=Object(s.d)("alignCorners",e,t,n),i=Object(s.d)("halfPixelCenters",e,t,n);return[le.yb.resizeBilinear(r,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const r=Object(s.d)("images",e,t,n),a=Object(s.d)("size",e,t,n),o=Object(s.d)("alignCorners",e,t,n),i=Object(s.d)("halfPixelCenters",e,t,n);return[le.yb.resizeNearestNeighbor(r,[a[0],a[1]],o,i)]}case"CropAndResize":{const r=Object(s.d)("image",e,t,n),a=Object(s.d)("boxes",e,t,n),o=Object(s.d)("boxInd",e,t,n),i=Object(s.d)("cropSize",e,t,n),u=Object(s.d)("method",e,t,n),c=Object(s.d)("extrapolationValue",e,t,n);return[le.yb.cropAndResize(r,a,o,i,u,c)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"graph":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const r=Object(s.d)("default",e,t,n);return[Object(s.e)(e.name,t,n)||r];case"Placeholder":return[Object(s.e)(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const r=Object(s.d)("x",e,t,n);return[Object(s.a)(r)]}case"IdentityN":return Object(s.d)("x",e,t,n).map(e=>Object(s.a)(e));case"Snapshot":const a=Object(s.d)("x",e,t,n);return[Object(s.a)(a)];case"Shape":return[De.a(Object(s.d)("x",e,t,n).shape,"int32")];case"ShapeN":return Object(s.d)("x",e,t,n).map(e=>De.a(e.shape));case"Size":return[Me.a(Object(s.d)("x",e,t,n).size,"int32")];case"Rank":return[Me.a(Object(s.d)("x",e,t,n).rank,"int32")];case"NoOp":return[Me.a(1)];case"Print":const o=Object(s.d)("x",e,t,n),i=Object(s.d)("data",e,t,n),u=Object(s.d)("message",e,t,n),c=Object(s.d)("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(u);for(let e=0;e<i.length;e++)console.log(Array.prototype.slice.call(i[e].dataSync()).slice(0,c));return[o];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"logical":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Equal":return[Pe.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"NotEqual":return[Be.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Greater":return[Le.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"GreaterEqual":return[ze.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Less":return[Ue.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"LessEqual":return[Ve.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"LogicalAnd":return[We.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"LogicalNot":return[Ge.a(Object(s.d)("a",e,t,n))];case"LogicalOr":return[He.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];case"Select":case"SelectV2":return[qe.a(Object(s.d)("condition",e,t,n),Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"matrices":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[Ke.a(Object(s.d)("a",e,t,n),Object(s.d)("b",e,t,n),Object(s.d)("transposeA",e,t,n),Object(s.d)("transposeB",e,t,n))];case"Einsum":return[Xe.a(Object(s.d)("equation",e,t,n),...Object(s.d)("tensors",e,t,n))];case"Transpose":return[Ye.a(Object(s.d)("x",e,t,n),Object(s.d)("perm",e,t,n))];case"_FusedMatMul":const[r,a]=Object(s.d)("fusedOps",e,t,n),o="biasadd"===r,i="prelu"===a,u=Object(s.d)("numArgs",e,t,n),c=Object(s.d)("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,p]=Object(s.d)("args",e,t,n);return[le.rb.matMul({a:Object(s.d)("a",e,t,n),b:Object(s.d)("b",e,t,n),transposeA:Object(s.d)("transposeA",e,t,n),transposeB:Object(s.d)("transposeB",e,t,n),bias:l,activation:a,preluActivationWeights:p,leakyreluAlpha:c})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"normalization":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Qe.a(Object(s.d)("x",e,t,n),Object(s.d)("mean",e,t,n),Object(s.d)("variance",e,t,n),Object(s.d)("offset",e,t,n),Object(s.d)("scale",e,t,n),Object(s.d)("epsilon",e,t,n))];case"LRN":return[Ze.a(Object(s.d)("x",e,t,n),Object(s.d)("radius",e,t,n),Object(s.d)("bias",e,t,n),Object(s.d)("alpha",e,t,n),Object(s.d)("beta",e,t,n))];case"Softmax":return[Je.a(Object(s.d)("x",e,t,n))];case"LogSoftmax":return[et.a(Object(s.d)("x",e,t,n))];case"SparseToDense":return[tt.a(Object(s.d)("sparseIndices",e,t,n),Object(s.d)("outputShape",e,t,n),Object(s.d)("sparseValues",e,t,n),Object(s.d)("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"reduction":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Max":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[nt.a(Object(s.d)("x",e,t,n),r,a)]}case"Mean":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[rt.a(Object(s.d)("x",e,t,n),r,a)]}case"Min":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[at.a(Object(s.d)("x",e,t,n),r,a)]}case"Sum":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[st.a(Object(s.d)("x",e,t,n),r,a)]}case"All":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[ot.a(Object(s.d)("x",e,t,n),r,a)]}case"Any":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[it.a(Object(s.d)("x",e,t,n),r,a)]}case"ArgMax":{const r=Object(s.d)("axis",e,t,n);return[ut.a(Object(s.d)("x",e,t,n),r)]}case"ArgMin":{const r=Object(s.d)("axis",e,t,n);return[ct.a(Object(s.d)("x",e,t,n),r)]}case"Prod":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("keepDims",e,t,n);return[ae.a(Object(s.d)("x",e,t,n),r,a)]}case"Cumsum":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("exclusive",e,t,n),o=Object(s.d)("reverse",e,t,n);return[lt.a(Object(s.d)("x",e,t,n),r,a,o)]}case"Bincount":const r=Object(s.d)("x",e,t,n),a=Object(s.d)("weights",e,t,n),o=Object(s.d)("size",e,t,n);return[dt.a(r,a,o)];case"DenseBincount":{const r=Object(s.d)("x",e,t,n),a=Object(s.d)("weights",e,t,n),o=Object(s.d)("size",e,t,n),i=Object(s.d)("binaryOutput",e,t,n);return[pt.a(r,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"slice_join":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const r=Object(s.d)("n",e,t,n),a=Object(s.d)("axis",e,t,n);let o=Object(s.d)("tensors",e,t,n);return o=o.slice(0,r),[ht.a(o,a)]}case"Gather":{const r=Object(s.d)("x",e,t,n),a=Object(s.d)("indices",e,t,n);return[ft.a(r,Ee.a(a,"int32"),0)]}case"GatherV2":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("batchDims",e,t,n),o=Object(s.d)("x",e,t,n),i=Object(s.d)("indices",e,t,n);return[ft.a(o,Ee.a(i,"int32"),r,a)]}case"Reverse":{const r=Object(s.d)("dims",e,t,n),a=[];for(let e=0;e<r.length;e++)r[e]&&a.push(e);const o=Object(s.d)("x",e,t,n);return[mt.a(o,a)]}case"ReverseV2":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("x",e,t,n);return[mt.a(a,r)]}case"Slice":{const r=Object(s.d)("begin",e,t,n),a=Object(s.d)("size",e,t,n);return[bt.a(Object(s.d)("x",e,t,n),r,a)]}case"StridedSlice":{const r=Object(s.d)("begin",e,t,n),a=Object(s.d)("end",e,t,n),o=Object(s.d)("strides",e,t,n),i=Object(s.d)("beginMask",e,t,n),u=Object(s.d)("endMask",e,t,n),c=Object(s.d)("ellipsisMask",e,t,n),l=Object(s.d)("newAxisMask",e,t,n),p=Object(s.d)("shrinkAxisMask",e,t,n),h=Object(s.d)("x",e,t,n);return[gt.a(h,r,a,o,i,u,c,l,p)]}case"Pack":return Object(r.tidy)(()=>{const a=Object(s.d)("axis",e,t,n),o=Object(s.d)("tensors",e,t,n),i=o[0].shape,u=yt.a(o[0]).shape,c=o.map(e=>{const t=r.util.arraysEqual(e.shape,i);if(!t&&!r.util.arraysEqual(yt.a(e).shape,u))throw new Error("the input tensors shape does not match");return t?e:xt.a(e,i)});return[vt.a(c,a)]});case"Unpack":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("tensor",e,t,n);return Ot.a(a,r)}case"Tile":{const r=Object(s.d)("reps",e,t,n);return[kt.a(Object(s.d)("x",e,t,n),r)]}case"Split":case"SplitV":{const r=Object(s.d)("axis",e,t,n),a=Object(s.d)("numOrSizeSplits",e,t,n),o=Object(s.d)("x",e,t,n);return wt.a(o,a,r)}case"ScatterNd":{const r=Object(s.d)("indices",e,t,n),a=Object(s.d)("values",e,t,n),o=Object(s.d)("shape",e,t,n);return[It.a(r,a,o)]}case"GatherNd":{const r=Object(s.d)("x",e,t,n),a=Object(s.d)("indices",e,t,n);return[St.a(r,a)]}case"SparseToDense":{const r=Object(s.d)("sparseIndices",e,t,n),a=Object(s.d)("outputShape",e,t,n),o=Object(s.d)("sparseValues",e,t,n),i=Object(s.d)("defaultValue",e,t,n);return[tt.a(r,o,a,o.dtype===i.dtype?i:Ee.a(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"sparse":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=le.nd.sparseFillEmptyRows(Object(s.d)("indices",e,t,n),Object(s.d)("values",e,t,n),Object(s.d)("denseShape",e,t,n),Object(s.d)("defaultValue",e,t,n));return[r,a,o,i]}case"SparseReshape":{const{outputIndices:r,outputShape:a}=le.nd.sparseReshape(Object(s.d)("inputIndices",e,t,n),Object(s.d)("inputShape",e,t,n),Object(s.d)("newShape",e,t,n));return[r,a]}case"SparseSegmentMean":return[le.nd.sparseSegmentMean(Object(s.d)("data",e,t,n),Object(s.d)("indices",e,t,n),Object(s.d)("segmentIds",e,t,n))];case"SparseSegmentSum":return[le.nd.sparseSegmentSum(Object(s.d)("data",e,t,n),Object(s.d)("indices",e,t,n),Object(s.d)("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"spectral":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"FFT":return[Tt.a(Object(s.d)("x",e,t,n))];case"IFFT":return[Nt.a(Object(s.d)("x",e,t,n))];case"RFFT":return[_t.a(Object(s.d)("x",e,t,n))];case"IRFFT":return[Ct.a(Object(s.d)("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"string":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:r,nGramsSplits:a}=le.yd.stringNGrams(Object(s.d)("data",e,t,n),Object(s.d)("dataSplits",e,t,n),Object(s.d)("separator",e,t,n),Object(s.d)("nGramWidths",e,t,n),Object(s.d)("leftPad",e,t,n),Object(s.d)("rightPad",e,t,n),Object(s.d)("padWidth",e,t,n),Object(s.d)("preserveShortSequences",e,t,n));return[r,a]}case"StringSplit":{const{indices:r,values:a,shape:o}=le.yd.stringSplit(Object(s.d)("input",e,t,n),Object(s.d)("delimiter",e,t,n),Object(s.d)("skipEmpty",e,t,n));return[r,a,o]}case"StringToHashBucketFast":return[le.yd.stringToHashBucketFast(Object(s.d)("input",e,t,n),Object(s.d)("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"transformation":return r.tidy(()=>((e,t,n)=>{switch(e.op){case"Cast":return[Ee.a(Object(s.d)("x",e,t,n),Object(s.d)("dtype",e,t,n))];case"ExpandDims":{const r=Object(s.d)("axis",e,t,n);return[jt.a(Object(s.d)("x",e,t,n),r)]}case"Squeeze":{const r=Object(s.d)("axis",e,t,n);return[yt.a(Object(s.d)("x",e,t,n),r)]}case"Reshape":return[xt.a(Object(s.d)("x",e,t,n),Object(s.d)("shape",e,t,n))];case"MirrorPad":return[Et.a(Object(s.d)("x",e,t,n),Object(s.d)("padding",e,t,n),Object(s.d)("mode",e,t,n))];case"PadV2":case"Pad":return[At.a(Object(s.d)("x",e,t,n),Object(s.d)("padding",e,t,n),Object(s.d)("constantValue",e,t,n))];case"SpaceToBatchND":{const r=Object(s.d)("blockShape",e,t,n),a=Object(s.d)("paddings",e,t,n);return[$t.a(Object(s.d)("x",e,t,n),r,a)]}case"BatchToSpaceND":{const r=Object(s.d)("blockShape",e,t,n),a=Object(s.d)("crops",e,t,n);return[Rt.a(Object(s.d)("x",e,t,n),r,a)]}case"DepthToSpace":{const r=Object(s.d)("blockSize",e,t,n),a=Object(s.d)("dataFormat",e,t,n).toUpperCase();return[Ft.a(Object(s.d)("x",e,t,n),r,a)]}case"BroadcastTo":return[Dt.a(Object(s.d)("x",e,t,n),Object(s.d)("shape",e,t,n))];case"BroadcastArgs":return[Mt.a(Object(s.d)("s0",e,t,n),Object(s.d)("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=Object(s.d)("keyDType",e,t,n),o=Object(s.d)("valueDType",e,t,n),i=new hash_table_HashTable(a,o);return r.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=Object(s.d)("tableHandle",e,t,n,r),o=Object(s.d)("keys",e,t,n),i=Object(s.d)("values",e,t,n),u=r.getHashTableById(a.id);return[await u.import(o,i)]}case"LookupTableFind":case"LookupTableFindV2":{const a=Object(s.d)("tableHandle",e,t,n,r),o=Object(s.d)("keys",e,t,n),i=Object(s.d)("defaultValue",e,t,n),u=r.getHashTableById(a.id);return[await u.find(o,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=Object(s.d)("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,a);case"custom":const Pt=Object(o.b)(e.op);if(Pt&&Pt.customExecutor)return Pt.customExecutor(new node_value_impl_NodeValueImpl(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return r.util.isPromise(Pt)?Pt.then(e=>[].concat(e)):[].concat(Pt)}class ExecutionContext{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function getExecutionSubgraph(e,t,n,r){const a=new Set,o=[];let i=null,u=null;const c=new Set,l=Object.keys(e).map(e=>Object(s.g)(e)[0]);let p=[];null!=r&&(p=r.map(e=>Object(s.g)(e.name)[0]));const h=[...t];for(;h.length>0;){const e=h.pop();(isControlFlow(e)||isDynamicShape(e)||isHashTable(e))&&null==i&&(i=e,u=i.children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===p.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{c.has(e.name)||(c.add(e.name),h.push(e))}):o.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:o,dynamicNode:i,syncInputs:u}}const Pt=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Bt=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Lt=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function isControlFlow(e){return Pt.indexOf(e.op)>=0}function isDynamicShape(e){return Bt.indexOf(e.op)>=0}function isHashTable(e){return Lt.indexOf(e.op)>=0}class graph_executor_GraphExecutor{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new graph_executor_GraphExecutor(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=getExecutionSubgraph(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:o}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${o}]`);if(r.length>0){const n=t.map(e=>e.name),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function getNodesInTopologicalOrder(e,t,n){const{usedNodes:r,inputs:a}=n,o=[],i=Object.keys(a).map(e=>Object(s.g)(e)[0]).map(t=>e.nodes[t]),u=e.initNodes;i.forEach(e=>{r.has(e.name)&&o.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&o.push(e)}),null!=u&&u.forEach(e=>{r.has(e.name)&&o.push(e)});const c=new Set,l=[];for(;o.length>0;){const e=o.pop();c.add(e.name),t[e.name]||l.push(e),e.children.forEach(e=>{!c.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>c.has(e.name))&&o.push(e)})}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const a=n.map(e=>this.graph.nodes[Object(s.g)(e)[0]]),o=t.map(e=>Object(s.g)(e)[0]);let i=o.map(e=>this.graph.nodes[e]);this.resetIntermediateTensors(),0===i.length&&(i=this._outputs);const u=this.getCompilationKey(a,i);let c=this.compiledMap.get(u);null==c&&(c=this.compile(e,i),this.compiledMap.set(u,c));const l={},p={};return Object(r.tidy)(()=>{const n=new ExecutionContext(this.weightMap,l,p,this.functionExecutorMap),a=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=Object(s.g)(t),o=[];o[r]=e[t],a[n]=o});const i=this.getFrozenTensorIds(a),u={};for(let e=0;e<c.length;e++){const t=c[e];if(!a[t.name]){const e=operation_executor_executeOp(t,a,n,this._resourceManager);if(r.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);a[t.name]=e,this.checkTensorForDisposal(t.name,t,a,n,i,o,u)}}return null==this.parent&&n.dispose(i),t.map(e=>Object(s.e)(e,a,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,o,i){"control"!==t.category&&-1===o.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const o=Object(s.f)(e.name,n,r);null!=o&&o.forEach(e=>{if(e&&!e.kept&&!a.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=Object(s.b)(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach(e=>{this.tensorsMap[e].forEach(e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach(e=>e.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,a={},o={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=Object(r.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const i=new ExecutionContext(this.weightMap,a,o,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,i,t,n);const u=t.map(e=>Object(s.e)(e,this.tensorsMap,i)),c=u.map(e=>e.id),l=Object.keys(e).map(t=>e[t].id);return this.keepIds=new Set([...c,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&i.dispose(this.keepIds),u}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),o=a.map(e=>this.graph.nodes[Object(s.g)(e)[0]]),i=n.map(e=>Object(s.g)(e)[0]);let u=i.map(e=>this.graph.nodes[e]);0===u.length&&(u=this._outputs);const{usedNodes:c,missingInputs:l,dynamicNode:p,syncInputs:h}=getExecutionSubgraph(e,u,this.weightMap,this._initNodes),f=[...o,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),m=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=Object(s.g)(t),a=[];a[r]=e[t],m[n]=a});const b={},g=this.getFrozenTensorIds(m),y={};for(;f.length>0;){const e=this.processStack(o,f,t,m,y,g,i,b,c);await Promise.all(e)}null!=p||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=u.filter(e=>!isControlFlow(e)&&!Object(s.e)(e.name,m,t)).map(e=>e.name);if(x.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return m}processStack(e,t,n,a,o,i,u,c,l){const p=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let h="";if("Enter"===e.node.op&&Object(s.d)("isConstant",e.node,a,n)&&([h]=Object(s.b)(e.node.name,n)),null==a[e.node.name]){const f=operation_executor_executeOp(e.node,a,n,this._resourceManager);h||([h]=Object(s.b)(e.node.name,n));const m=n.currentContext;r.util.isPromise(f)?p.push(f.then(r=>(a[h]=r,n.currentContext=m,this.checkTensorForDisposal(h,e.node,a,n,i,u,c),this.processChildNodes(e.node,t,n,a,o,l),r))):(a[h]=f,this.checkTensorForDisposal(h,e.node,a,n,i,u,c),this.processChildNodes(e.node,t,n,a,o,l))}else this.processChildNodes(e.node,t,n,a,o,l)}return p}processChildNodes(e,t,n,r,a,o){e.children.forEach(e=>{const[i]=Object(s.b)(e.name,n);!a[i]&&o.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!Object(s.e)(e,r,n))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!Object(s.e)(e,r,n))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[a]=Object(s.g)(t),o=this.graph.nodes[a];if(o.attrParams.shape&&o.attrParams.shape.value){const e=o.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t);r.util.assert(t,()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&r.util.assert(n.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=Object(s.g)(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e},{})}checkOutputs(e){e.forEach(e=>{const[t]=Object(s.g)(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class ResourceManager{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class graph_model_GraphModel{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new ResourceManager}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=r.io.browserHTTPRequest(e,this.loadOptions);else{const t=r.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(r.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=await this.handler.load();return this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=r.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new graph_executor_GraphExecutor(a.a.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=a.a.Instance.transformGraph(e.modelInitializer);this.initializer=new graph_executor_GraphExecutor(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=r.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof r.Tensor||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function loadGraphModel(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==e.load&&(e.endsWith("/")||(e+="/"),e+="model.json?tfjs-format=file");const n=new graph_model_GraphModel(e,t);return await n.load(),n}const zt="3.14.0"}]);